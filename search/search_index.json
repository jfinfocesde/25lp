{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenidos-al-submodulo-de-logica-de-programacion","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo de L\u00f3gica de Programaci\u00f3n","text":"<p>\u00a1Bienvenidos a este emocionante viaje hacia el mundo de la programaci\u00f3n y la l\u00f3gica aplicada en Java! Este curso est\u00e1 dise\u00f1ado para introducirte en los conceptos fundamentales de la programaci\u00f3n estructurada utilizando Java, uno de los lenguajes m\u00e1s populares y vers\u00e1tiles en la industria del software. Ya seas un principiante o alguien con experiencia previa en programaci\u00f3n, este curso te brindar\u00e1 las habilidades pr\u00e1cticas necesarias para desarrollar aplicaciones robustas y eficientes.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>Este curso abarca una amplia gama de temas fundamentales, organizados en m\u00f3dulos espec\u00edficos:</p>"},{"location":"#1-introduccion-a-la-programacion-en-java","title":"1. Introducci\u00f3n a la Programaci\u00f3n en Java","text":"<ul> <li>Configuraci\u00f3n del entorno: Aprender\u00e1s a configurar tu entorno de desarrollo con herramientas como JDK (Java Development Kit) y IDEs (Entornos de Desarrollo Integrados) como IntelliJ IDEA o Eclipse.</li> <li>Sintaxis b\u00e1sica: Dominar\u00e1s conceptos b\u00e1sicos como la declaraci\u00f3n de variables, tipos de datos, operadores y estructuras de control (condicionales y bucles).</li> <li>Manejo de entrada y salida: Aprender\u00e1s a interactuar con el usuario mediante la lectura y escritura de datos en la consola.</li> </ul>"},{"location":"#2-estructuras-de-datos-en-java","title":"2. Estructuras de Datos en Java","text":"<ul> <li>Arreglos y listas: Explorar\u00e1s c\u00f3mo trabajar con arreglos unidimensionales y multidimensionales, as\u00ed como con listas din\u00e1micas utilizando la clase <code>ArrayList</code>.</li> <li>Manejo de excepciones: Aprender\u00e1s a manejar errores y excepciones para crear programas m\u00e1s robustos y confiables.</li> </ul>"},{"location":"#3-desarrollo-de-aplicaciones-de-consola","title":"3. Desarrollo de Aplicaciones de Consola","text":"<ul> <li>Proyectos integradores: Desarrollar\u00e1s aplicaciones de consola que integren todos los conceptos aprendidos, desde la l\u00f3gica b\u00e1sica hasta el manejo de datos y la interacci\u00f3n con bases de datos.</li> <li>Pruebas y depuraci\u00f3n: Aprender\u00e1s a realizar pruebas unitarias y a depurar tu c\u00f3digo para asegurar su correcto funcionamiento.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para garantizar que aprendas de manera efectiva:</p> <ul> <li>Clases te\u00f3ricas: Explicaciones claras y concisas sobre los conceptos fundamentales de la programaci\u00f3n en Java.</li> <li>Laboratorios pr\u00e1cticos: Ejercicios guiados para aplicar lo aprendido en entornos controlados.</li> <li>Proyectos integradores: Desarrollo de soluciones completas que integren la l\u00f3gica de programaci\u00f3n, estructuras de datos y bases de datos.</li> </ul>"},{"location":"#compromiso-del-cesde","title":"Compromiso del CESDE","text":"<p>En el CESDE, estamos comprometidos con tu \u00e9xito. Este curso no solo busca ense\u00f1arte a programar en Java, sino tambi\u00e9n inspirarte a ser un agente de cambio en el mundo del desarrollo de software. Nuestro objetivo es que al finalizar este programa, tengas la confianza y las habilidades necesarias para enfrentar cualquier desaf\u00edo tecnol\u00f3gico.</p>"},{"location":"#comencemos-este-viaje-juntos","title":"\u00a1Comencemos este viaje juntos!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s desarrollando aplicaciones robustas, manejando datos de manera eficiente y colaborando en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1Bienvenido al futuro de la programaci\u00f3n en Java!</p>"},{"location":"activities/p1/","title":"Actividad 1 - Ejercicios de L\u00f3gica de Programaci\u00f3n en Java","text":""},{"location":"activities/p1/#paso-0-antes-de-empezar","title":"Paso 0 \u2013 Antes de empezar","text":"<p>\u00a1Haz un fork del repositorio! Dir\u00edgete a: <pre><code>https://github.com/jfinfocesde/act_lp_s2.git\n</code></pre> y pulsa el bot\u00f3n Fork (esquina superior derecha). Tras ello cl\u00f3nalo en tu equipo:</p> <pre><code>git clone https://github.com/TU-USUARIO/act_lp_s2.git\ncd act_lp_s2\n</code></pre>"},{"location":"activities/p1/#instrucciones-para-fork-del-repositorio","title":"Instrucciones para Fork del Repositorio","text":""},{"location":"activities/p1/#paso-1-hacer-fork","title":"Paso 1: Hacer Fork","text":"<ol> <li>Ve al repositorio original en GitHub</li> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino del fork</li> <li>Espera a que se complete el proceso de fork</li> </ol>"},{"location":"activities/p1/#paso-2-clonar-tu-fork","title":"Paso 2: Clonar tu Fork","text":"<pre><code>git clone https://github.com/TU_USUARIO/NOMBRE_DEL_REPO.git\ncd NOMBRE_DEL_REPO\n</code></pre>"},{"location":"activities/p1/#ejercicios-de-programacion","title":"Ejercicios de Programaci\u00f3n","text":"<p>Completa los siguientes 10 ejercicios en las funciones correspondientes del archivo <code>Main.java</code>:</p>"},{"location":"activities/p1/#ejercicio-1-declaracion-de-variables","title":"Ejercicio 1: Declaraci\u00f3n de Variables","text":"<p>Funci\u00f3n: <code>ejercicio1()</code></p> <p>Descripci\u00f3n: Declara variables de diferentes tipos y asigna valores.</p> <p>Indicaciones directas:</p> <ul> <li>Declara una variable int llamada edad y as\u00edgnale el valor 25</li> <li>Declara una variable double llamada altura y as\u00edgnale el valor 1.75</li> <li>Declara una variable String llamada nombre y as\u00edgnale tu nombre</li> <li>Declara una variable boolean llamada esEstudiante y as\u00edgnale true</li> <li>Imprime todas las variables por consola</li> </ul>"},{"location":"activities/p1/#ejercicio-2-tipos-de-datos-primitivos","title":"Ejercicio 2: Tipos de Datos Primitivos","text":"<p>Funci\u00f3n: <code>ejercicio2()</code></p> <p>Descripci\u00f3n: Trabaja con todos los tipos de datos primitivos de Java.</p> <p>Indicaciones directas:</p> <ul> <li>Declara una variable byte con valor 100</li> <li>Declara una variable short con valor 1000</li> <li>Declara una variable int con valor 50000</li> <li>Declara una variable long con valor 1000000L</li> <li>Declara una variable float con valor 3.14f</li> <li>Declara una variable double con valor 2.71828</li> <li>Declara una variable char con valor 'A'</li> <li>Declara una variable boolean con valor false</li> <li>Imprime cada variable mostrando su tipo y valor</li> </ul>"},{"location":"activities/p1/#ejercicio-3-identificadores-y-convencion-lowercamelcase","title":"Ejercicio 3: Identificadores y Convenci\u00f3n lowerCamelCase","text":"<p>Funci\u00f3n: <code>ejercicio3()</code></p> <p>Descripci\u00f3n: Practica el uso correcto de identificadores siguiendo lowerCamelCase.</p> <p>Indicaciones directas:</p> <ul> <li>Declara una variable llamada numeroDeEstudiantes con valor 30</li> <li>Declara una variable llamada promedioCalificaciones con valor 8.5</li> <li>Declara una variable llamada nombreCompleto con tu nombre completo</li> <li>Declara una variable llamada esMayorDeEdad con valor true</li> <li>Agrega comentarios explicando por qu\u00e9 estos nombres son v\u00e1lidos</li> <li>Imprime todas las variables</li> </ul>"},{"location":"activities/p1/#ejercicio-4-declaracion-de-constantes","title":"Ejercicio 4: Declaraci\u00f3n de Constantes","text":"<p>Funci\u00f3n: <code>ejercicio4()</code></p> <p>Descripci\u00f3n: Declara y utiliza constantes con la palabra clave final.</p> <p>Indicaciones directas:</p> <ul> <li>Declara una constante final double PI con valor 3.14159</li> <li>Declara una constante final int DIAS_SEMANA con valor 7</li> <li>Declara una constante final String NOMBRE_UNIVERSIDAD con el nombre de tu universidad</li> <li>Calcula el \u00e1rea de un c\u00edrculo usando PI y radio 5</li> <li>Imprime las constantes y el resultado del c\u00e1lculo</li> </ul>"},{"location":"activities/p1/#ejercicio-5-imprimir-datos-por-consola","title":"Ejercicio 5: Imprimir Datos por Consola","text":"<p>Funci\u00f3n: <code>ejercicio5()</code></p> <p>Descripci\u00f3n: Utiliza diferentes m\u00e9todos para mostrar informaci\u00f3n en consola.</p> <p>Indicaciones directas:</p> <ul> <li>Usa System.out.print() para imprimir \"Hola\" sin salto de l\u00ednea</li> <li>Usa System.out.println() para imprimir \" Mundo\" con salto de l\u00ednea</li> <li>Usa System.out.printf() para imprimir \"Mi edad es %d a\u00f1os\", usando una variable edad</li> <li>Imprime una l\u00ednea separadora usando println()</li> </ul>"},{"location":"activities/p1/#ejercicio-6-capturar-datos-por-consola","title":"Ejercicio 6: Capturar Datos por Consola","text":"<p>Funci\u00f3n: <code>ejercicio6()</code></p> <p>Descripci\u00f3n: Captura informaci\u00f3n del usuario usando Scanner.</p> <p>Indicaciones directas:</p> <ul> <li>Importa la clase Scanner (import java.util.Scanner;)</li> <li>Crea un objeto Scanner: Scanner scanner = new Scanner(System.in);</li> <li>Solicita al usuario su nombre y gu\u00e1rdalo en una variable String</li> <li>Solicita al usuario su edad y gu\u00e1rdala en una variable int</li> <li>Solicita al usuario su altura y gu\u00e1rdala en una variable double</li> <li>Imprime todos los datos capturados</li> <li>Cierra el Scanner</li> </ul>"},{"location":"activities/p1/#ejercicio-7-concatenacion-de-cadenas-de-texto","title":"Ejercicio 7: Concatenaci\u00f3n de Cadenas de Texto","text":"<p>Funci\u00f3n: <code>ejercicio7()</code></p> <p>Descripci\u00f3n: Practica diferentes formas de unir cadenas de texto.</p> <p>Indicaciones directas:</p> <ul> <li>Declara String nombre = \"Juan\" y String apellido = \"P\u00e9rez\"</li> <li>Concatena usando el operador +: String nombreCompleto = nombre + \" \" + apellido</li> <li>Concatena usando concat(): String saludo = \"Hola \".concat(nombreCompleto)</li> <li>Declara int edad = 20 y concatena: \"Tengo \" + edad + \" a\u00f1os\"</li> <li>Imprime todos los resultados</li> </ul>"},{"location":"activities/p1/#ejercicio-8-identificadores-validos-e-invalidos","title":"Ejercicio 8: Identificadores V\u00e1lidos e Inv\u00e1lidos","text":"<p>Funci\u00f3n: <code>ejercicio8()</code></p> <p>Descripci\u00f3n: Demuestra el uso correcto de identificadores en Java.</p> <p>Indicaciones directas:</p> <ul> <li>Declara variables con nombres v\u00e1lidos: miVariable, _contador, $precio, variable123</li> <li>En comentarios, explica por qu\u00e9 son v\u00e1lidos</li> <li>En comentarios, lista nombres inv\u00e1lidos: 123variable, mi-variable, class, public</li> <li>En comentarios, explica por qu\u00e9 son inv\u00e1lidos</li> <li>Imprime las variables v\u00e1lidas</li> </ul>"},{"location":"activities/p1/#ejercicio-9-convencion-lowercamelcase-avanzada","title":"Ejercicio 9: Convenci\u00f3n lowerCamelCase Avanzada","text":"<p>Funci\u00f3n: <code>ejercicio9()</code></p> <p>Descripci\u00f3n: Aplica lowerCamelCase en nombres descriptivos y largos.</p> <p>Indicaciones directas:</p> <ul> <li>Declara: int numeroDeEstudiantesEnLaClase = 25</li> <li>Declara: double promedioDeCalificacionesDelSemestre = 8.7</li> <li>Declara: String nombreCompletoDelProfesor = \"Dr. Garc\u00eda\"</li> <li>Declara: boolean estudianteEstaAprobado = true</li> <li>Imprime todas las variables con mensajes descriptivos</li> </ul>"},{"location":"activities/p1/#ejercicio-10-integracion-de-todos-los-conceptos","title":"Ejercicio 10: Integraci\u00f3n de Todos los Conceptos","text":"<p>Funci\u00f3n: <code>ejercicio10()</code></p> <p>Descripci\u00f3n: Combina todos los temas en un programa completo.</p> <p>Indicaciones directas:</p> <ul> <li>Declara constantes: final double PRECIO_PRODUCTO = 15.99, final int IVA_PORCENTAJE = 16</li> <li>Captura del usuario: cantidad de productos (int) y nombre del cliente (String)</li> <li>Calcula: subtotal = PRECIO_PRODUCTO * cantidad</li> <li>Calcula: iva = subtotal * IVA_PORCENTAJE / 100</li> <li>Calcula: total = subtotal + iva</li> <li>Imprime factura completa usando concatenaci\u00f3n</li> <li>Usa lowerCamelCase en todas las variables</li> </ul>"},{"location":"activities/p2/","title":"Actividad 2 - Operadores y Instrucciones de Control Condicional en Java","text":""},{"location":"activities/p2/#instrucciones-para-fork-del-repositorio","title":"Instrucciones para Fork del Repositorio","text":""},{"location":"activities/p2/#paso-0-antes-de-empezar","title":"Paso 0 \u2013 Antes de empezar","text":"<p>\u00a1Haz un fork del repositorio! Dir\u00edgete a: <pre><code>https://github.com/jfinfocesde/act_lp_s3.git\n</code></pre> y pulsa el bot\u00f3n Fork (esquina superior derecha). Tras ello cl\u00f3nalo en tu equipo:</p> <pre><code>git clone https://github.com/TU-USUARIO/act_lp_s3.git\ncd act_lp_s3\n</code></pre>"},{"location":"activities/p2/#ejercicios-de-programacion","title":"Ejercicios de Programaci\u00f3n","text":"<p>Completa los siguientes 10 ejercicios en las funciones correspondientes del archivo <code>Main.java</code>:</p>"},{"location":"activities/p2/#ejercicio-1-operadores-aritmeticos-basicos","title":"Ejercicio 1: Operadores Aritm\u00e9ticos B\u00e1sicos","text":"<p>Funci\u00f3n: <code>ejercicio1()</code></p> <p>Descripci\u00f3n: Practica el uso de operadores aritm\u00e9ticos b\u00e1sicos en Java.</p> <p>Indicaciones directas:</p> <ul> <li>Declara dos variables int: x = 10 y y = 5</li> <li>Realiza y muestra la suma: int resultadoSuma = x + y</li> <li>Realiza y muestra la resta: int resultadoResta = x - y</li> <li>Realiza y muestra la multiplicaci\u00f3n: int resultadoMultiplicacion = x * y</li> <li>Realiza y muestra la divisi\u00f3n entera: int resultadoDivision = x / y</li> <li>Realiza y muestra el m\u00f3dulo: int resultadoModulo = x % y</li> <li>Imprime todos los resultados con mensajes descriptivos</li> </ul>"},{"location":"activities/p2/#ejercicio-2-division-entera-vs-division-decimal","title":"Ejercicio 2: Divisi\u00f3n Entera vs Divisi\u00f3n Decimal","text":"<p>Funci\u00f3n: <code>ejercicio2()</code></p> <p>Descripci\u00f3n: Comprende la diferencia entre divisi\u00f3n entera y decimal.</p> <p>Indicaciones directas:</p> <ul> <li>Declara int a = 10 y int b = 3</li> <li>Calcula la divisi\u00f3n entera: int divisionEntera = a / b</li> <li>Calcula la divisi\u00f3n decimal: double divisionDecimal = (double) a / b</li> <li>Declara double x = 15.5 y double y = 4.2</li> <li>Calcula la divisi\u00f3n de decimales: double divisionDecimales = x / y</li> <li>Imprime todos los resultados mostrando las diferencias</li> <li>Explica en comentarios por qu\u00e9 los resultados son diferentes</li> </ul>"},{"location":"activities/p2/#ejercicio-3-operadores-de-incremento-y-decremento","title":"Ejercicio 3: Operadores de Incremento y Decremento","text":"<p>Funci\u00f3n: <code>ejercicio3()</code></p> <p>Descripci\u00f3n: Practica el uso de operadores de incremento (++) y decremento (--).</p> <p>Indicaciones directas:</p> <ul> <li>Declara int contador = 5</li> <li>Muestra el valor inicial de contador</li> <li>Aplica pre-incremento: ++contador y muestra el resultado</li> <li>Aplica post-incremento: contador++ y muestra el resultado</li> <li>Aplica pre-decremento: --contador y muestra el resultado</li> <li>Aplica post-decremento: contador-- y muestra el resultado</li> <li>Explica en comentarios la diferencia entre pre y post operadores</li> </ul>"},{"location":"activities/p2/#ejercicio-4-operadores-de-asignacion-basicos","title":"Ejercicio 4: Operadores de Asignaci\u00f3n B\u00e1sicos","text":"<p>Funci\u00f3n: <code>ejercicio4()</code></p> <p>Descripci\u00f3n: Utiliza operadores de asignaci\u00f3n b\u00e1sicos y compuestos.</p> <p>Indicaciones directas:</p> <ul> <li>Declara int numero = 10</li> <li>Usa asignaci\u00f3n compuesta de suma: numero += 5 (equivale a numero = numero + 5)</li> <li>Usa asignaci\u00f3n compuesta de resta: numero -= 3</li> <li>Usa asignaci\u00f3n compuesta de multiplicaci\u00f3n: numero *= 2</li> <li>Usa asignaci\u00f3n compuesta de divisi\u00f3n: numero /= 4</li> <li>Usa asignaci\u00f3n compuesta de m\u00f3dulo: numero %= 3</li> <li>Imprime el valor de numero despu\u00e9s de cada operaci\u00f3n</li> </ul>"},{"location":"activities/p2/#ejercicio-5-operadores-de-asignacion-avanzados","title":"Ejercicio 5: Operadores de Asignaci\u00f3n Avanzados","text":"<p>Funci\u00f3n: <code>ejercicio5()</code></p> <p>Descripci\u00f3n: Practica operadores de asignaci\u00f3n con diferentes tipos de datos.</p> <p>Indicaciones directas:</p> <ul> <li>Declara double precio = 100.0</li> <li>Aplica descuento del 15%: precio *= 0.85</li> <li>Declara String mensaje = \"Hola\"</li> <li>Concatena usando +=: mensaje += \" Mundo\"</li> <li>Declara int puntos = 50</li> <li>Duplica los puntos: puntos *= 2</li> <li>Aplica bonificaci\u00f3n: puntos += 25</li> <li>Imprime todos los resultados</li> </ul>"},{"location":"activities/p2/#ejercicio-6-instrucciones-condicionales-simples-if","title":"Ejercicio 6: Instrucciones Condicionales Simples (if)","text":"<p>Funci\u00f3n: <code>ejercicio6()</code></p> <p>Descripci\u00f3n: Utiliza la estructura condicional if para tomar decisiones.</p> <p>Indicaciones directas:</p> <ul> <li>Declara int edad = 18</li> <li>Usa if para verificar si edad &gt;= 18, imprime \"Es mayor de edad\"</li> <li>Declara double nota = 7.5</li> <li>Usa if para verificar si nota &gt;= 6.0, imprime \"Aprobado\"</li> <li>Declara int numero = -5</li> <li>Usa if para verificar si numero &gt; 0, imprime \"N\u00famero positivo\"</li> <li>Usa if para verificar si numero &lt; 0, imprime \"N\u00famero negativo\"</li> <li>Usa if para verificar si numero == 0, imprime \"N\u00famero es cero\"</li> </ul>"},{"location":"activities/p2/#ejercicio-7-instrucciones-condicionales-if-else","title":"Ejercicio 7: Instrucciones Condicionales if-else","text":"<p>Funci\u00f3n: <code>ejercicio7()</code></p> <p>Descripci\u00f3n: Utiliza la estructura condicional if-else para decisiones binarias.</p> <p>Indicaciones directas:</p> <ul> <li>Declara int numero = 15</li> <li>Usa if-else para verificar si numero es par o impar (numero % 2 == 0)</li> <li>Declara double temperatura = 25.5</li> <li>Usa if-else para verificar si temperatura &gt; 30, imprime \"Hace calor\" o \"Temperatura agradable\"</li> <li>Declara int puntuacion = 85</li> <li>Usa if-else para verificar si puntuacion &gt;= 70, imprime \"Aprobado\" o \"Reprobado\"</li> <li>Declara boolean esEstudiante = true</li> <li>Usa if-else para imprimir \"Es estudiante\" o \"No es estudiante\"</li> </ul>"},{"location":"activities/p2/#ejercicio-8-instrucciones-condicionales-if-else-if-else","title":"Ejercicio 8: Instrucciones Condicionales if-else if-else","text":"<p>Funci\u00f3n: <code>ejercicio8()</code></p> <p>Descripci\u00f3n: Utiliza m\u00faltiples condiciones con if-else if-else.</p> <p>Indicaciones directas:</p> <ul> <li>Declara int calificacion = 85</li> <li>Usa if-else if-else para determinar la letra de calificaci\u00f3n:</li> <li>Si calificacion &gt;= 90: \"A\"</li> <li>Si calificacion &gt;= 80: \"B\"</li> <li>Si calificacion &gt;= 70: \"C\"</li> <li>Si calificacion &gt;= 60: \"D\"</li> <li>Si no: \"F\"</li> <li>Declara int hora = 14</li> <li>Usa if-else if-else para determinar el saludo seg\u00fan la hora:</li> <li>Si hora &lt; 12: \"Buenos d\u00edas\"</li> <li>Si hora &lt; 18: \"Buenas tardes\"</li> <li>Si no: \"Buenas noches\"</li> </ul>"},{"location":"activities/p2/#ejercicio-9-operadores-de-comparacion","title":"Ejercicio 9: Operadores de Comparaci\u00f3n","text":"<p>Funci\u00f3n: <code>ejercicio9()</code></p> <p>Descripci\u00f3n: Utiliza operadores de comparaci\u00f3n para evaluar condiciones.</p> <p>Indicaciones directas:</p> <ul> <li>Declara int a = 10 y int b = 20</li> <li>Eval\u00faa y muestra: a == b (igualdad)</li> <li>Eval\u00faa y muestra: a != b (desigualdad)</li> <li>Eval\u00faa y muestra: a &lt; b (menor que)</li> <li>Eval\u00faa y muestra: a &gt; b (mayor que)</li> <li>Eval\u00faa y muestra: a &lt;= b (menor o igual que)</li> <li>Eval\u00faa y muestra: a &gt;= b (mayor o igual que)</li> <li>Declara String texto1 = \"Hola\" y String texto2 = \"Hola\"</li> <li>Eval\u00faa y muestra: texto1.equals(texto2) (comparaci\u00f3n de cadenas)</li> </ul>"},{"location":"activities/p2/#ejercicio-10-operadores-logicos-y-condiciones-complejas","title":"Ejercicio 10: Operadores L\u00f3gicos y Condiciones Complejas","text":"<p>Funci\u00f3n: <code>ejercicio10()</code></p> <p>Descripci\u00f3n: Combina operadores l\u00f3gicos (&amp;&amp;, ||, !) con condiciones complejas.</p> <p>Indicaciones directas:</p> <ul> <li>Declara int edad = 25, double salario = 30000, boolean tieneExperiencia = true</li> <li>Usa operador AND (&amp;&amp;): if (edad &gt;= 18 &amp;&amp; salario &gt; 25000), imprime \"Califica para pr\u00e9stamo\"</li> <li>Usa operador OR (||): if (edad &lt; 18 || edad &gt; 65), imprime \"Descuento especial\"</li> <li>Usa operador NOT (!): if (!tieneExperiencia), imprime \"Necesita capacitaci\u00f3n\"</li> <li>Combina operadores: if (edad &gt;= 25 &amp;&amp; (salario &gt; 20000 || tieneExperiencia)), imprime \"Candidato ideal\"</li> <li>Declara boolean esFinDeSemana = false, boolean esFeriado = true</li> <li>Usa: if (esFinDeSemana || esFeriado), imprime \"No hay clases\"</li> <li>Usa: if (!esFinDeSemana &amp;&amp; !esFeriado), imprime \"D\u00eda de clases normal\"</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/p1/","title":"Semana 1 - Pacto pedag\u00f3gico","text":"<p>El pacto pedag\u00f3gico es un acuerdo que se establece entre el docente y los estudiantes al inicio de un curso, con el fin de establecer las normas, expectativas, responsabilidades y compromisos de todas las partes involucradas en el proceso de ense\u00f1anza-aprendizaje.</p> Grupo Viernes 18:15 - 21:30Grupo S\u00e1bado 7:30 - 10:30 <p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p> </p> <p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p> </p>"},{"location":"content/p10/","title":"Semana 10  - M\u00e9todos en Java","text":""},{"location":"content/p10/#1-que-es-un-metodo-en-java","title":"1. \u00bfQu\u00e9 es un m\u00e9todo en Java?","text":"<p>Un m\u00e9todo en Java es un bloque de c\u00f3digo que realiza una tarea espec\u00edfica y puede ser invocado (llamado) desde otras partes del programa. Los m\u00e9todos permiten modularizar el c\u00f3digo, hacerlo reutilizable y m\u00e1s f\u00e1cil de mantener.</p> <p>Caracter\u00edsticas principales: - Un m\u00e9todo tiene un nombre \u00fanico. - Puede aceptar par\u00e1metros (entradas). - Puede devolver un valor (salida) o no devolver nada (<code>void</code>). - Se define dentro de una clase.</p>"},{"location":"content/p10/#2-estructura-basica-de-un-metodo","title":"2. Estructura b\u00e1sica de un m\u00e9todo","text":"<p>La sintaxis general de un m\u00e9todo en Java es:</p> <pre><code>[modificadores] tipoRetorno nombreMetodo([par\u00e1metros]) {\n    // Cuerpo del m\u00e9todo\n}\n</code></pre> <ul> <li>Modificadores: <code>public</code>, <code>private</code>, <code>static</code>, etc.</li> <li>tipoRetorno: Tipo de dato que devuelve el m\u00e9todo (<code>int</code>, <code>String</code>, <code>void</code>, etc.).</li> <li>nombreMetodo: Nombre del m\u00e9todo (sigue las convenciones de nombres en Java: camelCase).</li> <li>par\u00e1metros: Lista opcional de variables que el m\u00e9todo recibe.</li> <li>Cuerpo: C\u00f3digo que se ejecuta cuando se llama al m\u00e9todo.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>public void saludar() {\n    System.out.println(\"\u00a1Hola, mundo!\");\n}\n</code></pre>"},{"location":"content/p10/#3-tipos-de-metodos-en-java","title":"3. Tipos de m\u00e9todos en Java","text":""},{"location":"content/p10/#31-metodos-sin-retorno-void","title":"3.1. M\u00e9todos sin retorno (<code>void</code>)","text":"<p>No devuelven ning\u00fan valor. Se utilizan cuando el m\u00e9todo solo realiza una acci\u00f3n.</p> <pre><code>public void imprimirMensaje(String mensaje) {\n    System.out.println(mensaje);\n}\n</code></pre>"},{"location":"content/p10/#32-metodos-con-retorno","title":"3.2. M\u00e9todos con retorno","text":"<p>Devuelven un valor usando la palabra clave <code>return</code>. El tipo de retorno debe coincidir con el tipo declarado.</p> <pre><code>public int sumar(int a, int b) {\n    return a + b;\n}\n</code></pre>"},{"location":"content/p10/#33-metodos-con-parametros","title":"3.3. M\u00e9todos con par\u00e1metros","text":"<p>Aceptan uno o m\u00e1s par\u00e1metros para realizar operaciones.</p> <pre><code>public double calcularAreaCirculo(double radio) {\n    return Math.PI * radio * radio;\n}\n</code></pre>"},{"location":"content/p10/#34-metodos-sin-parametros","title":"3.4. M\u00e9todos sin par\u00e1metros","text":"<p>No requieren par\u00e1metros.</p> <pre><code>public String obtenerFechaActual() {\n    return java.time.LocalDate.now().toString();\n}\n</code></pre>"},{"location":"content/p10/#4-modificadores-de-acceso","title":"4. Modificadores de acceso","text":"<p>Controlan la visibilidad de un m\u00e9todo. Los modificadores son:</p> <ul> <li><code>public</code>: Accesible desde cualquier clase.</li> <li><code>private</code>: Solo accesible dentro de la misma clase.</li> <li><code>protected</code>: Accesible dentro del mismo paquete y en clases hijas (herencia).</li> <li><code>default</code> (sin modificador): Accesible solo dentro del mismo paquete.</li> </ul> <p>Ejemplo:</p> <pre><code>public class EjemploAcceso {\n    public void metodoPublico() {\n        System.out.println(\"M\u00e9todo p\u00fablico\");\n    }\n\n    private void metodoPrivado() {\n        System.out.println(\"M\u00e9todo privado\");\n    }\n\n    protected void metodoProtegido() {\n        System.out.println(\"M\u00e9todo protegido\");\n    }\n\n    void metodoDefault() {\n        System.out.println(\"M\u00e9todo default\");\n    }\n}\n</code></pre>"},{"location":"content/p10/#5-metodos-estaticos-static","title":"5. M\u00e9todos est\u00e1ticos (<code>static</code>)","text":"<p>Pertenecen a la clase, no a una instancia. Se pueden invocar sin crear un objeto.</p> <p>Ejemplo:</p> <pre><code>public class Calculadora {\n    public static int multiplicar(int a, int b) {\n        return a * b;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        int resultado = Calculadora.multiplicar(5, 3); // Llamada sin instancia\n        System.out.println(resultado); // 15\n    }\n}\n</code></pre>"},{"location":"content/p10/#actividad-practica-gestion-de-un-supermercado","title":"Actividad pr\u00e1ctica: Gesti\u00f3n de un supermercado","text":""},{"location":"content/p10/#enunciado","title":"Enunciado","text":"<p>Imagina que trabajas en un supermercado y necesitas crear un programa en Java para ayudar con las operaciones diarias en la caja. El programa debe realizar las siguientes tareas:</p> <ol> <li>Mostrar un mensaje de bienvenida al cliente.</li> <li>Calcular el total de una compra sumando los precios de dos productos.</li> <li>Aplicar un descuento del 10% si el total supera los $50.</li> <li>Calcular el cambio a devolver al cliente seg\u00fan el dinero pagado.</li> <li>Mostrar un resumen de la compra con el total, descuento (si aplica), pago y cambio.</li> </ol>"},{"location":"content/p10/#instrucciones-paso-a-paso","title":"Instrucciones paso a paso","text":"<p>Sigue estos pasos cuidadosamente para crear el programa en Java:</p> <ol> <li> <p>Crea un proyecto en Java llamado <code>Supermercado</code>: </p> <ul> <li>Aseg\u00farate de importar la clase <code>Scanner</code> (<code>import java.util.Scanner;</code>) para leer la entrada del usuario.</li> </ul> </li> <li> <p>Crea el m\u00e9todo <code>mostrarBienvenida</code>:</p> <ul> <li>Declara un m\u00e9todo est\u00e1tico (<code>static</code>), sin retorno (<code>void</code>), sin par\u00e1metros.</li> <li>El m\u00e9todo debe imprimir un mensaje de bienvenida, por ejemplo: \"\u00a1Bienvenido al Supermercado La Econ\u00f3mica!\" y una nota sobre el descuento (\"Por compras mayores a $50, obtienes un 10% de descuento.\").</li> </ul> </li> <li> <p>Crea el m\u00e9todo <code>calcularTotal</code>:</p> <ul> <li>Declara un m\u00e9todo est\u00e1tico (<code>static</code>), con retorno (<code>double</code>), que reciba dos par\u00e1metros (<code>precio1</code> y <code>precio2</code>, ambos de tipo <code>double</code>).</li> <li>El m\u00e9todo debe devolver la suma de <code>precio1</code> y <code>precio2</code>.</li> </ul> </li> <li> <p>Crea el m\u00e9todo <code>aplicarDescuento</code>:</p> <ul> <li>Declara un m\u00e9todo est\u00e1tico (<code>static</code>), con retorno (<code>double</code>), que reciba un par\u00e1metro (<code>total</code> de tipo <code>double</code>).</li> <li>Si <code>total</code> es mayor a 50, devuelve <code>total * 0.9</code> (aplica 10% de descuento). Si no, devuelve <code>total</code> sin cambios.</li> </ul> </li> <li> <p>Crea el m\u00e9todo <code>calcularCambio</code>:</p> <ul> <li>Declara un m\u00e9todo est\u00e1tico (<code>static</code>), con retorno (<code>double</code>), que reciba dos par\u00e1metros (<code>total</code> y <code>pago</code>, ambos de tipo <code>double</code>).</li> <li>Si <code>pago</code> es menor que <code>total</code>, devuelve <code>-1</code> (indica pago insuficiente). Si no, devuelve <code>pago - total</code>.</li> </ul> </li> <li> <p>Crea el m\u00e9todo <code>imprimirResumen</code>:</p> <ul> <li>Declara un m\u00e9todo est\u00e1tico (<code>static</code>), sin retorno (<code>void</code>), que reciba cuatro par\u00e1metros (<code>total</code>, <code>totalConDescuento</code>, <code>pago</code>, <code>cambio</code>, todos de tipo <code>double</code>).</li> <li>Imprime un resumen con:<ul> <li>El total original (formateado a 2 decimales con <code>printf</code>).</li> <li>El total con descuento (formateado a 2 decimales).</li> <li>El pago recibido (formateado a 2 decimales).</li> <li>Si <code>cambio</code> es mayor o igual a 0, imprime el cambio devuelto (formateado). Si no, imprime \"Error: Pago insuficiente.\".</li> <li>Un mensaje final: \"\u00a1Gracias por su compra!\".</li> </ul> </li> </ul> </li> <li> <p>Crea el m\u00e9todo <code>main</code>:</p> <ul> <li>Declara el m\u00e9todo <code>main</code> como <code>public static void main(String[] args)</code>.</li> <li>Crea un objeto <code>Scanner</code> para leer la entrada del usuario.</li> <li>Llama a <code>mostrarBienvenida()</code> para mostrar el mensaje inicial.</li> <li>Pide al usuario que ingrese el precio del primer producto (<code>double</code>) y gu\u00e1rdalo en una variable.</li> <li>Pide al usuario que ingrese el precio del segundo producto (<code>double</code>) y gu\u00e1rdalo en otra variable.</li> <li>Llama a <code>calcularTotal</code> con los dos precios y guarda el resultado en una variable.</li> <li>Llama a <code>aplicarDescuento</code> con el total y guarda el resultado en otra variable.</li> <li>Muestra el total a pagar (formateado a 2 decimales) y pide al usuario que ingrese el monto pagado (<code>double</code>).</li> <li>Llama a <code>calcularCambio</code> con el total con descuento y el pago, y guarda el resultado.</li> <li>Llama a <code>imprimirResumen</code> con el total original, total con descuento, pago y cambio.</li> <li>Cierra el objeto <code>Scanner</code>.</li> </ul> </li> <li> <p>Prueba el programa:</p> <ul> <li>Compila y ejecuta el programa.</li> <li>Ingresa precios para dos productos (ejemplo: 30.5 y 25.0).</li> <li>Ingresa un monto pagado (ejemplo: 60.0).</li> <li>Verifica que el programa:<ul> <li>Muestre el mensaje de bienvenida.</li> <li>Calcule correctamente el total (ejemplo: 55.5).</li> <li>Aplique el descuento si corresponde (ejemplo: 55.5 * 0.9 = 49.95).</li> <li>Calcule el cambio (ejemplo: 60.0 - 49.95 = 10.05).</li> <li>Muestre un resumen claro.</li> </ul> </li> <li>Prueba con a pago insuficiente (ejemplo: 40.0) para verificar que muestra el error.</li> </ul> </li> </ol>"},{"location":"content/p11/","title":"Semana 11: ArrayList (Java)","text":""},{"location":"content/p11/#que-es-arraylist","title":"\u00bfQu\u00e9 es <code>ArrayList</code>?","text":"<p><code>ArrayList</code> es una lista din\u00e1mica que:</p> <ul> <li>Mantiene orden de inserci\u00f3n.</li> <li>Permite duplicados y <code>null</code>.</li> <li>Accede por \u00edndice en <code>O(1)</code>.</li> <li>Se redimensiona autom\u00e1ticamente.</li> </ul>"},{"location":"content/p11/#importacion-y-creacion","title":"Importaci\u00f3n y creaci\u00f3n","text":"<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Programar contra la interfaz List\n        List&lt;String&gt; nombres = new ArrayList&lt;&gt;();\n        System.out.println(nombres); // []\n    }\n}\n</code></pre>"},{"location":"content/p11/#operaciones-basicas","title":"Operaciones b\u00e1sicas","text":"<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;String&gt; frutas = new ArrayList&lt;&gt;();\n\n        // A\u00f1adir al final\n        frutas.add(\"Manzana\");\n        frutas.add(\"Banana\");\n        frutas.add(\"Naranja\");\n\n        // Insertar en \u00edndice\n        frutas.add(1, \"Pera\");\n\n        // Obtener/modificar por \u00edndice\n        String primera = frutas.get(0); // \"Manzana\"\n        frutas.set(2, \"Uva\");          // reemplaza \"Banana\" -&gt; \"Uva\"\n\n        // Eliminar\n        frutas.remove(3);        // por \u00edndice\n        frutas.remove(\"Pera\");   // por objeto (primera aparici\u00f3n)\n\n        // Tama\u00f1o y chequeos\n        System.out.println(frutas);         // [Manzana, Uva]\n        System.out.println(frutas.size());  // 2\n        System.out.println(frutas.isEmpty()); // false\n        System.out.println(frutas.contains(\"Uva\")); // true\n    }\n}\n</code></pre>"},{"location":"content/p11/#recorrer-la-lista","title":"Recorrer la lista","text":"<pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; numeros = new ArrayList&lt;&gt;();\n        numeros.add(10);\n        numeros.add(20);\n        numeros.add(30);\n\n        // 1) for con \u00edndice\n        for (int i = 0; i &lt; numeros.size(); i++) {\n            System.out.println(\"i=\" + i + \", valor=\" + numeros.get(i));\n        }\n\n        // 2) for-each\n        for (Integer n : numeros) {\n            System.out.println(\"n=\" + n);\n        }\n\n        // 3) Iterator (permite eliminar seguro mientras iteras)\n        Iterator&lt;Integer&gt; it = numeros.iterator();\n        while (it.hasNext()) {\n            Integer n = it.next();\n            if (n == 20) {\n                it.remove(); // elimina 20 sin ConcurrentModificationException\n            }\n        }\n\n        System.out.println(numeros); // [10, 30]\n    }\n}\n</code></pre>"},{"location":"content/p11/#metodos-utiles","title":"M\u00e9todos \u00fatiles","text":"<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;String&gt; lista = new ArrayList&lt;&gt;();\n        lista.add(\"A\");\n        lista.add(\"B\");\n        lista.add(\"C\");\n        lista.add(\"B\");\n\n        // indexOf / lastIndexOf\n        int primeraB = lista.indexOf(\"B\");     // 1\n        int ultimaB  = lista.lastIndexOf(\"B\"); // 3\n\n        // subList (vista de la lista original)\n        List&lt;String&gt; sub = lista.subList(1, 3); // elementos en [1, 3)\n        System.out.println(sub); // [B, C]\n\n        // removeIf (Java 8+)\n        lista.removeIf(s -&gt; s.equals(\"B\")); // elimina todas las \"B\"\n        System.out.println(lista); // [A, C]\n\n        // clear\n        lista.clear(); // []\n    }\n}\n</code></pre>"},{"location":"content/p11/#ordenar-y-comparar","title":"Ordenar y comparar","text":"<pre><code>import java.util.*;\n\npublic class Main {\n    // M\u00e9todos auxiliares est\u00e1ticos (sin clases adicionales)\n    static void ordenarEnteros() {\n        List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(Arrays.asList(7, 3, 9, 1));\n        nums.sort(Comparator.naturalOrder());\n        System.out.println(nums); // [1, 3, 7, 9]\n        nums.sort(Comparator.reverseOrder());\n        System.out.println(nums); // [9, 7, 3, 1]\n    }\n\n    static void ordenarStrings() {\n        List&lt;String&gt; nombres = new ArrayList&lt;&gt;(Arrays.asList(\"Ana\", \"luis\", \"Marta\", \"carlos\"));\n        // Alfab\u00e9tico considerando may\u00fasculas/min\u00fasculas\n        nombres.sort(Comparator.naturalOrder());\n        System.out.println(nombres);\n        // Alfab\u00e9tico ignorando may\u00fasculas/min\u00fasculas\n        nombres.sort(String.CASE_INSENSITIVE_ORDER);\n        System.out.println(nombres);\n        // Por longitud\n        nombres.sort(Comparator.comparingInt(String::length));\n        System.out.println(nombres);\n    }\n\n    public static void main(String[] args) {\n        ordenarEnteros();\n        ordenarStrings();\n    }\n}\n</code></pre>"},{"location":"content/p11/#busqueda","title":"B\u00fasqueda","text":"<pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(Arrays.asList(7, 3, 9, 1));\n\n        // contains / indexOf\n        System.out.println(nums.contains(9)); // true\n        System.out.println(nums.indexOf(3));  // puede ser 1\n\n        // binarySearch requiere lista ORDENADA\n        Collections.sort(nums);               // [1, 3, 7, 9]\n        int pos = Collections.binarySearch(nums, 7); // \u00edndice 2\n        System.out.println(pos);\n    }\n}\n</code></pre>"},{"location":"content/p11/#conversion-a-arreglo","title":"Conversi\u00f3n a arreglo","text":"<pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;String&gt; lista = new ArrayList&lt;&gt;(Arrays.asList(\"X\", \"Y\"));\n\n        // a Object[]\n        Object[] arr1 = lista.toArray();\n\n        // a String[]\n        String[] arr2 = lista.toArray(new String[0]);\n        System.out.println(arr1.length + \", \" + arr2.length);\n    }\n}\n</code></pre>"},{"location":"content/p11/#complejidad-big-o","title":"Complejidad (Big-O)","text":"<ul> <li><code>add(E)</code> al final: <code>O(1)</code> amortizada.</li> <li><code>add(i, E)</code> en medio: <code>O(n)</code>.</li> <li><code>get(i)</code> / <code>set(i, E)</code>: <code>O(1)</code>.</li> <li><code>remove(i)</code> / <code>remove(Object)</code>: <code>O(n)</code>.</li> <li><code>contains</code> / <code>indexOf</code>: <code>O(n)</code>.</li> <li>Recorrer toda la lista: <code>O(n)</code>.</li> </ul>"},{"location":"content/p11/#mini-proyecto-lista-de-tareas","title":"Mini-proyecto: Lista de tareas","text":"<pre><code>import java.util.*;\n\npublic class Main {\n    // Representaci\u00f3n simple sin clases adicionales\n    static List&lt;String&gt; tareas = new ArrayList&lt;&gt;();\n    static List&lt;Boolean&gt; hechas = new ArrayList&lt;&gt;();\n\n    static void a\u00f1adir(String titulo) {\n        tareas.add(titulo);\n        hechas.add(false);\n    }\n\n    static void marcarHecha(int i) {\n        if (i &gt;= 0 &amp;&amp; i &lt; tareas.size()) {\n            hechas.set(i, true);\n        }\n    }\n\n    static void eliminar(int i) {\n        if (i &gt;= 0 &amp;&amp; i &lt; tareas.size()) {\n            tareas.remove(i);\n            hechas.remove(i);\n        }\n    }\n\n    static void listar() {\n        for (int i = 0; i &lt; tareas.size(); i++) {\n            System.out.println(i + \": \" + (hechas.get(i) ? \"[x] \" : \"[ ] \") + tareas.get(i));\n        }\n    }\n\n    public static void main(String[] args) {\n        a\u00f1adir(\"Estudiar ArrayList\");\n        a\u00f1adir(\"Hacer ejercicios\");\n        listar();\n        marcarHecha(0);\n        eliminar(1);\n        listar();\n    }\n}\n</code></pre>"},{"location":"content/p12/","title":"Semana 12 - Evaluaci\u00f3n Segundo Momento","text":""},{"location":"content/p12/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: https://seia-stalone.vercel.app/</p>"},{"location":"content/p12/#codigo-pednohri","title":"Codigo: PEDNOHRI","text":""},{"location":"content/p13/","title":"Semana 13","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p14/","title":"Semana 14","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p15/","title":"Semana 15","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p16/","title":"Semana 16","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p17/","title":"Semana 17","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p18/","title":"Semana 18","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p2/","title":"Semana 2 - \u00bfQu\u00e9 es la programaci\u00f3n?","text":"<p>La programaci\u00f3n es el proceso de dise\u00f1ar, codificar, depurar y mantener el c\u00f3digo fuente de programas de computadora. En esencia, es el acto de darle instrucciones a una computadora para que realice tareas espec\u00edficas.</p> <p>Elementos clave de la programaci\u00f3n:</p> <ul> <li>Algoritmos: Secuencia de pasos l\u00f3gicos para resolver un problema.</li> <li>Lenguajes de programaci\u00f3n: Herramientas que usamos para escribir instrucciones que la computadora puede entender y ejecutar.</li> <li>Sintaxis: Reglas que definen c\u00f3mo se debe escribir el c\u00f3digo en un lenguaje espec\u00edfico.</li> <li>L\u00f3gica: La forma de pensar y estructurar soluciones a problemas.</li> </ul> <p>Importancia de la programaci\u00f3n:</p> <ul> <li>Automatizaci\u00f3n de tareas repetitivas</li> <li>Resoluci\u00f3n de problemas complejos</li> <li>Innovaci\u00f3n tecnol\u00f3gica</li> <li>Desarrollo de software para diversas industrias (medicina, finanzas, entretenimiento, etc.)</li> </ul>"},{"location":"content/p2/#que-es-la-logica-de-programacion","title":"\u00bfQu\u00e9 es la l\u00f3gica de programaci\u00f3n?","text":"<p>La l\u00f3gica de programaci\u00f3n es el conjunto de conceptos y t\u00e9cnicas fundamentales que se utilizan para desarrollar algoritmos y resolver problemas mediante el uso de un lenguaje de programaci\u00f3n. Incluye:</p> <ol> <li>Secuencia: Ordenar las instrucciones de manera l\u00f3gica.</li> <li>Condicionales: Tomar decisiones basadas en condiciones (if-else).</li> <li>Bucles: Repetir acciones (for, while).</li> <li>Variables: Almacenar y manipular datos.</li> <li>Funciones: Organizar c\u00f3digo en bloques reutilizables.</li> <li>Estructuras de datos: Organizar informaci\u00f3n (arrays, listas, etc.).</li> <li>Operadores: Realizar operaciones matem\u00e1ticas y l\u00f3gicas.</li> <li>Entrada/Salida: Interactuar con el usuario o archivos.</li> </ol> <p>Dominar estos conceptos permite crear programas eficientes y resolver problemas complejos de manera estructurada.</p>"},{"location":"content/p2/#que-es-un-algoritmo","title":"\u00bfQu\u00e9 es un algoritmo?","text":"<p>Un algoritmo es una secuencia ordenada y finita de pasos o instrucciones bien definidas que se utilizan para resolver un problema o realizar una tarea espec\u00edfica. En esencia, es un procedimiento paso a paso para lograr un resultado deseado.</p> <p>Caracter\u00edsticas principales de un algoritmo:</p> <ol> <li>Precisi\u00f3n: Cada paso debe estar claramente definido.</li> <li>Finito: Debe tener un n\u00famero limitado de pasos.</li> <li>Entrada: Puede tener cero o m\u00e1s entradas.</li> <li>Salida: Debe producir al menos un resultado.</li> <li>Eficacia: Debe ser capaz de resolver el problema en un tiempo razonable.</li> </ol> <p>Los algoritmos se utilizan en muchos campos, no solo en programaci\u00f3n. Por ejemplo, una receta de cocina es un tipo de algoritmo. En inform\u00e1tica, los algoritmos son la base para desarrollar programas y software.</p> <p>Ejemplos de algoritmos comunes incluyen:</p> <ul> <li>Algoritmos de b\u00fasqueda (b\u00fasqueda binaria, b\u00fasqueda lineal)</li> <li>Algoritmos de ordenamiento (quicksort, bubble sort)</li> <li>Algoritmos de compresi\u00f3n de datos</li> <li>Algoritmos de encriptaci\u00f3n</li> </ul>"},{"location":"content/p2/#introduccion-a-java","title":"Introducci\u00f3n a Java","text":"<p>Java es un lenguaje de programaci\u00f3n de prop\u00f3sito general, concurrente, orientado a objetos y basado en clases que fue dise\u00f1ado espec\u00edficamente para tener tan pocas dependencias de implementaci\u00f3n como fuera posible.</p> <p>Historia de Java:</p> <ul> <li>Desarrollado por James Gosling en Sun Microsystems (ahora propiedad de Oracle)</li> <li>Lanzado inicialmente en 1995</li> <li>Inspirado en C y C++, pero con un modelo de objetos m\u00e1s simple y eliminando caracter\u00edsticas de bajo nivel</li> </ul> <p>Caracter\u00edsticas principales de Java:</p> <ul> <li>Independencia de la plataforma: \"Write Once, Run Anywhere\" (WORA)</li> <li>Orientado a objetos (aunque no lo cubriremos en este curso b\u00e1sico)</li> <li>Fuertemente tipado</li> <li>Recolecci\u00f3n de basura autom\u00e1tica</li> <li>Amplia biblioteca est\u00e1ndar</li> <li>Soporte para concurrencia</li> </ul> <p>\u00c1reas de aplicaci\u00f3n de Java:</p> <ul> <li>Desarrollo de aplicaciones de escritorio</li> <li>Aplicaciones web</li> <li>Aplicaciones m\u00f3viles (Android)</li> <li>Sistemas embebidos</li> <li>Aplicaciones empresariales a gran escala</li> </ul>"},{"location":"content/p2/#por-que-java-es-bueno-para-aprender-programacion","title":"Por qu\u00e9 Java es bueno para aprender programaci\u00f3n","text":"<p>Java es un excelente lenguaje para aprender programaci\u00f3n por varias razones:</p> <p>a) Sintaxis clara y legible: Java tiene una sintaxis relativamente sencilla y clara, lo que facilita la lectura y escritura de c\u00f3digo, especialmente para principiantes.</p> <p>b) Amplia adopci\u00f3n: Java es uno de los lenguajes de programaci\u00f3n m\u00e1s populares en el mundo, lo que significa que hay una gran cantidad de recursos de aprendizaje disponibles.</p> <p>c) Versatilidad: Puedes usar Java para una amplia variedad de aplicaciones, desde programas de consola simples hasta aplicaciones web complejas.</p> <p>d) Fundamentos s\u00f3lidos: Aprender Java proporciona una base s\u00f3lida en conceptos de programaci\u00f3n que son transferibles a otros lenguajes.</p> <p>e) Gesti\u00f3n de memoria: Java maneja autom\u00e1ticamente la asignaci\u00f3n y liberaci\u00f3n de memoria, lo que permite a los principiantes concentrarse en la l\u00f3gica de programaci\u00f3n sin preocuparse por la gesti\u00f3n manual de memoria.</p>"},{"location":"content/p2/#configuracion-del-entorno-de-desarrollo-java","title":"Configuraci\u00f3n del entorno de desarrollo Java","text":""},{"location":"content/p2/#instalacion-del-java-development-kit-jdk","title":"Instalaci\u00f3n del Java Development Kit (JDK)","text":"<p>El JDK es esencial para desarrollar aplicaciones Java. Incluye el compilador Java, la m\u00e1quina virtual Java (JVM) y otras herramientas \u00fatiles.</p> <p>Pasos para instalar el JDK:</p> <p>a) Descarga:</p> <ul> <li>Visita la p\u00e1gina oficial de Oracle Java (https://www.oracle.com/co/java/technologies/downloads/)</li> <li>Selecciona la versi\u00f3n adecuada para tu sistema operativo (Windows, macOS, Linux)</li> </ul> <p>b) Instalaci\u00f3n:</p> <ul> <li>Windows: Ejecuta el instalador descargado y sigue las instrucciones</li> <li>macOS: Abre el archivo .dmg y sigue las instrucciones</li> <li>Linux: Usa el gestor de paquetes de tu distribuci\u00f3n o descomprime el archivo tar.gz</li> </ul> <p>c) Configuraci\u00f3n de variables de entorno:</p> <ul> <li>Windows:<ul> <li>Busca \"Editar las variables de entorno del sistema\"</li> <li>A\u00f1ade JAVA_HOME apuntando al directorio de instalaci\u00f3n del JDK</li> <li>A\u00f1ade %JAVA_HOME%\\bin al PATH</li> </ul> </li> <li>macOS/Linux:<ul> <li>Edita ~/.bash_profile o ~/.zshrc</li> <li>A\u00f1ade: export JAVA_HOME=/ruta/al/jdk</li> <li>A\u00f1ade: export PATH=$JAVA_HOME/bin:$PATH</li> </ul> </li> </ul> <p>d) Verificaci\u00f3n:</p> <ul> <li>Abre una terminal o s\u00edmbolo del sistema</li> <li>Ejecuta: java -version</li> <li>Deber\u00edas ver la informaci\u00f3n de la versi\u00f3n de Java instalada</li> </ul> Eclipse <p>A powerful IDE for Java development.</p> IntelliJ IDEA <p>The Capable &amp; Ergonomic Java IDE.</p> NetBeans <p>An IDE for Java, PHP, C, and C++ developers.</p> Visual Studio Code <p>A lightweight but powerful source code editor.</p>"},{"location":"content/p2/#visual-studio-code-vs-code-y-java","title":"Visual Studio Code (VS Code) y Java","text":"<p>Visual Studio Code (VS Code) es un editor de c\u00f3digo muy popular y vers\u00e1til que funciona genial con Java. Aqu\u00ed te presento una gu\u00eda para configurarlo y comenzar a programar en Java:</p>"},{"location":"content/p2/#instalar-vs-code","title":"Instalar VS Code:","text":"<ul> <li>Descarga VS Code desde su sitio web oficial:\u00a0https://code.visualstudio.com/</li> <li>Sigue las instrucciones del instalador para tu sistema operativo (Windows, macOS, Linux).</li> </ul>"},{"location":"content/p2/#instalar-java-development-kit-jdk","title":"Instalar Java Development Kit (JDK):","text":"<ul> <li>El JDK es esencial para compilar y ejecutar c\u00f3digo Java. Puedes descargarlo desde Oracle:\u00a0https://www.oracle.com/co/java/technologies/downloads/</li> <li>Aseg\u00farate de elegir la versi\u00f3n correcta para tu sistema operativo.</li> <li>Durante la instalaci\u00f3n, aseg\u00farate de agregar Java al PATH de tu sistema para que VS Code pueda encontrarlo.</li> </ul>"},{"location":"content/p2/#instalar-la-extension-de-java-para-vs-code","title":"Instalar la Extensi\u00f3n de Java para VS Code:","text":"<ul> <li>Abre VS Code.</li> <li>En la barra lateral izquierda, haz clic en el icono de extensiones (o presiona\u00a0Ctrl + Shift + X).</li> <li>Busca \"Extension Pack for Java\" y haz clic en \"Instalar\".</li> </ul>"},{"location":"content/p2/#configurar-un-proyecto-java","title":"Configurar un Proyecto Java:","text":""},{"location":"content/p2/#escribir-tu-primer-codigo-java","title":"Escribir tu Primer C\u00f3digo Java:","text":"<pre><code>public class HolaMundo {\n    public static void main(String[] args) {\n        System.out.println(\"\u00a1Hola, mundo!\");\n    }\n}\n</code></pre>"},{"location":"content/p2/#compilar-y-ejecutar-tu-codigo","title":"Compilar y Ejecutar tu C\u00f3digo:","text":"<ul> <li>Compilar:\u00a0Puedes compilar tu c\u00f3digo Java de varias maneras:<ul> <li>Desde la terminal integrada:\u00a0Abre la terminal integrada de VS Code (Ctrl +\u00a0) y ejecutajavac HolaMundo.java`.</li> <li>Usando la extensi\u00f3n de Java:\u00a0VS Code deber\u00eda detectar autom\u00e1ticamente el archivo Java y ofrecerte la opci\u00f3n de compilarlo.</li> </ul> </li> <li>Ejecutar:<ul> <li>Desde la terminal integrada:\u00a0Ejecuta\u00a0java HolaMundo.</li> <li>Usando la extensi\u00f3n de Java:\u00a0VS Code deber\u00eda detectar la clase compilada (HolaMundo.class) y ofrecerte la opci\u00f3n de ejecutarla.</li> </ul> </li> </ul>"},{"location":"content/p2/#caracteristicas-adicionales-de-vs-code-para-java","title":"Caracter\u00edsticas Adicionales de VS Code para Java:","text":"<ul> <li>Completado de c\u00f3digo (IntelliSense):\u00a0La extensi\u00f3n de Java proporciona sugerencias de c\u00f3digo, autocompletado y verificaci\u00f3n de errores en tiempo real.</li> <li>Depuraci\u00f3n:\u00a0VS Code te permite depurar tu c\u00f3digo Java paso a paso para encontrar errores.</li> <li>Refactorizaci\u00f3n:\u00a0Puedes renombrar variables, m\u00e9todos y clases, y VS Code har\u00e1 los cambios necesarios en todo tu c\u00f3digo.</li> <li>Integraci\u00f3n con Git:\u00a0VS Code est\u00e1 integrado con Git, lo que facilita el control de versiones de tu c\u00f3digo.</li> </ul>"},{"location":"content/p2/#estructura-de-un-programa-en-java","title":"Estructura de un programa en Java","text":"<p>Ejemplo de la estructura de un programa en Java con comentarios documentados para cada secci\u00f3n:</p> <pre><code>package com.example.miproyecto;  // Declaraci\u00f3n del paquete\n\nimport java.util.Scanner;  // Importaci\u00f3n de paquetes\n\n/**\n * Este es un ejemplo de programa en Java.\n * Imprime un mensaje de saludo con el nombre y la edad de una persona.\n */\npublic class MiPrograma {  // Declaraci\u00f3n de la clase\n\n    /**\n     * El m\u00e9todo principal, punto de entrada para la ejecuci\u00f3n del programa.\n     * @param args Los argumentos de l\u00ednea de comandos (no se utilizan en este ejemplo).\n     */\n    public static void main(String[] args) {\n        // Declaraci\u00f3n de variables\n        int edad = 25;\n        String nombre = \"Juan\";\n\n        // C\u00f3digo del programa\n        System.out.println(\"Hola, \" + nombre + \". Tienes \" + edad + \" a\u00f1os.\");\n    }\n}\n</code></pre> <p>En este ejemplo, se sigue la estructura b\u00e1sica de un programa en Java con comentarios documentados que explican cada secci\u00f3n:</p> <ul> <li> <p>package com.example.miproyecto;: Se declara el paquete al que pertenece el programa. En este caso, el paquete es \"com.example.miproyecto\".</p> </li> <li> <p>import java.util.Scanner;: Se importa el paquete java.util y la clase Scanner para poder utilizarla en el programa. El Scanner se utiliza para leer la entrada del usuario.</p> </li> <li> <p>public class MiPrograma : Se declara la clase principal del programa llamada MiPrograma. La palabra clave public indica que la clase es accesible desde cualquier otro lugar.</p> </li> <li> <p>public static void main(String[] args) : Se define el m\u00e9todo principal main, que es el punto de entrada del programa. Recibe un array de cadenas args como argumento, que puede ser utilizado para pasar argumentos desde la l\u00ednea de comandos.</p> </li> <li> <p>int edad = 25;: Se declara una variable edad de tipo entero y se le asigna el valor 25.</p> </li> <li> <p>String nombre = \"Juan\";: Se declara una variable nombre de tipo cadena y se le asigna el valor \"Juan\".</p> </li> <li> <p>System.out.println(\"Hola, \" + nombre + \". Tienes \" + edad + \" a\u00f1os.\");: Se utiliza System.out.println() para imprimir un mensaje de saludo en la consola. La cadena se forma concatenando las variables nombre y edad utilizando el operador de suma (+).</p> </li> </ul>"},{"location":"content/p2/#declaracion-variables","title":"Declaraci\u00f3n variables.","text":"<p>En Java, la declaraci\u00f3n y asignaci\u00f3n de variables es una de las tareas m\u00e1s b\u00e1sicas y esenciales para escribir cualquier programa. En esencia, una variable es un espacio en la memoria del ordenador reservado para almacenar un valor espec\u00edfico. La declaraci\u00f3n de una variable es simplemente la creaci\u00f3n de un espacio en la memoria para almacenar el valor que se asignar\u00e1 a la variable m\u00e1s adelante.</p> <p>La sintaxis para declarar una variable en Java es la siguiente:</p> <pre><code>tipoDato nombreVariable;\n</code></pre> <p>Donde tipoDato es el tipo de dato que se almacenar\u00e1 en la variable y nombreVariable es el nombre que se le dar\u00e1 a la variable.</p> <p>Por ejemplo, si quisi\u00e9ramos declarar una variable de tipo entero llamada \"edad\", la sintaxis ser\u00eda la siguiente:</p> <pre><code>int edad;\n</code></pre> <p>Una vez que se ha declarado una variable, se puede asignar un valor a la variable utilizando el operador de asignaci\u00f3n \"=\".</p> <p>Por ejemplo, para asignar un valor de 25 a la variable \"edad\", se utiliza la siguiente sintaxis:</p> <pre><code>edad = 25;\n</code></pre> <p>Tambi\u00e9n es posible declarar y asignar valores a una variable en la misma l\u00ednea de c\u00f3digo. Por ejemplo, para declarar y asignar un valor de 3.14 a una variable de tipo \"double\" llamada \"pi\", se utilizar\u00eda la siguiente sintaxis:</p> <pre><code>double pi = 3.14;\n</code></pre> <p>Es importante tener en cuenta que los nombres de las variables deben seguir las reglas de identificaci\u00f3n de Java y ser descriptivos del valor que se va a almacenar en ellas. Adem\u00e1s, una vez que se ha declarado una variable, se puede utilizar en cualquier lugar del programa siempre y cuando se haya asignado un valor a ella. Si se intenta utilizar una variable que no ha sido declarada previamente, se generar\u00e1 un error de compilaci\u00f3n.</p>"},{"location":"content/p2/#identificadores","title":"Identificadores","text":"<p>En Java, hay convenciones y buenas pr\u00e1cticas para crear identificadores de variables, constantes, m\u00e9todos y clases con el fin de hacer que el c\u00f3digo sea m\u00e1s f\u00e1cil de leer y entender. Algunas de estas convenciones y buenas pr\u00e1cticas son las siguientes:</p> <ul> <li> <p>Los nombres de variables deben comenzar con una letra min\u00fascula. Si el nombre est\u00e1 compuesto por varias palabras, la primera letra de cada palabra debe ser may\u00fascula, excepto la primera palabra. Por ejemplo, \"nombreDeVariable\".</p> </li> <li> <p>Los nombres de las constantes deben estar completamente en may\u00fasculas. Si el nombre est\u00e1 compuesto por varias palabras, se deben separar con guiones bajos. Por ejemplo, \"CONSTANTE_DE_EJEMPLO\".</p> </li> <li> <p>Los nombres de las clases deben comenzar con una letra may\u00fascula, y si el nombre est\u00e1 compuesto por varias palabras, la primera letra de cada palabra debe ser may\u00fascula. Por ejemplo, \"ClaseDeEjemplo\".</p> </li> <li> <p>Los nombres de los m\u00e9todos deben comenzar con una letra min\u00fascula, y si el nombre est\u00e1 compuesto por varias palabras, la primera letra de cada palabra debe ser may\u00fascula. Por ejemplo, \"metodoDeEjemplo()\".</p> </li> <li> <p>Los nombres de las variables deben ser descriptivos y deben indicar el prop\u00f3sito de la variable. Por ejemplo, \"nombre\", \"edad\", \"numeroDeEjemplo\".</p> </li> <li> <p>Los nombres de los m\u00e9todos deben indicar claramente lo que hace el m\u00e9todo. Por ejemplo, \"calcularPromedio()\", \"imprimirMensaje()\", \"obtenerResultado()\".</p> </li> <li> <p>Los nombres de las clases deben ser sustantivos y deben reflejar el prop\u00f3sito de la clase. Por ejemplo, \"Persona\", \"Libro\", \"Automovil\".</p> </li> <li> <p>Es recomendable evitar el uso de abreviaturas en los nombres de variables, constantes, m\u00e9todos y clases, a menos que sean ampliamente conocidas y entendidas por otros programadores.</p> </li> <li> <p>Es recomendable seguir un estilo consistente en todo el c\u00f3digo, para que sea m\u00e1s f\u00e1cil de leer y entender.</p> </li> </ul>"},{"location":"content/p2/#estilos-de-convencion-de-codificacion","title":"Estilos de convenci\u00f3n de codificaci\u00f3n.","text":""},{"location":"content/p2/#camelcase-lowercamelcase-o-mixedcase","title":"CamelCase (lowerCamelCase o mixedCase)","text":"<ul> <li>En CamelCase, la primera letra de la primera palabra se escribe en min\u00fascula y las primeras letras de las palabras subsiguientes se escriben en may\u00fascula.</li> <li>No se utilizan espacios ni guiones.</li> </ul> <p>Ejemplo: miVariable, calcularSuma, nombreCompleto.</p>"},{"location":"content/p2/#pascalcase-uppercamelcase-o-studlycase","title":"PascalCase (UpperCamelCase o StudlyCase)","text":"<ul> <li>En PascalCase, la primera letra de cada palabra se escribe en may\u00fascula, incluida la primera palabra.</li> <li>No se utilizan espacios ni guiones.</li> </ul> <p>Ejemplo: MiClase, CalcularPromedio, MetodoPrincipal.</p>"},{"location":"content/p2/#snake_case","title":"Snake_case","text":"<ul> <li>En Snake_case, las palabras se escriben en min\u00fascula y se separan mediante guiones bajos.</li> </ul> <p>Ejemplo: mi_variable, calcular_suma, nombre_completo.</p> <p>Este estilo es com\u00fanmente utilizado en lenguajes como Python.</p>"},{"location":"content/p2/#4-kebab-case","title":"4. Kebab-case","text":"<ul> <li>En Kebab-case, las palabras se escriben en min\u00fascula y se separan mediante guiones medios.</li> </ul> <p>Ejemplo: mi-variable, calcular-suma, nombre-completo.</p> <p>Este estilo es menos com\u00fan en la convenci\u00f3n de codificaci\u00f3n, pero se utiliza en algunos lenguajes y sistemas.</p>"},{"location":"content/p2/#tipos-de-datos-primitivos","title":"Tipos de Datos Primitivos:","text":"<p>Estos son tipos de datos b\u00e1sicos directamente soportados por el lenguaje.</p> Tipo de Dato Descripci\u00f3n Tama\u00f1o (bits) Rango <code>byte</code> Entero con signo 8 -128 a 127 <code>short</code> Entero con signo 16 -32,768 a 32,767 <code>int</code> Entero con signo 32 -2,147,483,648 a 2,147,483,647 <code>long</code> Entero con signo 64 -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807 <code>float</code> N\u00famero de punto flotante de precisi\u00f3n simple 32 \u00b13.4028235E+38 <code>double</code> N\u00famero de punto flotante de precisi\u00f3n doble 64 \u00b11.7976931348623157E+308 <code>boolean</code> Valor booleano (true o false) 1 true o false <code>char</code> Caracter Unicode 16 \\u0000 a \\uffff"},{"location":"content/p2/#tipos-de-datos-no-primitivos","title":"Tipos de datos no primitivos.","text":"<p>Adem\u00e1s de los tipos de datos primitivos en Java, existen tambi\u00e9n tipos de datos no primitivos que se utilizan para almacenar informaci\u00f3n m\u00e1s compleja. Algunos ejemplos de tipos de datos no primitivos son:</p>"},{"location":"content/p2/#string","title":"String","text":"<p>Este tipo de dato se utiliza para almacenar cadenas de texto. Es un tipo de datos que no es primitivo, pero se utiliza con mucha frecuencia en la programaci\u00f3n. Se declara utilizando la palabra clave \"String\" seguida del nombre de la variable y su valor entre comillas dobles. Por ejemplo:</p> <pre><code>String nombre = \"Juan\";\n</code></pre>"},{"location":"content/p2/#arrays","title":"Arrays","text":"<p>Este tipo de dato se utiliza para almacenar una colecci\u00f3n de valores del mismo tipo de dato. Se puede declarar un array utilizando la sintaxis siguiente:</p> <pre><code>tipoDato[] nombreArray = new tipoDato[tama\u00f1o];\n</code></pre> <p>Donde tipoDato es el tipo de datos que se almacenar\u00e1 en el array, nombreArray es el nombre que se le dar\u00e1 al array y tama\u00f1o es el n\u00famero de elementos que se almacenar\u00e1n en el array. Por ejemplo, para declarar un array de tipo int llamado \"edades\" que contiene tres elementos, se utilizar\u00eda la siguiente sintaxis:</p> <pre><code>int[] edades = new int[3];\n</code></pre>"},{"location":"content/p2/#objetos","title":"Objetos","text":"<p>(POO) Los objetos son instancias de una clase y se utilizan para almacenar informaci\u00f3n m\u00e1s compleja. Una clase es un tipo de dato personalizado que define las propiedades y m\u00e9todos de un objeto. Para declarar un objeto, primero se debe crear una instancia de la clase utilizando la palabra clave \"new\", seguida del nombre de la clase y sus argumentos (si los tiene). Por ejemplo, si se tiene una clase llamada \"Persona\" que tiene propiedades como nombre, edad y altura, se puede crear una instancia de esa clase de la siguiente manera:</p> <pre><code>Persona persona1 = new Persona(\"Juan\", 25, 1.75);\n</code></pre> <p>Es importante tener en cuenta que los tipos de datos no primitivos son m\u00e1s complejos que los tipos de datos primitivos, y su uso puede requerir conocimientos avanzados de programaci\u00f3n.</p>"},{"location":"content/p2/#imprimir-y-capturar-datos-por-consola","title":"Imprimir y capturar datos por consola","text":""},{"location":"content/p2/#imprimir-datos-por-consola","title":"Imprimir datos por consola","text":"<p>Para imprimir datos por consola en Java, se utiliza la clase System y su m\u00e9todo out.println(). Aqu\u00ed tienes una explicaci\u00f3n de c\u00f3mo funciona:</p> <ul> <li> <p>La clase System: Es una clase integrada en Java que proporciona acceso a varios recursos y funcionalidades del sistema. Para imprimir datos por consola, utilizamos el atributo out de la clase System, que es una instancia de la clase PrintStream.</p> </li> <li> <p>El m\u00e9todo println(): Es un m\u00e9todo de la clase PrintStream que se utiliza para imprimir una l\u00ednea de texto en la consola. Toma como argumento el valor que deseas imprimir y lo muestra en la salida est\u00e1ndar.</p> </li> </ul> <p>A continuaci\u00f3n, se muestra un ejemplo b\u00e1sico de c\u00f3mo imprimir datos por consola en Java:</p> <pre><code>public class ImprimirDatos {\n    public static void main(String[] args) {\n        int edad = 25;\n        String nombre = \"Juan\";\n\n        System.out.println(\"Mi nombre es \" + nombre);\n        System.out.println(\"Tengo \" + edad + \" a\u00f1os\");\n    }\n}\n</code></pre> <p>En este ejemplo, se utilizan dos llamadas al m\u00e9todo println() para imprimir informaci\u00f3n en la consola. La primera l\u00ednea imprime el texto \"Mi nombre es \" seguido del valor de la variable nombre. La segunda l\u00ednea imprime el texto \"Tengo \", seguido del valor de la variable edad, seguido del texto \" a\u00f1os\".</p>"},{"location":"content/p2/#capturar-datos-por-consola","title":"Capturar datos por consola","text":"<p>Para capturar datos por consola en Java, se utiliza la clase Scanner. Aqu\u00ed tienes una explicaci\u00f3n de c\u00f3mo funciona:</p> <ul> <li> <p>La clase Scanner: Es una clase integrada en Java que se utiliza para leer la entrada del usuario desde la consola. Proporciona m\u00e9todos para leer diferentes tipos de datos, como enteros, n\u00fameros de punto flotante, cadenas, etc.</p> </li> <li> <p>Crear un objeto Scanner: Para capturar datos por consola, primero debes crear un objeto Scanner y asociarlo con la entrada est\u00e1ndar (System.in). Esto se hace de la siguiente manera:</p> </li> </ul> <pre><code>import java.util.Scanner;\n\npublic class CapturarDatos {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Ingrese su nombre: \");\n        String nombre = scanner.nextLine();\n\n        System.out.print(\"Ingrese su edad: \");\n        int edad = scanner.nextInt();\n\n        System.out.println(\"Hola, \" + nombre + \". Tienes \" + edad + \" a\u00f1os.\");\n\n        scanner.close();\n    }\n}\n</code></pre>"},{"location":"content/p2/#concatenar-cadenas-de-texto","title":"Concatenar cadenas de texto","text":"<p>En Java, puedes concatenar cadenas de texto utilizando el operador de suma (+) o el m\u00e9todo concat(). Aqu\u00ed tienes ejemplos de ambos enfoques:</p> <ul> <li>Operador de suma (+):</li> </ul> <pre><code>String cadena1 = \"Hola\";\nString cadena2 = \"mundo\";\n\nString resultado = cadena1 + \" \" + cadena2;\nSystem.out.println(resultado);\n</code></pre> <p>En este ejemplo, se utilizan el operador de suma (+) y espacios en blanco para concatenar las cadenas cadena1 y cadena2. El resultado se asigna a la variable resultado y se imprime en la consola. La salida ser\u00e1: \"Hola mundo\".</p> <ul> <li>M\u00e9todo concat():</li> </ul> <pre><code>String cadena1 = \"Hola\";\nString cadena2 = \"mundo\";\n\nString resultado = cadena1.concat(\" \").concat(cadena2);\nSystem.out.println(resultado);\n</code></pre> <p>En este ejemplo, se utiliza el m\u00e9todo concat() para concatenar las cadenas cadena1 y cadena2. El m\u00e9todo concat() combina la cadena actual con la cadena especificada como argumento y devuelve una nueva cadena resultante. El resultado se asigna a la variable resultado y se imprime en la consola. La salida ser\u00e1: \"Hola mundo\".</p> <p>Ambos enfoques producen el mismo resultado de concatenaci\u00f3n. Puedes elegir el que te resulte m\u00e1s conveniente en tu c\u00f3digo.</p>"},{"location":"content/p2/#declaracion-de-constantes","title":"Declaraci\u00f3n de constantes","text":"<p>En Java se utilizan las constantes para declarar valores fijos que no cambian durante la ejecuci\u00f3n de un programa.</p> <p>Algunas caracter\u00edsticas de las constantes en Java:</p> <ul> <li>Se declaran con la palabra reservada final. Esto hace que su valor no pueda ser modificado despu\u00e9s.</li> <li>Por convenci\u00f3n los nombres de las constantes se escriben en MAY\u00daSCULAS y separando palabras con guion bajo \"_\" . Por ejemplo:</li> </ul> <pre><code>final double PI = 3.1416;\n\nfinal int DIAS_SEMANA = 7;\n</code></pre> <ul> <li>El tipo de dato de la constante debe ser el adecuado para el valor que almacena. Por ejemplo, 3.1416 es double y 7 es int.</li> <li>Las constantes pueden ser locales a un m\u00e9todo o declaradas a nivel de clase (est\u00e1ticas) para ser accesibles por todos los m\u00e9todos.</li> <li>Se puede utilizar cualquier tipo de dato para una constante: num\u00e9ricos, cadena de texto, booleanos, etc.</li> <li>Las constantes hacen el c\u00f3digo m\u00e1s legible y mantenible al evitar valores literales.</li> </ul>"},{"location":"content/p3/","title":"Semana 3 - Operadores y instrucciones de control condicional","text":""},{"location":"content/p3/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Los operadores aritm\u00e9ticos en Java se utilizan para realizar operaciones matem\u00e1ticas b\u00e1sicas. Los operadores aritm\u00e9ticos incluyen:</p>"},{"location":"content/p3/#suma-se-utiliza-para-sumar-dos-valores","title":"Suma (+): se utiliza para sumar dos valores.","text":"<pre><code>int a = 5;\nint b = 10;\nint c = a + b; // c es igual a 15\n</code></pre>"},{"location":"content/p3/#resta-se-utiliza-para-restar-un-valor-de-otro","title":"Resta (-): se utiliza para restar un valor de otro.","text":"<pre><code>int a = 10;\nint b = 5;\nint c = a - b; // c es igual a 5\n</code></pre>"},{"location":"content/p3/#multiplicacion-se-utiliza-para-multiplicar-dos-valores","title":"Multiplicaci\u00f3n (*): se utiliza para multiplicar dos valores.","text":"<pre><code>int a = 5;\nint b = 10;\nint c = a * b; // c es igual a 50\n</code></pre>"},{"location":"content/p3/#division-se-utiliza-para-dividir-un-valor-entre-otro","title":"Divisi\u00f3n (/): se utiliza para dividir un valor entre otro.","text":"<pre><code>int a = 10;\nint b = 5;\nint c = a / b; // c es igual a 2\n</code></pre>"},{"location":"content/p3/#modulo-se-utiliza-para-obtener-el-resto-de-una-division-entre-dos-valores","title":"M\u00f3dulo (%): se utiliza para obtener el resto de una divisi\u00f3n entre dos valores.","text":"<pre><code>int a = 10;\nint b = 3;\nint c = a % b; // c es igual a 1\n</code></pre>"},{"location":"content/p3/#ejemplos","title":"Ejemplos","text":"<pre><code>public class OperadoresAritmeticos {\n\n    public static void main(String[] args) {\n        int x = 10;\n        int y = 5;\n\n        // Suma\n        int resultadoSuma = x + y;\n        System.out.println(\"El resultado de la suma es: \" + resultadoSuma);\n\n        // Resta\n        int resultadoResta = x - y;\n        System.out.println(\"El resultado de la resta es: \" + resultadoResta);\n\n        // Multiplicaci\u00f3n\n        int resultadoMultiplicacion = x * y;\n        System.out.println(\"El resultado de la multiplicaci\u00f3n es: \" + resultadoMultiplicacion);\n\n        // Divisi\u00f3n\n        int resultadoDivisionEntera = x / y;\n        System.out.println(\"El resultado de la divisi\u00f3n entera es: \" + resultadoDivisionEntera);\n\n        double resultadoDivisionDecimal = (double) x / y;\n        System.out.println(\"El resultado de la divisi\u00f3n decimal es: \" + resultadoDivisionDecimal);\n\n        // M\u00f3dulo\n        int resultadoModulo = x % y;\n        System.out.println(\"El resultado del m\u00f3dulo es: \" + resultadoModulo);\n\n        // Incremento\n        x++;\n        System.out.println(\"El valor de x despu\u00e9s del incremento es: \" + x);\n\n        // Decremento\n        y--;\n        System.out.println(\"El valor de y despu\u00e9s del decremento es: \" + y);\n    }\n}\n</code></pre>"},{"location":"content/p3/#operadores-de-asignacion","title":"Operadores de Asignaci\u00f3n","text":"<p>En Java, los operadores de asignaci\u00f3n son s\u00edmbolos que se utilizan para asignar valores a las variables. Adem\u00e1s de la asignaci\u00f3n b\u00e1sica (=), Java ofrece otros operadores de asignaci\u00f3n que combinan la asignaci\u00f3n con una operaci\u00f3n matem\u00e1tica. Estos operadores de asignaci\u00f3n son \u00fatiles para simplificar y acortar el c\u00f3digo en situaciones donde se realiza una operaci\u00f3n aritm\u00e9tica y luego se asigna el resultado a una variable.</p> <p>A continuaci\u00f3n se describen los operadores de asignaci\u00f3n disponibles en Java:</p>"},{"location":"content/p3/#operador-de-asignacion-basico","title":"Operador de asignaci\u00f3n b\u00e1sico (=)","text":"<p>Se utiliza para asignar un valor a una variable. Por ejemplo:</p> <pre><code>int x = 5;\n</code></pre>"},{"location":"content/p3/#operador-de-asignacion-compuesta-de-suma","title":"Operador de asignaci\u00f3n compuesta de suma (+=)","text":"<p>Se utiliza para sumar un valor a una variable y luego asignar el resultado a la misma variable. Por ejemplo:</p> <pre><code>x += 3; es equivalente a x = x + 3;\n</code></pre>"},{"location":"content/p3/#operador-de-asignacion-compuesta-de-resta-","title":"Operador de asignaci\u00f3n compuesta de resta (-=)","text":"<p>Se utiliza para restar un valor de una variable y luego asignar el resultado a la misma variable. Por ejemplo:</p> <pre><code>x -= 2; es equivalente a x = x - 2;\n</code></pre>"},{"location":"content/p3/#operador-de-asignacion-compuesta-de-multiplicacion","title":"Operador de asignaci\u00f3n compuesta de multiplicaci\u00f3n (*=)","text":"<p>Se utiliza para multiplicar una variable por un valor y luego asignar el resultado a la misma variable. Por ejemplo:</p> <pre><code>x *= 4; es equivalente a x = x * 4;\n</code></pre>"},{"location":"content/p3/#operador-de-asignacion-compuesta-de-division","title":"Operador de asignaci\u00f3n compuesta de divisi\u00f3n (/=)","text":"<p>Se utiliza para dividir una variable por un valor y luego asignar el resultado a la misma variable. Por ejemplo:</p> <pre><code>x /= 2; es equivalente a x = x / 2;\n</code></pre>"},{"location":"content/p3/#operador-de-asignacion-compuesta-de-modulo","title":"Operador de asignaci\u00f3n compuesta de m\u00f3dulo (%=)","text":"<p>Se utiliza para calcular el m\u00f3dulo de una variable por un valor y luego asignar el resultado a la misma variable. Por ejemplo:</p> <pre><code>x %= 3; es equivalente a x = x % 3;\n</code></pre>"},{"location":"content/p3/#operador-de-asignacion-compuesta-de-desplazamiento-a-la-izquierda","title":"Operador de asignaci\u00f3n compuesta de desplazamiento a la izquierda (<code>&lt;&lt;=</code>)","text":"<p>Se utiliza para desplazar los bits de una variable a la izquierda por un n\u00famero de posiciones y luego asignar el resultado a la misma variable. Por ejemplo:</p> <pre><code>x &lt;&lt;= 2; es equivalente a x = x &lt;&lt; 2;\n</code></pre>"},{"location":"content/p3/#operador-de-asignacion-compuesta-de-desplazamiento-a-la-derecha","title":"Operador de asignaci\u00f3n compuesta de desplazamiento a la derecha (&gt;&gt;=)","text":"<p>Se utiliza para desplazar los bits de una variable a la derecha por un n\u00famero de posiciones y luego asignar el resultado a la misma variable. Por ejemplo:</p> <pre><code>x &gt;&gt;= 1; es equivalente a x = x &gt;&gt; 1;\n</code></pre>"},{"location":"content/p3/#operador-de-asignacion-compuesta-de-desplazamiento-a-la-derecha-sin-signo","title":"Operador de asignaci\u00f3n compuesta de desplazamiento a la derecha sin signo (&gt;&gt;&gt;=)","text":"<p>Se utiliza para desplazar los bits de una variable a la derecha sin signo por un n\u00famero de posiciones y luego asignar el resultado a la misma variable. Por ejemplo:</p> <pre><code>x &gt;&gt;&gt;= 3; es equivalente a x = x &gt;&gt;&gt; 3;\n</code></pre> <p>Es importante recordar que los operadores de asignaci\u00f3n compuesta realizan la operaci\u00f3n indicada y luego asignan el resultado a la misma variable. Por lo tanto, la variable se modifica en el lugar en el que se encuentra sin necesidad de declarar una nueva variable.</p>"},{"location":"content/p3/#ejemplos_1","title":"Ejemplos","text":"<pre><code>public class OperadoresAsignacion {\n\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 5;\n\n        // Operador de asignaci\u00f3n simple\n        int c = a + b;\n        System.out.println(\"c = \" + c);\n\n        // Operadores de asignaci\u00f3n compuestos\n        a += b; // equivalente a a = a + b;\n        System.out.println(\"a = \" + a);\n\n        b -= 3; // equivalente a b = b - 3;\n        System.out.println(\"b = \" + b);\n\n        c *= 2; // equivalente a c = c * 2;\n        System.out.println(\"c = \" + c);\n\n        double d = 6.0;\n        d /= 2; // equivalente a d = d / 2;\n        System.out.println(\"d = \" + d);\n\n        int e = 7;\n        e %= 3; // equivalente a e = e % 3;\n        System.out.println(\"e = \" + e);\n\n        // Operador de concatenaci\u00f3n de cadenas\n        String s1 = \"Hola\";\n        String s2 = \"Mundo\";\n        String s3 = s1 + \" \" + s2;\n        System.out.println(s3); // Hola Mundo\n\n        // Operador de asignaci\u00f3n ternario\n        int edad = 18;\n        String mensaje = (edad &gt;= 18) ? \"Eres mayor de edad\" : \"Eres menor de edad\";\n        System.out.println(mensaje);\n    }\n}\n</code></pre>"},{"location":"content/p3/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<p>En Java, los operadores de comparaci\u00f3n se utilizan para comparar dos valores y evaluar si una determinada condici\u00f3n es verdadera o falsa. A continuaci\u00f3n, se muestran los operadores de comparaci\u00f3n m\u00e1s comunes en Java, junto con sus nombres y descripciones:</p>"},{"location":"content/p3/#operador-de-igualdad","title":"Operador de igualdad (==)","text":"<p>Nombre: Igual a Descripci\u00f3n: Comprueba si dos valores son iguales.</p> <pre><code>int a = 5;\nint b = 7;\nboolean resultado = (a == b); // false\n</code></pre>"},{"location":"content/p3/#operador-de-desigualdad","title":"Operador de desigualdad (!=)","text":"<p>Nombre: No igual a Descripci\u00f3n: Comprueba si dos valores son diferentes.</p> <pre><code>int a = 5;\nint b = 7;\nboolean resultado = (a != b); // true\n</code></pre>"},{"location":"content/p3/#operador-mayor-que","title":"Operador mayor que (&gt;)","text":"<p>Nombre: Mayor que Descripci\u00f3n: Comprueba si el valor de la izquierda es mayor que el valor de la derecha.</p> <pre><code>int a = 5;\nint b = 7;\nboolean resultado = (a &gt; b); // false\n</code></pre>"},{"location":"content/p3/#operador-menor-que","title":"Operador menor que (<code>&lt;</code>)","text":"<p>Nombre: Menor que Descripci\u00f3n: Comprueba si el valor de la izquierda es menor que el valor de la derecha.</p> <pre><code>int a = 5;\nint b = 7;\nboolean resultado = (a &lt; b); // true\n</code></pre>"},{"location":"content/p3/#operador-mayor-o-igual-que","title":"Operador mayor o igual que (&gt;=)","text":"<p>Nombre: Mayor o igual que Descripci\u00f3n: Comprueba si el valor de la izquierda es mayor o igual que el valor de la derecha.</p> <pre><code>int a = 5;\nint b = 7;\nboolean resultado = (a &gt;= b); // false\n</code></pre>"},{"location":"content/p3/#operador-menor-o-igual-que","title":"Operador menor o igual que (<code>&lt;=</code>)","text":"<p>Nombre: Menor o igual que Descripci\u00f3n: Comprueba si el valor de la izquierda es menor o igual que el valor de la derecha.</p> <pre><code>int a = 5;\nint b = 7;\nboolean resultado = (a &lt;= b); // true\n</code></pre>"},{"location":"content/p3/#ejemplos_2","title":"Ejemplos","text":"<pre><code>public class OperadoresComparaci\u00f3n {\n\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 10;\n        boolean esIgual = (x == y); // Devuelve false, porque x no es igual a y.\n        boolean esDiferente = (x != y); // Devuelve true, porque x es diferente a y.\n        boolean esMenor = (x &lt; y); // Devuelve true, porque x es menor que y.\n        boolean esMayor = (x &gt; y); // Devuelve false, porque x no es mayor que y.\n        boolean esMenorIgual = (x &lt;= y); // Devuelve true, porque x es menor o igual que y.\n        boolean esMayorIgual = (x &gt;= y); // Devuelve false, porque x no es mayor o igual que y.\n    }\n}\n</code></pre>"},{"location":"content/p3/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Los operadores l\u00f3gicos en Java permiten realizar operaciones booleanas entre dos o m\u00e1s expresiones. Estos operadores son muy \u00fatiles en la toma de decisiones y en la evaluaci\u00f3n de condiciones en una variedad de situaciones. Los tres operadores l\u00f3gicos en Java son AND (&amp;&amp;), OR (||) y NOT (!).</p> <p>Aqu\u00ed te explico c\u00f3mo funcionan estos operadores:</p>"},{"location":"content/p3/#and","title":"AND (&amp;&amp;)","text":"<p>Este operador retorna true si ambas expresiones a su izquierda y derecha son verdaderas. Si al menos una de las expresiones es falsa, retorna false. Por ejemplo:</p> <pre><code>boolean a = true;\nboolean b = false;\nboolean resultado = a &amp;&amp; b; // false\n</code></pre>"},{"location":"content/p3/#or","title":"OR (||)","text":"<p>Este operador retorna true si al menos una de las expresiones a su izquierda o derecha es verdadera. Si ambas expresiones son falsas, retorna false. Por ejemplo:</p> <pre><code>boolean a = true;\nboolean b = false;\nboolean resultado = a || b; // true\n</code></pre>"},{"location":"content/p3/#not","title":"NOT (!)","text":"<p>Este operador invierte el valor booleano de la expresi\u00f3n a su derecha. Si la expresi\u00f3n es verdadera, retorna false, y si es falsa, retorna true. Por ejemplo:</p> <pre><code>boolean a = true;\nboolean resultado = !a; // false\n</code></pre> <p>Adem\u00e1s, tambi\u00e9n es posible combinar estos operadores para formar expresiones booleanas m\u00e1s complejas, utilizando par\u00e9ntesis para establecer el orden de evaluaci\u00f3n. Por ejemplo:</p> <pre><code>boolean a = true;\nboolean b = false;\nboolean c = true;\nboolean resultado = (a || b) &amp;&amp; !c; // false\n</code></pre> <p>En este ejemplo, primero se eval\u00faa la expresi\u00f3n (a || b), que retorna true. Luego, se aplica el operador NOT a la variable c, que es verdadera, resultando en false. Finalmente, se aplica el operador AND a los resultados anteriores, lo que resulta en false.</p>"},{"location":"content/p3/#ejemplos_3","title":"Ejemplos","text":"<pre><code>public class OperadoresLogicos {\n    public static void main(String[] args) {\n        int edad = 25;\n        boolean esEstudiante = true;\n        boolean esDiaLaboral = false;\n        boolean esVacaciones = true;\n\n        boolean resultado1 = (edad &gt; 18) &amp;&amp; esEstudiante;\n        boolean resultado2 = esDiaLaboral || esVacaciones;\n        boolean resultado3 = !esDiaLaboral;\n\n        System.out.println(\"El resultado 1 es: \" + resultado1);\n        System.out.println(\"El resultado 2 es: \" + resultado2);\n        System.out.println(\"El resultado 3 es: \" + resultado3);\n    }\n}\n</code></pre>"},{"location":"content/p3/#estructuras-condicionales","title":"Estructuras condicionales:","text":"<p>Las estructuras condicionales en Java permiten tomar decisiones y ejecutar ciertas partes de c\u00f3digo dependiendo si se cumple o no una determinada condici\u00f3n.</p> <p>Las principales estructuras condicionales son:</p>"},{"location":"content/p3/#1-if-ejecuta-un-bloque-de-codigo-si-se-cumple-la-condicion","title":"1. if: Ejecuta un bloque de c\u00f3digo si se cumple la condici\u00f3n.","text":"<p>Sintaxis: <pre><code>if (condici\u00f3n) {\n  // c\u00f3digo a ejecutar \n}\n</code></pre></p>"},{"location":"content/p3/#ejemplos-if","title":"Ejemplos if:","text":"<p>Estos ejemplos muestran diferentes formas de utilizar estructuras condicionales en Java para tomar decisiones basadas en ciertas condiciones.</p>"},{"location":"content/p3/#1-comprobando-si-una-variable-es-mayor-que-otra","title":"1. Comprobando si una variable es mayor que otra:","text":"<pre><code>int x = 10;\nint y = 5;\n\nif (x &gt; y) {\n  System.out.println(\"x es mayor que y\");\n}\n</code></pre>"},{"location":"content/p3/#2-comprobando-si-una-variable-es-diferente-de-un-valor-especifico","title":"2. Comprobando si una variable es diferente de un valor espec\u00edfico:","text":"<pre><code>int edad = 18;\n\nif (edad != 18) {\n  System.out.println(\"La edad no es 18\");\n}\n</code></pre>"},{"location":"content/p3/#3-comprobando-si-una-variable-esta-dentro-de-un-rango-de-valores","title":"3. Comprobando si una variable est\u00e1 dentro de un rango de valores:","text":"<pre><code>int nota = 10;\n\nif (nota &gt;= 9 &amp;&amp; nota &lt;= 10) {\n  System.out.println(\"La nota es excelente\");\n}\n</code></pre>"},{"location":"content/p3/#2-if-else-ejecuta-un-bloque-si-se-cumple-la-condicion-y-otro-bloque-distinto-si-no-se-cumple","title":"2. if - else: Ejecuta un bloque si se cumple la condici\u00f3n, y otro bloque distinto si no se cumple.","text":"<p>Sintaxis: <pre><code>if (condici\u00f3n) {\n  // c\u00f3digo si se cumple\n} else {\n  // c\u00f3digo si no se cumple\n}\n</code></pre></p>"},{"location":"content/p3/#ejemplos-if-else","title":"Ejemplos if else:","text":""},{"location":"content/p3/#1-comprobando-si-una-variable-es-mayor-que-otra-y-si-no-imprimiendo-un-mensaje-diferente","title":"1. Comprobando si una variable es mayor que otra y, si no, imprimiendo un mensaje diferente:","text":"<pre><code>int x = 10;\nint y = 5;\n\nif (x &gt; y) {\n  System.out.println(\"x es mayor que y\");\n} else {\n  System.out.println(\"x es menor o igual que y\");\n}\n</code></pre>"},{"location":"content/p3/#2-comprobando-si-una-variable-es-igual-a-un-valor-especifico-y-si-no-imprimiendo-un-mensaje-diferente","title":"2. Comprobando si una variable es igual a un valor espec\u00edfico y, si no, imprimiendo un mensaje diferente:","text":"<pre><code>String nombre = \"Juan\";\n\nif (nombre.equals(\"Juan\")) {\n  System.out.println(\"El nombre es Juan\");\n} else {\n  System.out.println(\"El nombre no es Juan\");\n}\n</code></pre>"},{"location":"content/p3/#3-comprobando-si-una-variable-esta-dentro-de-un-rango-de-valores-y-si-no-imprimiendo-un-mensaje-diferente","title":"3. Comprobando si una variable est\u00e1 dentro de un rango de valores y, si no, imprimiendo un mensaje diferente:","text":"<pre><code>int nota = 10;\n\nif (nota &gt;= 9 &amp;&amp; nota &lt;= 10) {\n  System.out.println(\"La nota es excelente\");\n} else {\n  System.out.println(\"La nota no es excelente\");\n}\n</code></pre>"},{"location":"content/p3/#3-if-else-if-else-permite-evaluar-multiples-condiciones-se-ejecuta-el-primer-bloque-donde-se-cumpla-la-condicion","title":"3. if - else if - else: Permite evaluar m\u00faltiples condiciones. Se ejecuta el primer bloque donde se cumpla la condici\u00f3n.","text":"<p>Sintaxis: <pre><code>if (condici\u00f3n 1) {\n  // c\u00f3digo si se cumple 1\n} else if (condici\u00f3n 2) {\n  // c\u00f3digo si se cumple 2 \n} else {\n  // c\u00f3digo si no se cumple ninguna\n}\n</code></pre></p>"},{"location":"content/p3/#ejemplos-else-if","title":"Ejemplos else if:","text":""},{"location":"content/p3/#1-comprobando-si-una-variable-es-mayor-que-otra-si-no-si-es-igual-y-si-no-imprimiendo-un-mensaje-diferente","title":"1. Comprobando si una variable es mayor que otra, si no, si es igual y, si no, imprimiendo un mensaje diferente:","text":"<pre><code>int x = 10;\nint y = 5;\n\nif (x &gt; y) {\n  System.out.println(\"x es mayor que y\");\n} else if (x == y) {\n  System.out.println(\"x es igual a y\");\n} else {\n  System.out.println(\"x es menor que y\");\n}\n</code></pre>"},{"location":"content/p3/#2-comprobando-si-una-variable-esta-dentro-de-un-rango-de-valores-si-no-si-es-mayor-o-si-es-menor-y-si-no-imprimiendo-un-mensaje-diferente","title":"2. Comprobando si una variable est\u00e1 dentro de un rango de valores, si no, si es mayor o si es menor y, si no, imprimiendo un mensaje diferente:","text":"<pre><code>int nota = 10;\n\nif (nota &gt;= 9 &amp;&amp; nota &lt;= 10) {\n  System.out.println(\"La nota es excelente\");\n} else if (nota &gt; 10) {\n  System.out.println(\"La nota es sobresaliente\");\n} else if (nota &lt; 0) {\n  System.out.println(\"La nota es inv\u00e1lida\");\n} else {\n  System.out.println(\"La nota es buena\");\n}\n</code></pre>"},{"location":"content/p3/#3-comprobando-si-una-variable-esta-vacia-o-no-si-no-si-tiene-una-longitud-especifica-y-si-no-imprimiendo-un-mensaje-diferente","title":"3. Comprobando si una variable est\u00e1 vac\u00eda o no, si no, si tiene una longitud espec\u00edfica y, si no, imprimiendo un mensaje diferente:","text":"<pre><code>String cadena = \"\";\n\nif (cadena.isEmpty()) {\n  System.out.println(\"La cadena est\u00e1 vac\u00eda\");\n} else if (cadena.length() == 0) {\n  System.out.println(\"La cadena es nula\");\n} else {\n  System.out.println(\"La cadena no est\u00e1 vac\u00eda\");\n}\n</code></pre>"},{"location":"content/p3/#4-operador-ternario","title":"4. Operador ternario","text":"<p>El operador ternario en Java es una expresi\u00f3n que se utiliza para evaluar una condici\u00f3n y devolver uno de dos valores, dependiendo del resultado de la evaluaci\u00f3n. La sintaxis del operador ternario es:</p> <p>Sintaxis: <pre><code>variable = (condicion) ? valor_si_verdadero : valor_si_falso;\n</code></pre></p>"},{"location":"content/p3/#ejemplos-operador-ternario","title":"Ejemplos operador ternario:","text":""},{"location":"content/p3/#1-evaluar-si-es-mayor-de-edad","title":"1. Evaluar si es mayor de edad","text":"<pre><code>int edad = 18;\nString mensaje = (edad &gt;= 18) ? \"Eres mayor de edad\" : \"Eres menor de edad\";\n\nSystem.out.println(mensaje); // Imprime \"Eres mayor de edad\"\n</code></pre>"},{"location":"content/p3/#2-calcular-el-descuento-de-un-producto","title":"2. Calcular el descuento de un producto","text":"<pre><code>double precio = 100.0;\nint cantidad = 5;\ndouble descuento = (cantidad &gt;= 3) ? precio * 0.1 : 0.0;\n\ndouble precioFinal = precio - descuento;\n\nSystem.out.println(\"Precio final: \" + precioFinal); // Imprime 90.0\n</code></pre>"},{"location":"content/p3/#3-devuelve-el-texto-el-numero-es-par-si-el-numero-es-par-y-el-texto-el-numero-es-impar-si-el-numero-es-impar","title":"3. Devuelve el texto \"El n\u00famero es par\" si el n\u00famero es par, y el texto \"El n\u00famero es impar\" si el n\u00famero es impar.","text":"<pre><code>String texto = (numero % 2 == 0) ? \"El n\u00famero es par\" : \"El n\u00famero es impar\";\n</code></pre>"},{"location":"content/p3/#5-switch-evalua-una-variable-o-expresion-y-ejecuta-el-codigo-del-case-que-coincida-con-el-valor","title":"5. switch: Eval\u00faa una variable o expresi\u00f3n y ejecuta el c\u00f3digo del case que coincida con el valor.","text":"<p>Sintaxis: <pre><code>switch(expresi\u00f3n) {\n  case valor1: \n    //c\u00f3digo\n    break;\n  case valor2: \n   //c\u00f3digo\n   break;\n  default:\n   //c\u00f3digo por defecto  \n}\n</code></pre></p> <p>Estas estructuras permiten controlar el flujo del programa ejecutando c\u00f3digo de manera condicional. Son muy \u00fatiles para realizar selecciones y tomar decisiones en la l\u00f3gica de un programa.</p>"},{"location":"content/p3/#ejemplos-switch","title":"Ejemplos switch:","text":""},{"location":"content/p3/#1-escribe-un-programa-que-le-pida-al-usuario-que-ingrese-un-dia-de-la-semana-el-programa-debe-imprimir-el-numero-del-dia-de-la-semana","title":"1. Escribe un programa que le pida al usuario que ingrese un d\u00eda de la semana. El programa debe imprimir el n\u00famero del d\u00eda de la semana.","text":"<pre><code>import java.util.Scanner;\n\npublic class DiaSemana {\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n\n    System.out.println(\"Ingrese un d\u00eda de la semana: \");\n    String dia = sc.nextLine();\n\n    switch (dia) {\n      case \"lunes\":\n        System.out.println(\"1\");\n        break;\n      case \"martes\":\n        System.out.println(\"2\");\n        break;\n      case \"mi\u00e9rcoles\":\n        System.out.println(\"3\");\n        break;\n      case \"jueves\":\n        System.out.println(\"4\");\n        break;\n      case \"viernes\":\n        System.out.println(\"5\");\n        break;\n      case \"s\u00e1bado\":\n        System.out.println(\"6\");\n        break;\n      case \"domingo\":\n        System.out.println(\"7\");\n        break;\n      default:\n        System.out.println(\"D\u00eda no v\u00e1lido\");\n    }\n  }\n}\n</code></pre>"},{"location":"content/p3/#2-escribe-un-programa-que-le-pida-al-usuario-que-ingrese-una-calificacion-de-1-a-10-el-programa-debe-imprimir-la-calificacion-en-letras","title":"2. Escribe un programa que le pida al usuario que ingrese una calificaci\u00f3n de 1 a 10. El programa debe imprimir la calificaci\u00f3n en letras.","text":"<pre><code>import java.util.Scanner;\n\npublic class Calificacion {\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n\n    System.out.println(\"Ingrese una calificaci\u00f3n de 1 a 10: \");\n    int calificacion = sc.nextInt();\n\n    switch (calificacion) {\n      case 1:\n        System.out.println(\"Insuficiente\");\n        break;\n      case 2:\n        System.out.println(\"Insuficiente\");\n        break;\n      case 3:\n        System.out.println(\"Insuficiente\");\n        break;\n      case 4:\n        System.out.println(\"Suficiente\");\n        break;\n      case 5:\n        System.out.println(\"Bien\");\n        break;\n      case 6:\n        System.out.println(\"Notable\");\n        break;\n      case 7:\n        System.out.println(\"Sobresaliente\");\n        break;\n      case 8:\n        System.out.println(\"Sobresaliente\");\n        break;\n      case 9:\n        System.out.println(\"Sobresaliente\");\n        break;\n      case 10:\n        System.out.println(\"Excelente\");\n        break;\n      default:\n        System.out.println(\"Calificaci\u00f3n no v\u00e1lida\");\n    }\n  }\n}\n</code></pre>"},{"location":"content/p3/#3-escribe-un-programa-que-le-pida-al-usuario-que-ingrese-un-numero-entero-el-programa-debe-imprimir-la-estacion-del-ano-correspondiente-al-numero","title":"3. Escribe un programa que le pida al usuario que ingrese un n\u00famero entero. El programa debe imprimir la estaci\u00f3n del a\u00f1o correspondiente al n\u00famero.","text":"<pre><code>import java.util.Scanner;\n\npublic class Estacion {\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n\n    System.out.println(\"Ingrese un n\u00famero entero: \");\n    int numero = sc.nextInt();\n\n    switch (numero) {\n      case 1:\n      case 2:\n      case 3:\n        System.out.println(\"Invierno\");\n        break;\n      case 4:\n      case 5:\n      case 6:\n        System.out.println(\"Primavera\");\n        break;\n      case 7:\n      case 8:\n      case 9:\n        System.out.println(\"Verano\");\n        break;\n      case 10:\n      case 11:\n      case 12:\n        System.out.println(\"Oto\u00f1o\");\n        break;\n      default:\n        System.out.println(\"N\u00famero no v\u00e1lido\");\n    }\n  }\n}\n</code></pre>"},{"location":"content/p3/#otros-ejemplos","title":"Otros ejemplos","text":""},{"location":"content/p3/#1-comprobacion-del-numero-par-o-impar","title":"1. Comprobaci\u00f3n del n\u00famero par o impar:","text":"<pre><code>int numero = 7;\n\nif (numero % 2 == 0) {\n    System.out.println(\"El n\u00famero es par.\");\n} else {\n    System.out.println(\"El n\u00famero es impar.\");\n}\n</code></pre>"},{"location":"content/p3/#2-evaluacion-de-la-calificacion-de-un-estudiante","title":"2. Evaluaci\u00f3n de la calificaci\u00f3n de un estudiante:","text":"<pre><code>int calificacion = 85;\n\nif (calificacion &gt;= 90) {\n    System.out.println(\"Excelente\");\n} else if (calificacion &gt;= 80) {\n    System.out.println(\"Bueno\");\n} else if (calificacion &gt;= 70) {\n    System.out.println(\"Regular\");\n} else {\n    System.out.println(\"Reprobado\");\n}\n</code></pre>"},{"location":"content/p3/#3-verificacion-de-la-elegibilidad-para-votar","title":"3. Verificaci\u00f3n de la elegibilidad para votar:","text":"<pre><code>int edad = 17;\n\nif (edad &gt;= 18) {\n    System.out.println(\"Eres elegible para votar.\");\n} else {\n    System.out.println(\"No eres elegible para votar.\");\n}\n</code></pre>"},{"location":"content/p3/#4-determinar-si-un-numero-es-positivo-negativo-o-cero","title":"4. Determinar si un n\u00famero es positivo, negativo o cero:","text":"<pre><code>int numero = -3;\n\nif (numero &gt; 0) {\n    System.out.println(\"El n\u00famero es positivo.\");\n} else if (numero &lt; 0) {\n    System.out.println(\"El n\u00famero es negativo.\");\n} else {\n    System.out.println(\"El n\u00famero es cero.\");\n}\n</code></pre>"},{"location":"content/p3/#5-validacion-de-una-contrasena","title":"5. Validaci\u00f3n de una contrase\u00f1a:","text":"<pre><code>String contrase\u00f1a = \"secreta123\";\n\nif (contrase\u00f1a.equals(\"secreta123\")) {\n    System.out.println(\"Contrase\u00f1a correcta. Acceso concedido.\");\n} else {\n    System.out.println(\"Contrase\u00f1a incorrecta. Acceso denegado.\");\n}\n</code></pre>"},{"location":"content/p3/#actividad-exploracion-completa-de-operadores-en-java","title":"Actividad: Exploraci\u00f3n Completa de Operadores en Java","text":""},{"location":"content/p3/#objetivo","title":"Objetivo:","text":"<p>Practicar el uso de operadores en Java, incluyendo aritm\u00e9ticos, de comparaci\u00f3n, l\u00f3gicos, de asignaci\u00f3n, bitwise y ternarios, utilizando condiciones (<code>if-else</code>) para tomar decisiones.</p>"},{"location":"content/p3/#instrucciones","title":"Instrucciones:","text":"<ol> <li>Crear un proyecto en Java:</li> <li>Abre tu IDE favorito.</li> <li>Crea un nuevo proyecto Java.</li> <li> <p>Dentro del proyecto llamado <code>ExploracionOperadores</code>.</p> </li> <li> <p>Definir variables:</p> </li> <li> <p>Declara e inicializa las siguientes variables en el m\u00e9todo <code>main</code>:      <pre><code>int a = 10;\nint b = 5;\ndouble c = 7.5;\nboolean condicion1 = true;\nboolean condicion2 = false;\nint x = 12; // Para operadores bitwise\nint y = 9;  // Para operadores bitwise\n</code></pre></p> </li> <li> <p>Operadores aritm\u00e9ticos:</p> </li> <li> <p>Realiza las siguientes operaciones y muestra los resultados en la consola:</p> <ul> <li>Suma de <code>a</code> y <code>b</code>.</li> <li>Resta de <code>a</code> y <code>b</code>.</li> <li>Multiplicaci\u00f3n de <code>a</code> y <code>c</code>.</li> <li>Divisi\u00f3n de <code>a</code> entre <code>b</code>.</li> <li>M\u00f3dulo de <code>a</code> entre <code>b</code>.</li> <li>Incrementa <code>a</code> en 1 y muestra el resultado.</li> <li>Decrementa <code>b</code> en 1 y muestra el resultado.</li> </ul> <p>Ejemplo:  <pre><code>System.out.println(\"Suma de a y b: \" + (a + b));\n</code></pre></p> </li> <li> <p>Operadores de comparaci\u00f3n:</p> </li> <li> <p>Compara las variables y muestra los resultados en la consola:</p> <ul> <li>\u00bf<code>a</code> es mayor que <code>b</code>?</li> <li>\u00bf<code>a</code> es igual a <code>b</code>?</li> <li>\u00bf<code>c</code> es menor o igual que <code>a</code>?</li> <li>\u00bf<code>a</code> es diferente de <code>b</code>?</li> </ul> <p>Ejemplo:  <pre><code>System.out.println(\"\u00bfa es mayor que b? \" + (a &gt; b));\n</code></pre></p> </li> <li> <p>Operadores l\u00f3gicos:</p> </li> <li> <p>Eval\u00faa las siguientes expresiones l\u00f3gicas y muestra los resultados en la consola:</p> <ul> <li><code>condicion1</code> AND <code>condicion2</code>.</li> <li><code>condicion1</code> OR <code>condicion2</code>.</li> <li>NOT <code>condicion1</code>.</li> <li><code>condicion1</code> XOR <code>condicion2</code>.</li> </ul> <p>Ejemplo:  <pre><code>System.out.println(\"condicion1 AND condicion2: \" + (condicion1 &amp;&amp; condicion2));\n</code></pre></p> </li> <li> <p>Operadores de asignaci\u00f3n:</p> </li> <li> <p>Realiza las siguientes operaciones de asignaci\u00f3n y muestra los resultados en la consola:</p> <ul> <li>Asigna a <code>a</code> el valor de <code>a + b</code>.</li> <li>Asigna a <code>b</code> el valor de <code>b * 2</code>.</li> <li>Asigna a <code>c</code> el valor de <code>c / 2</code>.</li> </ul> <p>Ejemplo:  <pre><code>a += b;\nSystem.out.println(\"Nuevo valor de a: \" + a);\n</code></pre></p> </li> <li> <p>Operador ternario:</p> </li> <li> <p>Utiliza el operador ternario para asignar un valor a una variable basado en una condici\u00f3n:</p> <ul> <li>Si <code>a</code> es mayor que <code>b</code>, asigna a una variable <code>resultadoTernario</code> el valor \"a es mayor\", de lo contrario, asigna \"b es mayor o igual\".</li> <li>Muestra el valor de <code>resultadoTernario</code> en la consola.</li> </ul> <p>Ejemplo:  <pre><code>String resultadoTernario = (a &gt; b) ? \"a es mayor\" : \"b es mayor o igual\";\nSystem.out.println(\"Resultado del operador ternario: \" + resultadoTernario);\n</code></pre></p> </li> <li> <p>Condiciones (<code>if-else</code>):</p> </li> <li> <p>Utiliza una condici\u00f3n <code>if-else</code> para tomar una decisi\u00f3n basada en el valor de <code>c</code>:</p> <ul> <li>Si <code>c</code> es mayor que 10, muestra \"c es mayor que 10\".</li> <li>Si <code>c</code> es igual a 10, muestra \"c es igual a 10\".</li> <li>Si <code>c</code> es menor que 10, muestra \"c es menor que 10\".</li> </ul> <p>Ejemplo:  <pre><code>if (c &gt; 10) {\n    System.out.println(\"c es mayor que 10\");\n} else if (c == 10) {\n    System.out.println(\"c es igual a 10\");\n} else {\n    System.out.println(\"c es menor que 10\");\n}\n</code></pre></p> </li> <li> <p>Ejecuta el programa:</p> <ul> <li>Ejecuta el programa y verifica que los resultados sean correctos.</li> </ul> </li> </ol>"},{"location":"content/p3/#codigo-de-ejemplo-completo","title":"C\u00f3digo de ejemplo completo:","text":"<pre><code>public class ExploracionOperadores {\n    public static void main(String[] args) {\n        // Paso 2: Definir variables\n        int a = 10;\n        int b = 5;\n        double c = 7.5;\n        boolean condicion1 = true;\n        boolean condicion2 = false;\n        int x = 12; // Para operadores bitwise\n        int y = 9;  // Para operadores bitwise\n\n        // Paso 3: Operadores aritm\u00e9ticos\n        System.out.println(\"Suma de a y b: \" + (a + b));\n        System.out.println(\"Resta de a y b: \" + (a - b));\n        System.out.println(\"Multiplicaci\u00f3n de a y c: \" + (a * c));\n        System.out.println(\"Divisi\u00f3n de a entre b: \" + (a / b));\n        System.out.println(\"M\u00f3dulo de a entre b: \" + (a % b));\n        a++;\n        System.out.println(\"Incremento de a: \" + a);\n        b--;\n        System.out.println(\"Decremento de b: \" + b);\n\n        // Paso 4: Operadores de comparaci\u00f3n\n        System.out.println(\"\u00bfa es mayor que b? \" + (a &gt; b));\n        System.out.println(\"\u00bfa es igual a b? \" + (a == b));\n        System.out.println(\"\u00bfc es menor o igual que a? \" + (c &lt;= a));\n        System.out.println(\"\u00bfa es diferente de b? \" + (a != b));\n\n        // Paso 5: Operadores l\u00f3gicos\n        System.out.println(\"condicion1 AND condicion2: \" + (condicion1 &amp;&amp; condicion2));\n        System.out.println(\"condicion1 OR condicion2: \" + (condicion1 || condicion2));\n        System.out.println(\"NOT condicion1: \" + (!condicion1));\n        System.out.println(\"condicion1 XOR condicion2: \" + (condicion1 ^ condicion2));\n\n        // Paso 6: Operadores de asignaci\u00f3n\n        a += b;\n        System.out.println(\"Nuevo valor de a: \" + a);\n        b *= 2;\n        System.out.println(\"Nuevo valor de b: \" + b);\n        c /= 2;\n        System.out.println(\"Nuevo valor de c: \" + c);\n\n        // Paso 7: Operador ternario\n        String resultadoTernario = (a &gt; b) ? \"a es mayor\" : \"b es mayor o igual\";\n        System.out.println(\"Resultado del operador ternario: \" + resultadoTernario);\n\n        // Paso 8: Condiciones (if-else)\n        if (c &gt; 10) {\n            System.out.println(\"c es mayor que 10\");\n        } else if (c == 10) {\n            System.out.println(\"c es igual a 10\");\n        } else {\n            System.out.println(\"c es menor que 10\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p3/#preguntas-de-reflexion","title":"Preguntas de reflexi\u00f3n:","text":"<ol> <li>\u00bfQu\u00e9 diferencia hay entre el operador <code>/</code> y el operador <code>%</code>?</li> <li>\u00bfPor qu\u00e9 el resultado de <code>condicion1 &amp;&amp; condicion2</code> es <code>false</code>?</li> <li>\u00bfQu\u00e9 sucede si divides un n\u00famero entre 0 en Java?</li> <li>\u00bfCu\u00e1l es la ventaja de usar el operador ternario en lugar de un <code>if-else</code>?</li> </ol>"},{"location":"content/p4/","title":"Semana 4 - Conversi\u00f3n de tipos en Java","text":"<p>La conversi\u00f3n de tipos de datos en Java es un proceso mediante el cual se convierte un valor de un tipo de dato en otro. Java tiene dos tipos de conversi\u00f3n de datos: la conversi\u00f3n impl\u00edcita y la conversi\u00f3n expl\u00edcita.</p> <p>La conversi\u00f3n impl\u00edcita se produce autom\u00e1ticamente cuando se asigna un valor de un tipo de dato a una variable de otro tipo de datos compatible. Por ejemplo, si se asigna un valor de tipo \"int\" a una variable de tipo \"double\", Java realiza la conversi\u00f3n autom\u00e1ticamente.</p> <p><pre><code>int x = 5;\ndouble y = x; // Conversi\u00f3n impl\u00edcita de int a double\n</code></pre> La conversi\u00f3n expl\u00edcita, tambi\u00e9n conocida como \"casting\", se utiliza cuando se desea convertir un valor de un tipo de dato a otro tipo de datos que no es compatible de forma impl\u00edcita. Para hacer una conversi\u00f3n expl\u00edcita, se debe utilizar una sintaxis especial que indica al compilador que se desea convertir el valor a otro tipo de datos.</p> <p><pre><code>double x = 3.14;\nint y = (int) x; // Conversi\u00f3n expl\u00edcita de double a int\n</code></pre> En este ejemplo, se utiliza la sintaxis \"(int)\" para indicar que se desea convertir el valor \"x\" de tipo \"double\" a un valor de tipo \"int\". Es importante tener en cuenta que la conversi\u00f3n expl\u00edcita puede provocar la p\u00e9rdida de informaci\u00f3n si se intenta convertir un valor a un tipo de datos con menos precisi\u00f3n.</p> <p>Adem\u00e1s de las conversiones impl\u00edcitas y expl\u00edcitas, Java tambi\u00e9n proporciona m\u00e9todos para convertir valores entre diferentes tipos de datos, como los m\u00e9todos \"valueOf()\" y \"parseXxx()\" de la clase \"String\". Estos m\u00e9todos se utilizan para convertir valores de tipo \"String\" a otros tipos de datos, como \"int\" o \"double\".</p>"},{"location":"content/p4/#metodo-parsexxx","title":"M\u00e9todo parseXxx()","text":"<p>En Java, los m\u00e9todos parseXxx() se utilizan para convertir una representaci\u00f3n de cadena (String) en un valor de tipo primitivo o un objeto de clase envolvente. Aqu\u00ed tienes algunos ejemplos de m\u00e9todos parseXxx() para diferentes tipos de datos:</p> <ul> <li>parseInt() - Convierte una cadena en un valor entero (int):</li> </ul> <pre><code>String numberStr = \"123\";\nint number = Integer.parseInt(numberStr);\nSystem.out.println(number); // Salida: 123\n</code></pre> <ul> <li>parseDouble() - Convierte una cadena en un valor de punto flotante (double):</li> </ul> <pre><code>String decimalStr = \"3.14\";\ndouble decimal = Double.parseDouble(decimalStr);\nSystem.out.println(decimal); // Salida: 3.14\n</code></pre> <ul> <li>parseBoolean() - Convierte una cadena en un valor booleano (boolean):</li> </ul> <pre><code>String boolStr = \"true\";\nboolean boolValue = Boolean.parseBoolean(boolStr);\nSystem.out.println(boolValue); // Salida: true\n</code></pre> <ul> <li>parseLong() - Convierte una cadena en un valor entero largo (long):</li> </ul> <pre><code>String floatStr = \"2.71828\";\nfloat floatValue = Float.parseFloat(floatStr);\nSystem.out.println(floatValue); // Salida: 2.71828\n</code></pre> <ul> <li>parseFloat() - Convierte una cadena en un valor de punto flotante de precisi\u00f3n simple (float):</li> </ul> <pre><code>String longStr = \"9876543210\";\nlong longValue = Long.parseLong(longStr);\nSystem.out.println(longValue); // Salida: 9876543210\n</code></pre>"},{"location":"content/p4/#metodo-valueof","title":"M\u00e9todo valueOf()","text":"<p>El m\u00e9todo valueOf() en Java se utiliza para convertir un tipo de dato primitivo o una cadena en un objeto de clase envolvente (wrapper class). Aqu\u00ed tienes un ejemplo de c\u00f3mo se puede utilizar el m\u00e9todo valueOf():</p> <pre><code>// Ejemplo 1: Converting a String to Integer object\nString numberStr = \"123\";\nInteger numberObj = Integer.valueOf(numberStr);\nSystem.out.println(numberObj); // Salida: 123\n\n// Ejemplo 2: Converting a String to Double object\nString decimalStr = \"3.14\";\nDouble decimalObj = Double.valueOf(decimalStr);\nSystem.out.println(decimalObj); // Salida: 3.14\n\n// Ejemplo 3: Converting an int to Integer object\nint intValue = 42;\nInteger intObj = Integer.valueOf(intValue);\nSystem.out.println(intObj); // Salida: 42\n\n// Ejemplo 4: Converting a boolean to Boolean object\nboolean boolValue = true;\nBoolean boolObj = Boolean.valueOf(boolValue);\nSystem.out.println(boolObj); // Salida: true\n</code></pre>"},{"location":"content/p4/#clase-math-en-java","title":"Clase Math en Java","text":"<p><code>Math</code> es una clase en Java que proporciona m\u00e9todos para realizar operaciones matem\u00e1ticas comunes. No es necesario crear un objeto de la clase <code>Math</code> para usar sus m\u00e9todos, ya que son est\u00e1ticos.</p> <p>Explicaci\u00f3n:</p> <p>La clase <code>Math</code> contiene una amplia variedad de m\u00e9todos para realizar operaciones matem\u00e1ticas como:</p> <ul> <li>Operaciones b\u00e1sicas:\u00a0suma, resta, multiplicaci\u00f3n, divisi\u00f3n, potenciaci\u00f3n y radicaci\u00f3n.</li> <li>Funciones trigonom\u00e9tricas:\u00a0seno, coseno, tangente, arco seno, arco coseno y arco tangente.</li> <li>Funciones logar\u00edtmicas:\u00a0logaritmo natural (ln) y logaritmo en base 10 (log10).</li> <li>Funciones exponenciales:\u00a0exponenciaci\u00f3n natural (exp) y exponenciaci\u00f3n en base 10 (pow10).</li> <li>Funciones de redondeo:\u00a0<code>floor</code>,\u00a0<code>ceil</code>\u00a0y\u00a0<code>round</code>.</li> <li>Funciones de comparaci\u00f3n:\u00a0<code>min</code>,\u00a0<code>max</code>\u00a0y\u00a0<code>abs</code>.</li> <li>Generaci\u00f3n de n\u00fameros aleatorios:\u00a0<code>random</code>.</li> </ul> <p>Ejemplos:</p>"},{"location":"content/p4/#1-operaciones-basicas","title":"1. Operaciones b\u00e1sicas:","text":"<pre><code>int suma = Math.add(1, 2); // Suma 1 y 2, resultado: 3\nint resta = Math.subtract(5, 3); // Resta 3 de 5, resultado: 2\nint producto = Math.multiply(4, 5); // Multiplica 4 por 5, resultado: 20\nint division = Math.divide(10, 2); // Divide 10 entre 2, resultado: 5\ndouble potencia = Math.pow(2, 3); // Eleva 2 a la potencia 3, resultado: 8\ndouble raizCuadrada = Math.sqrt(9); // Calcula la ra\u00edz cuadrada de 9, resultado: 3\n</code></pre>"},{"location":"content/p4/#2-funciones-trigonometricas","title":"2. Funciones trigonom\u00e9tricas:","text":"<pre><code>double seno = Math.sin(Math.PI / 2); // Calcula el seno de 90 grados, resultado: 1\ndouble coseno = Math.cos(Math.PI); // Calcula el coseno de 180 grados, resultado: -1\ndouble tangente = Math.tan(Math.PI / 4); // Calcula la tangente de 45 grados, resultado: 1\n</code></pre>"},{"location":"content/p4/#3-funciones-logaritmicas","title":"3. Funciones logar\u00edtmicas:","text":"<pre><code>double ln = Math.log(Math.E); // Calcula el logaritmo natural de e, resultado: 1\ndouble log10 = Math.log10(100); // Calcula el logaritmo en base 10 de 100, resultado: 2\n</code></pre>"},{"location":"content/p4/#4-funciones-exponenciales","title":"4. Funciones exponenciales:","text":"<pre><code>double exp = Math.exp(1); // Calcula la exponenciaci\u00f3n natural de 1, resultado: 2.71828...\ndouble pow10 = Math.pow(10,2); // Calcula 10 elevado a la potencia 2, resultado: 100\n</code></pre>"},{"location":"content/p4/#5-funciones-de-redondeo","title":"5. Funciones de redondeo:","text":"<pre><code>double floor = Math.floor(3.14); // Redondea 3.14 hacia abajo, resultado: 3\ndouble ceil = Math.ceil(3.14); // Redondea 3.14 hacia arriba, resultado: 4\ndouble round = Math.round(3.5); // Redondea 3.5 al entero m\u00e1s cercano, resultado: 4\n</code></pre>"},{"location":"content/p4/#6-funciones-de-comparacion","title":"6. Funciones de comparaci\u00f3n:","text":"<pre><code>int min = Math.min(1, 2); // Devuelve el m\u00ednimo entre 1 y 2, resultado: 1\nint max = Math.max(1, 2); // Devuelve el m\u00e1ximo entre 1 y 2, resultado: 2\nint abs = Math.abs(-5); // Devuelve el valor absoluto de -5, resultado: 5\n</code></pre>"},{"location":"content/p4/#7-generacion-de-numeros-aleatorios","title":"7. Generaci\u00f3n de n\u00fameros aleatorios:","text":"<pre><code>double numeroAleatorio = Math.random(); // Genera un n\u00famero aleatorio entre 0.0 y 1.0\n</code></pre>"},{"location":"content/p4/#8-generacion-de-un-numero-aleatorio-entre-10-y-20","title":"8. Generaci\u00f3n de un n\u00famero aleatorio entre 10 y 20:","text":"<pre><code>int min = 10;\nint max = 20;\nint amplitud = max - min;\n\ndouble numeroAleatorio = Math.random();\nint numeroFinal = (int) (numeroAleatorio * amplitud) + min;\n\nSystem.out.println(\"N\u00famero aleatorio entre \" + min + \" y \" + max + \": \" + numeroFinal);\n</code></pre>"},{"location":"content/p4/#clase-string-en-java","title":"Clase String en Java","text":"<p>La clase <code>String</code> en Java es una de las m\u00e1s utilizadas para trabajar con cadenas de caracteres. Ofrece una amplia gama de m\u00e9todos para manipular, transformar y obtener informaci\u00f3n de las cadenas.</p> <p>En esta gu\u00eda completa, exploraremos en detalle todos los m\u00e9todos de la clase <code>String</code> con ejemplos pr\u00e1cticos:</p>"},{"location":"content/p4/#1-metodos-de-comparacion","title":"1. M\u00e9todos de comparaci\u00f3n:","text":"<ul> <li><code>equals(Object anObject)</code>: Compara dos cadenas para verificar si son iguales.</li> <li><code>equalsIgnoreCase(String anotherString)</code>: Compara dos cadenas ignorando las may\u00fasculas y min\u00fasculas.</li> <li><code>compareTo(String anotherString)</code>: Compara dos cadenas lexicogr\u00e1ficamente.</li> <li><code>compareToIgnoreCase(String anotherString)</code>: Compara dos cadenas lexicogr\u00e1ficamente ignorando las may\u00fasculas y min\u00fasculas.</li> </ul> <pre><code>String s1 = \"Hola Mundo\";\nString s2 = \"Hola Mundo\";\nString s3 = \"hola mundo\";\n\nSystem.out.println(s1.equals(s2)); // true\nSystem.out.println(s1.equalsIgnoreCase(s3)); // true\nSystem.out.println(s1.compareTo(s2)); // 0\nSystem.out.println(s1.compareToIgnoreCase(s3)); // 0\n</code></pre>"},{"location":"content/p4/#2-metodos-de-busqueda","title":"2. M\u00e9todos de b\u00fasqueda:","text":"<ul> <li><code>charAt(int index)</code>: Obtiene el car\u00e1cter en la posici\u00f3n indicada.</li> <li><code>indexOf(int ch)</code>: Obtiene la primera aparici\u00f3n del car\u00e1cter especificado.</li> <li><code>lastIndexOf(int ch)</code>: Obtiene la \u00faltima aparici\u00f3n del car\u00e1cter especificado.</li> <li><code>contains(String str)</code>: Verifica si la cadena contiene la subcadena especificada.</li> </ul> <pre><code>String s = \"Hola Mundo\";\n\nSystem.out.println(s.charAt(0)); // H\nSystem.out.println(s.indexOf('o')); // 4\nSystem.out.println(s.lastIndexOf('o')); // 7\nSystem.out.println(s.contains(\"Mundo\")); // true\n</code></pre>"},{"location":"content/p4/#3-metodos-de-modificacion","title":"3. M\u00e9todos de modificaci\u00f3n:","text":"<ul> <li><code>concat(String str)</code>: Concatena dos cadenas.</li> <li><code>replace(char oldChar, char newChar)</code>: Reemplaza todas las apariciones de un car\u00e1cter por otro.</li> <li><code>substring(int beginIndex)</code>: Obtiene una subcadena desde la posici\u00f3n indicada hasta el final.</li> <li><code>substring(int beginIndex, int endIndex)</code>: Obtiene una subcadena desde la posici\u00f3n indicada hasta la posici\u00f3n final especificada.</li> <li><code>toLowerCase()</code>: Convierte la cadena a min\u00fasculas.</li> <li><code>toUpperCase()</code>: Convierte la cadena a may\u00fasculas.</li> <li><code>trim()</code>: Elimina los espacios en blanco al principio y al final de la cadena.</li> </ul> <pre><code>String s1 = \"Hola\";\nString s2 = \"Mundo\";\n\nString s3 = s1.concat(s2); // \"Hola Mundo\"\nString s4 = s3.replace('o', 'a'); // \"Hala Munda\"\nString s5 = s3.substring(5); // \" Mundo\"\nString s6 = s3.substring(0, 5); // \"Hola \"\nString s7 = s3.toLowerCase(); // \"hola mundo\"\nString s8 = s3.toUpperCase(); // \"HOLA MUNDO\"\nString s9 = s3.trim(); // \"Hola Mundo\"\n\nSystem.out.println(s3); // Hola Mundo\nSystem.out.println(s4); // Hala Munda\nSystem.out.println(s5); //  Mundo\nSystem.out.println(s6); // Hola\nSystem.out.println(s7); // hola mundo\nSystem.out.println(s8); // HOLA MUNDO\nSystem.out.println(s9); // Hola Mundo\n</code></pre>"},{"location":"content/p4/#4-metodos-de-transformacion","title":"4. M\u00e9todos de transformaci\u00f3n:","text":"<ul> <li><code>split(String regex)</code>: Divide la cadena en una matriz de subcadenas utilizando la expresi\u00f3n regular especificada.</li> <li><code>join(String delimiter, String[] strings)</code>: Concatena una matriz de cadenas en una sola cadena utilizando el delimitador especificado.</li> </ul> <pre><code>String s = \"Hola, Mundo, c\u00f3mo est\u00e1s?\";\n\nString[] parts = s.split(\",\"); // [\"Hola\", \" Mundo\", \" c\u00f3mo est\u00e1s?\"]\nString joined = String.join(\" \", parts); // \"Hola Mundo c\u00f3mo est\u00e1s?\"\n\nSystem.out.println(Arrays.toString(parts)); // [Hola, Mundo, c\u00f3mo est\u00e1s?]\nSystem.out.println(joined); // Hola Mundo c\u00f3mo est\u00e1s?\n</code></pre>"},{"location":"content/p4/#actividad-de-clase","title":"Actividad de clase","text":""},{"location":"content/p4/#1-calculando-la-propina-en-un-restaurante","title":"1. Calculando la propina en un restaurante","text":"<p>Enunciado:</p> <p>Est\u00e1s en un restaurante colombiano con amigos y la cuenta ha llegado. \u00a1Es hora de calcular la propina! </p> <p>Paso a paso:</p> <ol> <li>Ingresa el valor de la cuenta:</li> <li>Solicita al usuario que ingrese el valor total de la cuenta, incluyendo el IVA, como un n\u00famero decimal, por ejemplo: 120000.50.</li> <li>Guarda el valor de la cuenta en una variable llamada <code>valorCuenta</code>.</li> <li>Elige el porcentaje de propina:</li> <li>En Colombia, es com\u00fan dejar una propina del 10% al 15% del valor de la cuenta. </li> <li>Solicita al usuario que ingrese el porcentaje de propina que desea dejar, por ejemplo: 12.</li> <li>Guarda el porcentaje de propina en una variable llamada <code>porcentajePropina</code>.</li> <li>Calcula el valor de la propina:</li> <li>Convierte el porcentaje de propina a un valor decimal dividi\u00e9ndolo entre 100 (por ejemplo, 12 / 100 = 0.12).</li> <li>Multiplica el valor de la cuenta por el valor decimal del porcentaje de propina para obtener el valor de la propina.</li> <li>Guarda el valor de la propina en una variable llamada <code>valorPropina</code>.</li> <li>Calcula el valor total a pagar:</li> <li>Suma el valor de la cuenta y el valor de la propina para obtener el valor total a pagar.</li> <li>Guarda el valor total a pagar en una variable llamada <code>valorTotal</code>.</li> <li>Imprime el resultado:</li> <li>Muestra el valor de la cuenta, el porcentaje de propina, el valor de la propina y el valor total a pagar, formateados de manera clara y legible, por ejemplo:      <pre><code>Valor de la cuenta: $120000.50\nPorcentaje de propina: 12%\nValor de la propina: $14400.06\nValor total a pagar: $134400.56\n</code></pre></li> </ol> <p>Pista:</p> <ul> <li>Recuerda que en Java, las operaciones matem\u00e1ticas se realizan con n\u00fameros decimales (tipo <code>double</code>). </li> <li>Puedes usar el m\u00e9todo <code>String.format()</code> para dar formato a los n\u00fameros y mostrarlos con dos decimales, por ejemplo: <code>String.format(\"%.2f\", valorPropina)</code>.</li> <li>\u00a1Puedes usar la clase <code>Math</code> para redondear el valor de la propina al entero m\u00e1s cercano, si lo prefieres!</li> </ul>"},{"location":"content/p4/#2-calculando-el-precio-de-un-taxi-en-medellin","title":"2. Calculando el precio de un taxi en Medell\u00edn","text":"<p>Enunciado:</p> <p>Est\u00e1s en Medell\u00edn y necesitas tomar un taxi para llegar a tu destino.  Para calcular el precio del viaje, necesitas considerar la tarifa base, el valor por kil\u00f3metro recorrido y el tiempo de espera en tr\u00e1fico.</p> <p>Paso a paso:</p> <ol> <li>Ingresa la distancia del viaje:</li> <li>Solicita al usuario que ingrese la distancia del viaje en kil\u00f3metros, por ejemplo: 8.2.</li> <li>Guarda la distancia en una variable llamada <code>distancia</code>.</li> <li>Ingresa el tiempo de espera en tr\u00e1fico:</li> <li>Solicita al usuario que ingrese el tiempo que espera pasar en tr\u00e1fico, en minutos, por ejemplo: 10.</li> <li>Guarda el tiempo de espera en una variable llamada <code>tiempoEspera</code>.</li> <li>Calcula el precio del viaje:</li> <li>Define la tarifa base del taxi en Medell\u00edn (por ejemplo, $4.000). Guarda este valor en una variable llamada <code>tarifaBase</code>.</li> <li>Define el valor por kil\u00f3metro recorrido (por ejemplo, $900). Guarda este valor en una variable llamada <code>valorKilometro</code>.</li> <li>Define el valor por minuto de espera en tr\u00e1fico (por ejemplo, $150). Guarda este valor en una variable llamada <code>valorMinuto</code>.</li> <li>Calcula el precio total del viaje:<ul> <li>Multiplica la distancia por el valor por kil\u00f3metro recorrido.</li> <li>Multiplica el tiempo de espera por el valor por minuto.</li> <li>Suma la tarifa base, el precio por distancia y el precio por tiempo de espera.</li> </ul> </li> <li>Guarda el precio total del viaje en una variable llamada <code>precioTotal</code>.</li> <li>Imprime el resultado:</li> <li>Muestra el precio total del viaje, formateado de manera clara y legible, por ejemplo:      <pre><code>Precio del viaje: $11.580\n</code></pre></li> </ol> <p>Pista:</p> <ul> <li>Puedes usar variables con nombres descriptivos para almacenar la informaci\u00f3n del viaje, por ejemplo: <code>distancia</code>, <code>tiempoEspera</code>, <code>tarifaBase</code>, <code>valorKilometro</code>, <code>valorMinuto</code>, <code>precioTotal</code>.</li> <li>Recuerda que en Java, las operaciones matem\u00e1ticas se realizan con n\u00fameros decimales (tipo <code>double</code>). </li> <li>Puedes usar el m\u00e9todo <code>String.format()</code> para dar formato al precio total y mostrar el valor con dos decimales, por ejemplo: <code>String.format(\"%.2f\", precioTotal)</code>.</li> </ul>"},{"location":"content/p4/#3-decodificando-un-mensaje-secreto","title":"3. Decodificando un mensaje secreto","text":"<p>Enunciado:</p> <p>Eres un agente secreto que ha recibido un mensaje codificado.  Para descifrarlo, necesitas aplicar una serie de operaciones sobre las cadenas de texto. </p> <p>Mensaje codificado:</p> <pre><code>\"H0l4  MUnD0,  3st0  3s  Un  m3ns4j3  s3cr3t0\"\n</code></pre> <p>Paso a paso:</p> <ol> <li>Convierte los n\u00fameros a letras:</li> <li>Reemplaza los n\u00fameros \"0\" por la letra \"o\", los n\u00fameros \"3\" por la letra \"e\" y los n\u00fameros \"4\" por la letra \"a\".</li> <li>Puedes usar el m\u00e9todo <code>replace()</code> para realizar estas sustituciones.</li> <li>Elimina los espacios en blanco adicionales:</li> <li>Elimina los espacios en blanco al principio y al final de la cadena, y tambi\u00e9n los espacios en blanco adicionales que se encuentran entre las palabras.</li> <li>Puedes usar el m\u00e9todo <code>trim()</code> para eliminar los espacios al principio y al final, y el m\u00e9todo <code>replaceAll()</code> para eliminar los espacios en blanco adicionales.</li> <li>Convierte la cadena a may\u00fasculas:</li> <li>Convierte toda la cadena a may\u00fasculas.</li> <li>Puedes usar el m\u00e9todo <code>toUpperCase()</code>.</li> <li>Imprime el mensaje decodificado:</li> <li>Muestra el mensaje decodificado en la consola, con el texto completamente legible.</li> </ol> <p>Pista:</p> <ul> <li>Puedes usar una variable llamada <code>mensajeCodificado</code> para almacenar el mensaje inicial.</li> <li>Puedes usar una variable llamada <code>mensajeDecodificado</code> para almacenar el mensaje decodificado despu\u00e9s de cada paso.</li> <li>Puedes usar el m\u00e9todo <code>System.out.println()</code> para imprimir el mensaje decodificado en la consola.</li> </ul>"},{"location":"content/p5/","title":"Semana 5 - Ejercicios Pr\u00e1cticos Solucionados","text":""},{"location":"content/p5/#ejercicio-1-calculadora-de-promedio","title":"Ejercicio 1: Calculadora de Promedio","text":""},{"location":"content/p5/#descripcion","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule el promedio de tres notas y determine si el estudiante aprob\u00f3 o no. Un estudiante aprueba si su promedio es mayor o igual a 3.0.</p>"},{"location":"content/p5/#solucion","title":"Soluci\u00f3n","text":"<pre><code>public class CalculadoraPromedio {\n    public static void main(String[] args) {\n        // Declaraci\u00f3n de variables\n        double nota1 = 3.5;\n        double nota2 = 2.8;\n        double nota3 = 4.0;\n\n        // C\u00e1lculo del promedio\n        double promedio = (nota1 + nota2 + nota3) / 3;\n\n        // Mostrar el promedio con dos decimales\n        System.out.printf(\"El promedio es: %.2f%n\", promedio);\n\n        // Determinar si aprob\u00f3\n        if (promedio &gt;= 3.0) {\n            System.out.println(\"\u00a1Felicitaciones! Has aprobado.\");\n        } else {\n            System.out.println(\"Lo siento, no has aprobado.\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li>Utilizamos variables de tipo <code>double</code> para almacenar las notas y el promedio.</li> <li>Aplicamos operadores aritm\u00e9ticos para calcular el promedio: suma (+) y divisi\u00f3n (/).</li> <li>Usamos una estructura condicional (if-else) para determinar si el estudiante aprob\u00f3.</li> <li>El m\u00e9todo <code>printf</code> se usa para formatear el promedio a dos decimales.</li> </ul>"},{"location":"content/p5/#ejercicio-2-conversor-de-temperatura","title":"Ejercicio 2: Conversor de Temperatura","text":""},{"location":"content/p5/#descripcion_1","title":"Descripci\u00f3n","text":"<p>Crear un programa que convierta una temperatura de Celsius a Fahrenheit y viceversa, utilizando la conversi\u00f3n de tipos y operadores aritm\u00e9ticos.</p>"},{"location":"content/p5/#solucion_1","title":"Soluci\u00f3n","text":"<pre><code>public class ConversorTemperatura {\n    public static void main(String[] args) {\n        // Convertir de Celsius a Fahrenheit\n        String celsiusStr = \"25\";\n        double celsius = Double.parseDouble(celsiusStr);\n        double fahrenheit = (celsius * 9/5) + 32;\n\n        System.out.println(celsius + \"\u00b0C equivale a \" + fahrenheit + \"\u00b0F\");\n\n        // Convertir de Fahrenheit a Celsius\n        double tempF = 98.6;\n        double tempC = (tempF - 32) * 5/9;\n        int tempCInt = (int) tempC; // Conversi\u00f3n expl\u00edcita a entero\n\n        System.out.println(tempF + \"\u00b0F equivale a \" + tempC + \"\u00b0C\");\n        System.out.println(\"Temperatura en Celsius (redondeada): \" + tempCInt + \"\u00b0C\");\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_1","title":"Explicaci\u00f3n","text":"<ul> <li>Utilizamos <code>Double.parseDouble()</code> para convertir un String a double.</li> <li>Aplicamos f\u00f3rmulas de conversi\u00f3n usando operadores aritm\u00e9ticos.</li> <li>Realizamos una conversi\u00f3n expl\u00edcita (casting) de double a int.</li> <li>Demostramos el uso de diferentes tipos de datos y sus conversiones.</li> </ul>"},{"location":"content/p5/#ejercicio-3-calculadora-de-descuento","title":"Ejercicio 3: Calculadora de Descuento","text":""},{"location":"content/p5/#descripcion_2","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule el precio final de un producto despu\u00e9s de aplicar un descuento, utilizando operadores aritm\u00e9ticos y de asignaci\u00f3n.</p>"},{"location":"content/p5/#solucion_2","title":"Soluci\u00f3n","text":"<pre><code>public class CalculadoraDescuento {\n    public static void main(String[] args) {\n        // Precio original y porcentaje de descuento\n        double precioOriginal = 100000;\n        int porcentajeDescuento = 15;\n\n        // C\u00e1lculo del descuento\n        double descuento = precioOriginal * (porcentajeDescuento / 100.0);\n        double precioFinal = precioOriginal - descuento;\n\n        // Mostrar resultados\n        System.out.println(\"Precio original: $\" + precioOriginal);\n        System.out.println(\"Descuento \" + porcentajeDescuento + \"%: $\" + descuento);\n        System.out.println(\"Precio final: $\" + precioFinal);\n\n        // Ejemplo con operador de asignaci\u00f3n compuesto\n        double precio = precioFinal;\n        precio *= 1.19; // Agregar IVA del 19%\n\n        System.out.println(\"Precio final con IVA: $\" + precio);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_2","title":"Explicaci\u00f3n","text":"<ul> <li>Utilizamos variables de tipo <code>double</code> para manejar decimales en los precios.</li> <li>Aplicamos operadores aritm\u00e9ticos para calcular el descuento y el precio final.</li> <li>Demostramos el uso del operador de asignaci\u00f3n compuesto (*=).</li> <li>Calculamos porcentajes y realizamos operaciones con decimales.</li> </ul>"},{"location":"content/p5/#ejercicio-4-calculadora-basica","title":"Ejercicio 4: Calculadora B\u00e1sica","text":""},{"location":"content/p5/#descripcion_3","title":"Descripci\u00f3n","text":"<p>Crear una calculadora que realice las cuatro operaciones b\u00e1sicas (suma, resta, multiplicaci\u00f3n y divisi\u00f3n) con dos n\u00fameros.</p>"},{"location":"content/p5/#solucion_3","title":"Soluci\u00f3n","text":"<pre><code>public class CalculadoraBasica {\n    public static void main(String[] args) {\n        // Declaraci\u00f3n de variables\n        double num1 = 15.5;\n        double num2 = 5.0;\n\n        // Realizar operaciones\n        double suma = num1 + num2;\n        double resta = num1 - num2;\n        double multiplicacion = num1 * num2;\n        double division = num1 / num2;\n\n        // Mostrar resultados\n        System.out.printf(\"Suma: %.2f%n\", suma);\n        System.out.printf(\"Resta: %.2f%n\", resta);\n        System.out.printf(\"Multiplicaci\u00f3n: %.2f%n\", multiplicacion);\n\n        // Verificar divisi\u00f3n por cero\n        if (num2 != 0) {\n            System.out.printf(\"Divisi\u00f3n: %.2f%n\", division);\n        } else {\n            System.out.println(\"No se puede dividir por cero\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_3","title":"Explicaci\u00f3n","text":"<ul> <li>Implementamos las cuatro operaciones aritm\u00e9ticas b\u00e1sicas.</li> <li>Utilizamos el operador de divisi\u00f3n (/) con verificaci\u00f3n de divisi\u00f3n por cero.</li> <li>Aplicamos formato de salida con printf para mostrar dos decimales.</li> </ul>"},{"location":"content/p5/#ejercicio-5-calculadora-de-imc","title":"Ejercicio 5: Calculadora de IMC","text":""},{"location":"content/p5/#descripcion_4","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule el \u00cdndice de Masa Corporal (IMC) y clasifique el estado de salud seg\u00fan el resultado.</p>"},{"location":"content/p5/#solucion_4","title":"Soluci\u00f3n","text":"<pre><code>public class CalculadoraIMC {\n    public static void main(String[] args) {\n        // Datos de entrada\n        double peso = 70.5;    // en kilogramos\n        double altura = 1.75;   // en metros\n\n        // C\u00e1lculo del IMC\n        double imc = peso / (altura * altura);\n\n        // Mostrar IMC\n        System.out.printf(\"Su IMC es: %.1f%n\", imc);\n\n        // Clasificar estado de salud\n        if (imc &lt; 18.5) {\n            System.out.println(\"Bajo peso\");\n        } else if (imc &lt; 25) {\n            System.out.println(\"Peso normal\");\n        } else if (imc &lt; 30) {\n            System.out.println(\"Sobrepeso\");\n        } else {\n            System.out.println(\"Obesidad\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_4","title":"Explicaci\u00f3n","text":"<ul> <li>Calculamos el IMC usando la f\u00f3rmula peso/(altura\u00b2).</li> <li>Utilizamos estructura if-else if para clasificar el estado de salud.</li> <li>Aplicamos formato de salida para mostrar un decimal.</li> </ul>"},{"location":"content/p5/#ejercicio-6-conversor-de-moneda","title":"Ejercicio 6: Conversor de Moneda","text":""},{"location":"content/p5/#descripcion_5","title":"Descripci\u00f3n","text":"<p>Crear un programa que convierta entre diferentes monedas (USD, EUR, COP) utilizando tasas de cambio fijas.</p>"},{"location":"content/p5/#solucion_5","title":"Soluci\u00f3n","text":"<pre><code>public class ConversorMoneda {\n    public static void main(String[] args) {\n        // Tasas de cambio fijas\n        double usdToEur = 0.85;\n        double usdToCop = 4000.0;\n\n        // Cantidad a convertir\n        double cantidadUsd = 100.0;\n\n        // Realizar conversiones\n        double cantidadEur = cantidadUsd * usdToEur;\n        double cantidadCop = cantidadUsd * usdToCop;\n\n        // Mostrar resultados\n        System.out.printf(\"%.2f USD equivale a:%n\", cantidadUsd);\n        System.out.printf(\"EUR: %.2f%n\", cantidadEur);\n        System.out.printf(\"COP: %.0f%n\", cantidadCop);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_5","title":"Explicaci\u00f3n","text":"<ul> <li>Definimos tasas de cambio como constantes.</li> <li>Realizamos conversiones usando operadores de multiplicaci\u00f3n.</li> <li>Utilizamos diferentes formatos de salida seg\u00fan la moneda.</li> </ul>"},{"location":"content/p5/#ejercicio-7-calculadora-de-interes-simple","title":"Ejercicio 7: Calculadora de Inter\u00e9s Simple","text":""},{"location":"content/p5/#descripcion_6","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule el inter\u00e9s simple de un pr\u00e9stamo basado en el capital, la tasa de inter\u00e9s y el tiempo.</p>"},{"location":"content/p5/#solucion_6","title":"Soluci\u00f3n","text":"<pre><code>public class CalculadoraInteres {\n    public static void main(String[] args) {\n        // Datos del pr\u00e9stamo\n        double capital = 1000000;    // Capital inicial\n        double tasaAnual = 0.12;     // 12% anual\n        int tiempo = 2;              // a\u00f1os\n\n        // C\u00e1lculo del inter\u00e9s simple\n        double interes = capital * tasaAnual * tiempo;\n        double montoTotal = capital + interes;\n\n        // Mostrar resultados\n        System.out.printf(\"Capital inicial: $%.2f%n\", capital);\n        System.out.printf(\"Inter\u00e9s generado: $%.2f%n\", interes);\n        System.out.printf(\"Monto total: $%.2f%n\", montoTotal);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_6","title":"Explicaci\u00f3n","text":"<ul> <li>Aplicamos la f\u00f3rmula de inter\u00e9s simple: I = C * r * t</li> <li>Utilizamos variables de tipo double para manejar decimales.</li> <li>Mostramos los resultados con formato monetario.</li> </ul>"},{"location":"content/p5/#ejercicio-8-conversor-de-tiempo","title":"Ejercicio 8: Conversor de Tiempo","text":""},{"location":"content/p5/#descripcion_7","title":"Descripci\u00f3n","text":"<p>Crear un programa que convierta una cantidad de segundos a horas, minutos y segundos.</p>"},{"location":"content/p5/#solucion_7","title":"Soluci\u00f3n","text":"<pre><code>public class ConversorTiempo {\n    public static void main(String[] args) {\n        // Cantidad de segundos a convertir\n        int segundosTotales = 3665;\n\n        // C\u00e1lculo de conversi\u00f3n\n        int horas = segundosTotales / 3600;\n        int minutos = (segundosTotales % 3600) / 60;\n        int segundos = segundosTotales % 60;\n\n        // Mostrar resultado\n        System.out.printf(\"%d segundos equivalen a:%n\", segundosTotales);\n        System.out.printf(\"%d horas, %d minutos y %d segundos%n\", \n                         horas, minutos, segundos);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_7","title":"Explicaci\u00f3n","text":"<ul> <li>Utilizamos el operador de divisi\u00f3n (/) para obtener las horas y minutos.</li> <li>Aplicamos el operador m\u00f3dulo (%) para obtener los restos.</li> <li>Usamos variables de tipo int ya que trabajamos con n\u00fameros enteros.</li> </ul>"},{"location":"content/p5/#ejercicio-9-calculadora-de-impuestos","title":"Ejercicio 9: Calculadora de Impuestos","text":""},{"location":"content/p5/#descripcion_8","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule el impuesto a pagar seg\u00fan el monto de la compra, con diferentes tasas seg\u00fan el valor.</p>"},{"location":"content/p5/#solucion_8","title":"Soluci\u00f3n","text":"<pre><code>public class CalculadoraImpuestos {\n    public static void main(String[] args) {\n        // Monto de la compra\n        double montoCompra = 250000;\n        double tasaImpuesto;\n\n        // Determinar tasa de impuesto\n        if (montoCompra &lt;= 100000) {\n            tasaImpuesto = 0.10;  // 10%\n        } else if (montoCompra &lt;= 500000) {\n            tasaImpuesto = 0.15;  // 15%\n        } else {\n            tasaImpuesto = 0.19;  // 19%\n        }\n\n        // Calcular impuesto y total\n        double impuesto = montoCompra * tasaImpuesto;\n        double total = montoCompra + impuesto;\n\n        // Mostrar resultados\n        System.out.printf(\"Monto de compra: $%.2f%n\", montoCompra);\n        System.out.printf(\"Tasa de impuesto: %.1f%%%n\", tasaImpuesto * 100);\n        System.out.printf(\"Impuesto: $%.2f%n\", impuesto);\n        System.out.printf(\"Total a pagar: $%.2f%n\", total);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_8","title":"Explicaci\u00f3n","text":"<ul> <li>Implementamos diferentes tasas de impuesto seg\u00fan el monto.</li> <li>Utilizamos estructura if-else if para determinar la tasa aplicable.</li> <li>Calculamos el impuesto y el total a pagar.</li> </ul>"},{"location":"content/p5/#ejercicio-10-sistema-de-calificacion-ponderada","title":"Ejercicio 10: Sistema de Calificaci\u00f3n Ponderada","text":""},{"location":"content/p5/#descripcion_9","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule la nota final de un estudiante basado en diferentes evaluaciones con distintos pesos.</p>"},{"location":"content/p5/#solucion_9","title":"Soluci\u00f3n","text":"<pre><code>public class CalificacionPonderada {\n    public static void main(String[] args) {\n        // Notas y pesos\n        double examen1 = 4.2;     // 30%\n        double examen2 = 3.8;     // 30%\n        double proyecto = 4.5;     // 25%\n        double tareas = 3.9;      // 15%\n\n        // C\u00e1lculo de nota final\n        double notaFinal = (examen1 * 0.30) + \n                          (examen2 * 0.30) + \n                          (proyecto * 0.25) + \n                          (tareas * 0.15);\n\n        // Mostrar resultados\n        System.out.printf(\"Nota Final: %.2f%n\", notaFinal);\n\n        // Determinar estado\n        if (notaFinal &gt;= 4.5) {\n            System.out.println(\"Excelente\");\n        } else if (notaFinal &gt;= 4.0) {\n            System.out.println(\"Muy Bueno\");\n        } else if (notaFinal &gt;= 3.0) {\n            System.out.println(\"Aprobado\");\n        } else {\n            System.out.println(\"Reprobado\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_9","title":"Explicaci\u00f3n","text":"<ul> <li>Aplicamos pesos diferentes a cada evaluaci\u00f3n.</li> <li>Calculamos la nota final usando operadores aritm\u00e9ticos.</li> <li>Implementamos una clasificaci\u00f3n del rendimiento.</li> </ul>"},{"location":"content/p5/#ejercicio-11-validador-de-contrasena-simple","title":"Ejercicio 11: Validador de Contrase\u00f1a Simple","text":""},{"location":"content/p5/#descripcion_10","title":"Descripci\u00f3n","text":"<p>Crear un programa que valide si una contrase\u00f1a cumple con un criterio espec\u00edfico sin usar bucles.</p>"},{"location":"content/p5/#codigo","title":"C\u00f3digo","text":"<pre><code>public class ValidadorContrasena {\n    public static void main(String[] args) {\n        // Contrase\u00f1a a validar\n        String password = \"Abc12345\";\n\n        // Validar criterios usando m\u00e9todos de String\n        boolean tieneMinuscula = !password.equals(password.toUpperCase());\n        boolean tieneMayuscula = !password.equals(password.toLowerCase());\n        boolean tieneNumero = password.matches(\".*\\\\d.*\");\n\n        // Validar todos los criterios\n        boolean esValida = password.length() &gt;= 8 &amp;&amp;\n                          tieneMinuscula &amp;&amp;\n                          tieneMayuscula &amp;&amp;\n                          tieneNumero;\n\n        System.out.println(\"La contrase\u00f1a es v\u00e1lida: \" + esValida);\n    }\n}\n</code></pre>"},{"location":"content/p5/#ejercicio-12-calculadora-de-descuentos-por-membresia","title":"Ejercicio 12: Calculadora de Descuentos por Membres\u00eda","text":""},{"location":"content/p5/#descripcion_11","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule descuentos en una tienda basados en el nivel de membres\u00eda del cliente y el monto de la compra.</p>"},{"location":"content/p5/#codigo_1","title":"C\u00f3digo","text":"<pre><code>public class CalculadoraDescuentosMembres\u00eda {\n    public static void main(String[] args) {\n        // Datos de entrada\n        String nivelMembresia = \"GOLD\";  // BASIC, SILVER, GOLD, PLATINUM\n        double montoCompra = 250.0;\n        boolean esFestivo = true;\n\n        // Calcular descuento base por membres\u00eda\n        double descuentoBase;\n        switch (nivelMembresia) {\n            case \"PLATINUM\": descuentoBase = 0.20; break;\n            case \"GOLD\": descuentoBase = 0.15; break;\n            case \"SILVER\": descuentoBase = 0.10; break;\n            default: descuentoBase = 0.05;\n        }\n\n        // Ajustar descuento por monto de compra\n        double descuentoAdicional = 0.0;\n        if (montoCompra &gt;= 500.0) {\n            descuentoAdicional = 0.05;\n        } else if (montoCompra &gt;= 200.0) {\n            descuentoAdicional = 0.02;\n        }\n\n        // Descuento especial en festivos\n        double descuentoFestivo = esFestivo ? 0.05 : 0.0;\n\n        // Calcular descuento total y precio final\n        double descuentoTotal = descuentoBase + descuentoAdicional + descuentoFestivo;\n        double montoDescuento = montoCompra * descuentoTotal;\n        double precioFinal = montoCompra - montoDescuento;\n\n        // Mostrar resultados\n        System.out.printf(\"Nivel de Membres\u00eda: %s%n\", nivelMembresia);\n        System.out.printf(\"Monto de Compra: $%.2f%n\", montoCompra);\n        System.out.printf(\"Descuento Total: %.1f%%%n\", descuentoTotal * 100);\n        System.out.printf(\"Monto Descuento: $%.2f%n\", montoDescuento);\n        System.out.printf(\"Precio Final: $%.2f%n\", precioFinal);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_10","title":"Explicaci\u00f3n","text":"<ul> <li>Implementamos un sistema de descuentos multinivel usando switch y condicionales.</li> <li>Calculamos descuentos basados en membres\u00eda, monto de compra y d\u00edas festivos.</li> <li>Utilizamos el operador ternario para el descuento en festivos.</li> <li>Aplicamos formato de salida para mostrar valores monetarios y porcentajes.</li> </ul>"},{"location":"content/p5/#ejercicio-13-analizador-de-texto-simple","title":"Ejercicio 13: Analizador de Texto Simple","text":""},{"location":"content/p5/#descripcion_12","title":"Descripci\u00f3n","text":"<p>Crear un programa que analice caracter\u00edsticas b\u00e1sicas de un texto sin usar bucles.</p>"},{"location":"content/p5/#codigo_2","title":"C\u00f3digo","text":"<pre><code>public class AnalizadorTextoSimple {\n    public static void main(String[] args) {\n        String texto = \"Hola Mundo\";\n\n        // An\u00e1lisis simple usando m\u00e9todos de String\n        int longitud = texto.length();\n        int espacios = texto.length() - texto.replace(\" \", \"\").length();\n        int vocales = texto.toLowerCase().replaceAll(\"[^aeiou]\", \"\").length();\n        int consonantes = texto.toLowerCase().replaceAll(\"[^a-z]\", \"\").length() - vocales;\n\n        System.out.println(\"An\u00e1lisis de texto: '\" + texto + \"'\");\n        System.out.println(\"Longitud: \" + longitud);\n        System.out.println(\"Espacios: \" + espacios);\n        System.out.println(\"Vocales: \" + vocales);\n        System.out.println(\"Consonantes: \" + consonantes);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_11","title":"Explicaci\u00f3n","text":"<ul> <li>Procesamos texto car\u00e1cter por car\u00e1cter.</li> <li>Utilizamos m\u00e9todos de Character para clasificaci\u00f3n.</li> <li>Mantenemos contadores para diferentes tipos de caracteres.</li> </ul>"},{"location":"content/p5/#ejercicio-14-calculadora-de-propinas","title":"Ejercicio 14: Calculadora de Propinas","text":""},{"location":"content/p5/#descripcion_13","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule propinas basadas en el monto de la cuenta y el nivel de satisfacci\u00f3n.</p>"},{"location":"content/p5/#solucion_10","title":"Soluci\u00f3n","text":"<pre><code>public class CalculadoraPropinas {\n    public static void main(String[] args) {\n        double montoCuenta = 84.50;\n        int nivelSatisfaccion = 4; // 1-5\n\n        // Determinar porcentaje de propina\n        double porcentajePropina;\n        switch (nivelSatisfaccion) {\n            case 5: porcentajePropina = 0.20; break;\n            case 4: porcentajePropina = 0.15; break;\n            case 3: porcentajePropina = 0.10; break;\n            default: porcentajePropina = 0.05;\n        }\n\n        // Calcular propina y total\n        double propina = montoCuenta * porcentajePropina;\n        double total = montoCuenta + propina;\n\n        System.out.printf(\"Cuenta: $%.2f%n\", montoCuenta);\n        System.out.printf(\"Nivel de satisfacci\u00f3n: %d/5%n\", \n                        nivelSatisfaccion);\n        System.out.printf(\"Propina (%.0f%%): $%.2f%n\", \n                        porcentajePropina * 100, propina);\n        System.out.printf(\"Total: $%.2f%n\", total);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_12","title":"Explicaci\u00f3n","text":"<ul> <li>Utilizamos switch para diferentes niveles de satisfacci\u00f3n.</li> <li>Calculamos porcentajes y valores monetarios.</li> <li>Aplicamos formato de salida para mejor presentaci\u00f3n.</li> </ul>"},{"location":"content/p5/#ejercicio-15-calculadora-de-calificaciones","title":"Ejercicio 15: Calculadora de Calificaciones","text":""},{"location":"content/p5/#descripcion_14","title":"Descripci\u00f3n","text":"<p>Crear un programa que calcule la calificaci\u00f3n final de un estudiante basado en diferentes evaluaciones con pesos distintos y convierta la nota num\u00e9rica a letra seg\u00fan una escala predefinida.</p>"},{"location":"content/p5/#codigo_3","title":"C\u00f3digo","text":"<pre><code>public class CalculadoraCalificaciones {\n    public static void main(String[] args) {\n        // Notas y pesos de las evaluaciones\n        double examenParcial = 3.8;    // 30%\n        double proyectoFinal = 4.2;     // 40%\n        double participacion = 4.5;      // 15%\n        double tareas = 3.9;            // 15%\n\n        // Calcular nota final ponderada\n        double notaFinal = (examenParcial * 0.30) +\n                          (proyectoFinal * 0.40) +\n                          (participacion * 0.15) +\n                          (tareas * 0.15);\n\n        // Determinar letra seg\u00fan la escala\n        String letraCalificacion;\n        if (notaFinal &gt;= 4.5) {\n            letraCalificacion = \"A+\";\n        } else if (notaFinal &gt;= 4.0) {\n            letraCalificacion = \"A\";\n        } else if (notaFinal &gt;= 3.5) {\n            letraCalificacion = \"B\";\n        } else if (notaFinal &gt;= 3.0) {\n            letraCalificacion = \"C\";\n        } else if (notaFinal &gt;= 2.0) {\n            letraCalificacion = \"D\";\n        } else {\n            letraCalificacion = \"F\";\n        }\n\n        // Determinar estado (Aprobado/Reprobado)\n        String estado = notaFinal &gt;= 3.0 ? \"Aprobado\" : \"Reprobado\";\n\n        // Mostrar resultados\n        System.out.println(\"=== Reporte de Calificaciones ===\");\n        System.out.printf(\"Examen Parcial (30%%): %.1f%n\", examenParcial);\n        System.out.printf(\"Proyecto Final (40%%): %.1f%n\", proyectoFinal);\n        System.out.printf(\"Participaci\u00f3n (15%%): %.1f%n\", participacion);\n        System.out.printf(\"Tareas (15%%): %.1f%n\", tareas);\n        System.out.printf(\"Nota Final: %.2f%n\", notaFinal);\n        System.out.println(\"Calificaci\u00f3n en Letra: \" + letraCalificacion);\n        System.out.println(\"Estado: \" + estado);\n    }\n}\n</code></pre>"},{"location":"content/p5/#explicacion_13","title":"Explicaci\u00f3n","text":"<ul> <li>Calculamos una nota final ponderada usando diferentes pesos para cada evaluaci\u00f3n.</li> <li>Implementamos una escala de calificaci\u00f3n por letras usando condicionales.</li> <li>Utilizamos el operador ternario para determinar el estado de aprobaci\u00f3n.</li> <li>Aplicamos formato de salida para mostrar las notas con decimales apropiados.</li> </ul> <p>Estos ejercicios integran los conceptos de: - Tipos de datos y variables - Operadores aritm\u00e9ticos y de asignaci\u00f3n - Conversi\u00f3n de tipos (parsing y casting) - Estructuras de control condicional - Formato de salida - Manipulaci\u00f3n de cadenas - Operadores l\u00f3gicos - Bucles y control de flujo - Patrones y algoritmos simples</p>"},{"location":"content/p5/#actividad-de-aprendizaje-en-parejas","title":"Actividad de Aprendizaje en Parejas","text":""},{"location":"content/p5/#descripcion_15","title":"Descripci\u00f3n","text":"<p>Para reforzar la comprensi\u00f3n de los conceptos aprendidos, realizaremos una actividad de aprendizaje colaborativo en parejas.</p>"},{"location":"content/p5/#instrucciones","title":"Instrucciones","text":"<ol> <li>El docente asignar\u00e1 un ejercicio espec\u00edfico a cada pareja de estudiantes.</li> <li>Cada pareja deber\u00e1:</li> <li>Analizar detalladamente el c\u00f3digo del ejercicio asignado</li> <li>Identificar los conceptos clave utilizados</li> <li>Preparar una explicaci\u00f3n clara del funcionamiento del c\u00f3digo</li> <li>Estar listos para responder preguntas de sus compa\u00f1eros</li> <li>Durante la presentaci\u00f3n, la pareja deber\u00e1:</li> <li>Explicar el prop\u00f3sito del ejercicio</li> <li>Detallar la l\u00f3gica del c\u00f3digo paso a paso</li> <li>Destacar los conceptos de programaci\u00f3n aplicados</li> <li>Demostrar la ejecuci\u00f3n del programa</li> </ol>"},{"location":"content/p5/#objetivos","title":"Objetivos","text":"<ul> <li>Fortalecer la comprensi\u00f3n de los conceptos de programaci\u00f3n</li> <li>Desarrollar habilidades de comunicaci\u00f3n t\u00e9cnica</li> <li>Fomentar el aprendizaje colaborativo</li> <li>Practicar la explicaci\u00f3n de c\u00f3digo a otros programadores</li> </ul>"},{"location":"content/p6/","title":"Semana 6 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p6/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: https://seia-stalone.vercel.app/</p>"},{"location":"content/p6/#codigo-yfesa7v3","title":"Codigo: YFESA7V3","text":""},{"location":"content/p7/","title":"Semana 7 - Estructuras de control en Java","text":"<p>Las estructuras de control en Java son construcciones del lenguaje que permiten controlar el flujo de ejecuci\u00f3n de un programa. Los principales tipos de estructuras de control en Java son:</p> <ul> <li> <p>Estructuras de selecci\u00f3n: permiten elegir entre varias opciones. Incluyen la sentencia if, la sentencia switch.</p> </li> <li> <p>Estructuras repetitivas: permiten repetir un bloque de c\u00f3digo mientras se cumpla una condici\u00f3n. Incluyen los bucles for, while, do-- while.</p> </li> <li> <p>Estructuras de salto: permiten cambiar el flujo de ejecuci\u00f3n, saltando parte del c\u00f3digo. Incluyen las sentencias break, continue, return.</p> </li> </ul> <p>Las estructuras repetitivas, tambi\u00e9n conocidas como bucles, ciclos o iteraciones, son mecanismos de programaci\u00f3n que permiten ejecutar un bloque de c\u00f3digo varias veces, dependiendo de una condici\u00f3n espec\u00edfica. Estas estructuras son especialmente \u00fatiles cuando se necesita realizar una tarea de forma repetida o iterar sobre una colecci\u00f3n de elementos.</p> <p>Existen varios tipos de estructuras repetitivas en Java:</p>"},{"location":"content/p7/#bucle-while","title":"Bucle while:","text":"<p>Se ejecuta mientras se cumpla una condici\u00f3n booleana. La condici\u00f3n se eval\u00faa antes de ejecutar cada iteraci\u00f3n.</p> <p>Sintaxis: <pre><code>while (condici\u00f3n) {\n    // C\u00f3digo que se ejecutar\u00e1 mientras se cumpla la condici\u00f3n\n}\n</code></pre> Ejemplo: <pre><code>int i = 1;\n\nwhile (i &lt;= 10) {\n    System.out.println(i);\n    i++;\n}\n</code></pre> En este ejemplo, el bucle while imprimir\u00e1 los n\u00fameros del 1 al 10.</p>"},{"location":"content/p7/#bucle-do-while","title":"Bucle do-while:","text":"<p>Similar al bucle while, pero la condici\u00f3n se eval\u00faa despu\u00e9s de ejecutar cada iteraci\u00f3n. Esto garantiza que el bloque de c\u00f3digo se ejecute al menos una vez.</p> <p>Sintaxis: <pre><code>do  {\n    // C\u00f3digo que se ejecutar\u00e1 mientras se cumpla la condici\u00f3n\n} while (condici\u00f3n)\n</code></pre> Ejemplo: <pre><code>int i = 1;\n\ndo {\n    System.out.println(i);\n    i++;\n} while (i &lt;= 10);\n</code></pre> En este caso, el bucle do-while tambi\u00e9n imprimir\u00e1 los n\u00fameros del 1 al 10.</p>"},{"location":"content/p7/#bucle-for","title":"Bucle for:","text":"<p>Se utiliza cuando se conoce el n\u00famero exacto de iteraciones a realizar. Tiene una estructura m\u00e1s compacta y se compone de una inicializaci\u00f3n, una condici\u00f3n y una expresi\u00f3n de incremento.</p> <p>Sintaxis: <pre><code>for (inicializaci\u00f3n; condici\u00f3n; incremento) {\n    // bloque de c\u00f3digo a repetir\n}\n</code></pre> Ejemplo: <pre><code>for (int i = 1; i &lt;= 10; i++) {\n    System.out.println(i);\n}\n</code></pre> Aqu\u00ed, el bucle for imprimir\u00e1 los n\u00fameros del 1 al 10 de manera similar a los ejemplos anteriores.</p>"},{"location":"content/p7/#bucle-for-each","title":"Bucle for-each:","text":"<p>Es utilizado para iterar sobre los elementos de una colecci\u00f3n, como arreglos o listas. No se requiere un contador expl\u00edcito, ya que itera autom\u00e1ticamente sobre cada elemento.</p> <p>Sintaxis: <pre><code>for (type variableName : arrayName) {\n  // code block to be executed\n}\n</code></pre> Ejemplo: <pre><code>int[] numeros = {1, 2, 3, 4, 5};\n\nfor (int numero : numeros) {\n    System.out.println(numero);\n}\n</code></pre></p>"},{"location":"content/p7/#ejemplos-de-estructuras-repetitivas","title":"Ejemplos de estructuras repetitivas:","text":""},{"location":"content/p7/#while","title":"while","text":""},{"location":"content/p7/#1-calcular-la-suma-de-los-numeros-enteros-del-1-al-100","title":"1. Calcular la suma de los n\u00fameros enteros del 1 al 100:","text":"<pre><code>public class SumaNumeros {\n    public static void main(String[] args) {\n        int i = 1;\n        int suma = 0;\n\n        while (i &lt;= 100) {\n            suma += i;\n            i++;\n        }\n\n        System.out.println(\"La suma de los n\u00fameros del 1 al 100 es: \" + suma);\n    }\n}\n</code></pre>"},{"location":"content/p7/#2-pedir-al-usuario-que-ingrese-un-numero-y-verificar-si-es-primo-o-no","title":"2. Pedir al usuario que ingrese un n\u00famero y verificar si es primo o no:","text":"<pre><code>import java.util.Scanner;\n\npublic class VerificarPrimo {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Ingrese un n\u00famero: \");\n        int numero = sc.nextInt();\n\n        int i = 2;\n        boolean esPrimo = true;\n\n        while (i &lt;= numero / 2) {\n            if (numero % i == 0) {\n                esPrimo = false;\n                break;\n            }\n            i++;\n        }\n\n        if (esPrimo) {\n            System.out.println(numero + \" es un n\u00famero primo.\");\n        } else {\n            System.out.println(numero + \" no es un n\u00famero primo.\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p7/#3-pedir-al-usuario-que-ingrese-una-cadena-de-caracteres-y-contar-la-cantidad-de-vocales-que-contiene","title":"3. Pedir al usuario que ingrese una cadena de caracteres y contar la cantidad de vocales que contiene:","text":"<pre><code>import java.util.Scanner;\n\npublic class ContarVocales {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Ingrese una cadena de caracteres: \");\n        String cadena = sc.nextLine();\n\n        int i = 0;\n        int contadorVocales = 0;\n\n        while (i &lt; cadena.length()) {\n            char caracter = cadena.charAt(i);\n            if (caracter == 'a' || caracter == 'e' || caracter == 'i' || caracter == 'o' || caracter == 'u' ||\n                caracter == 'A' || caracter == 'E' || caracter == 'I' || caracter == 'O' || caracter == 'U') {\n                contadorVocales++;\n            }\n            i++;\n        }\n\n        System.out.println(\"La cadena ingresada contiene \" + contadorVocales + \" vocales.\");\n    }\n}\n</code></pre>"},{"location":"content/p7/#do-while","title":"do while","text":""},{"location":"content/p7/#1-adivina-el-numero","title":"1. Adivina el n\u00famero:","text":"<pre><code>import java.util.Scanner;\n\npublic class AdivinaNumero {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int numeroSecreto = 42;\n        int intento;\n\n        do {\n            System.out.print(\"Adivina el n\u00famero secreto: \");\n            intento = scanner.nextInt();\n\n            if (intento == numeroSecreto) {\n                System.out.println(\"\u00a1Felicidades! Adivinaste el n\u00famero.\");\n            } else {\n                System.out.println(\"Intenta nuevamente.\");\n            }\n        } while (intento != numeroSecreto);\n    }\n}\n</code></pre>"},{"location":"content/p7/#2-suma-de-numeros","title":"2. Suma de n\u00fameros:","text":"<pre><code>import java.util.Scanner;\n\npublic class SumaNumeros {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int suma = 0;\n        int numero;\n\n        do {\n            System.out.print(\"Ingresa un n\u00famero (0 para terminar): \");\n            numero = scanner.nextInt();\n\n            suma += numero;\n        } while (numero != 0);\n\n        System.out.println(\"La suma de los n\u00fameros ingresados es: \" + suma);\n    }\n}\n</code></pre>"},{"location":"content/p7/#3-menu-de-opciones","title":"3. Men\u00fa de opciones:","text":"<pre><code>import java.util.Scanner;\n\npublic class MenuOpciones {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int opcion;\n\n        do {\n            System.out.println(\"Menu:\");\n            System.out.println(\"1. Opci\u00f3n 1\");\n            System.out.println(\"2. Opci\u00f3n 2\");\n            System.out.println(\"3. Salir\");\n            System.out.print(\"Selecciona una opci\u00f3n: \");\n            opcion = scanner.nextInt();\n\n            switch (opcion) {\n                case 1:\n                    System.out.println(\"Seleccionaste la opci\u00f3n 1.\");\n                    break;\n                case 2:\n                    System.out.println(\"Seleccionaste la opci\u00f3n 2.\");\n                    break;\n                case 3:\n                    System.out.println(\"Saliendo del programa...\");\n                    break;\n                default:\n                    System.out.println(\"Opci\u00f3n inv\u00e1lida. Intenta nuevamente.\");\n            }\n        } while (opcion != 3);\n    }\n}\n</code></pre>"},{"location":"content/p7/#for","title":"for","text":""},{"location":"content/p7/#1-impresion-de-numeros-pares","title":"1. Impresi\u00f3n de n\u00fameros pares:","text":"<pre><code>public class NumerosPares {\n    public static void main(String[] args) {\n        for (int i = 2; i &lt;= 10; i += 2) {\n            System.out.println(i);\n        }\n    }\n}\n</code></pre>"},{"location":"content/p7/#2-calculo-del-factorial","title":"2. C\u00e1lculo del factorial:","text":"<pre><code>import java.util.Scanner;\n\npublic class Factorial {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Ingresa un n\u00famero: \");\n        int numero = scanner.nextInt();\n        int factorial = 1;\n\n        for (int i = 1; i &lt;= numero; i++) {\n            factorial *= i;\n        }\n\n        System.out.println(\"El factorial de \" + numero + \" es: \" + factorial);\n    }\n}\n</code></pre>"},{"location":"content/p7/#3-suma-de-elementos-de-un-arreglo","title":"3. Suma de elementos de un arreglo:","text":"<pre><code>public class SumaArreglo {\n    public static void main(String[] args) {\n        int[] numeros = {5, 8, 3, 2, 9};\n        int suma = 0;\n\n        for (int numero : numeros) {\n            suma += numero;\n        }\n\n        System.out.println(\"La suma de los elementos del arreglo es: \" + suma);\n    }\n}\n</code></pre>"},{"location":"content/p7/#for-each","title":"for-each","text":""},{"location":"content/p7/#1-suma-de-elementos-en-un-arreglo","title":"1. Suma de elementos en un arreglo","text":"<pre><code>public class SumaArreglo {\n    public static void main(String[] args) {\n        int[] numeros = { 10, 20, 30, 40, 50 };\n        int suma = 0;\n\n        for (int numero : numeros) {\n            suma += numero;\n        }\n\n        System.out.println(\"La suma de los elementos del arreglo es: \" + suma);\n    }\n}\n</code></pre>"},{"location":"content/p7/#2-imprimir-elementos-de-una-lista-de-cadenas","title":"2. Imprimir elementos de una lista de cadenas","text":"<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class ImprimirLista {\n    public static void main(String[] args) {\n        List&lt;String&gt; palabras = new ArrayList&lt;&gt;();\n        palabras.add(\"Hola\");\n        palabras.add(\"Mundo\");\n        palabras.add(\"en\");\n        palabras.add(\"Java\");\n\n        for (String palabra : palabras) {\n            System.out.println(palabra);\n        }\n    }\n}\n</code></pre>"},{"location":"content/p7/#3-calificaciones-y-promedio-de-un-estudiante","title":"3. Calificaciones y promedio de un estudiante","text":"<pre><code>public class PromedioCalificaciones {\n    public static void main(String[] args) {\n        double[] calificaciones = { 85.5, 90.0, 78.5, 95.5, 88.0 };\n        double suma = 0;\n\n        for (double calificacion : calificaciones) {\n            suma += calificacion;\n        }\n\n        double promedio = suma / calificaciones.length;\n        System.out.println(\"El promedio de calificaciones es: \" + promedio);\n    }\n}\n</code></pre>"},{"location":"content/p7/#break-y-continue-en-ciclos-en-java","title":"Break y Continue en Ciclos en Java","text":"<p>Break y Continue son palabras clave que se utilizan dentro de los ciclos (bucles) en Java para controlar su flujo de ejecuci\u00f3n.</p> <p>1. Break:</p> <ul> <li>Funci\u00f3n: Interrumpe completamente la ejecuci\u00f3n del ciclo actual, es decir, el ciclo se termina de forma prematura.</li> <li>Uso: Se utiliza cuando se quiere salir del ciclo inmediatamente, por ejemplo, cuando se encuentra la condici\u00f3n deseada.</li> </ul> <p>Ejemplo:</p> <pre><code>for (int i = 0; i &lt; 10; i++) {\n  if (i == 5) {\n    break; // Sale del ciclo cuando i es 5\n  }\n  System.out.println(i);\n}\n</code></pre> <p>En este ejemplo, el ciclo imprime los n\u00fameros del 0 al 4, ya que <code>break</code> interrumpe el ciclo cuando <code>i</code> alcanza el valor 5.</p> <p>2. Continue:</p> <ul> <li>Funci\u00f3n: Salta a la siguiente iteraci\u00f3n del ciclo actual, es decir, ignora el resto del c\u00f3digo dentro del ciclo para la iteraci\u00f3n actual.</li> <li>Uso: Se utiliza cuando se quiere omitir una iteraci\u00f3n espec\u00edfica del ciclo, por ejemplo, cuando se encuentra una condici\u00f3n que no se quiere procesar.</li> </ul> <p>Ejemplo:</p> <pre><code>for (int i = 0; i &lt; 10; i++) {\n  if (i % 2 == 0) {\n    continue; // Salta la iteraci\u00f3n si i es par\n  }\n  System.out.println(i);\n}\n</code></pre> <p>En este ejemplo, el ciclo imprime solo los n\u00fameros impares del 0 al 9, ya que <code>continue</code> salta las iteraciones donde <code>i</code> es par.</p> <p>Diferencias clave entre Break y Continue:</p> Caracter\u00edstica Break Continue Acci\u00f3n Termina el ciclo completamente Salta a la siguiente iteraci\u00f3n Iteraciones restantes Ninguna S\u00ed C\u00f3digo omitido Todo el c\u00f3digo restante del ciclo El c\u00f3digo restante de la iteraci\u00f3n actual <p>Ejemplo combinando Break y Continue:</p> <pre><code>for (int i = 0; i &lt; 10; i++) {\n  if (i == 3) {\n    break; // Sale del ciclo si i es 3\n  }\n  if (i % 2 == 0) {\n    continue; // Salta la iteraci\u00f3n si i es par\n  }\n  System.out.println(i);\n}\n</code></pre> <p>Este ejemplo imprime los n\u00fameros 1, 3, 5 y 7, ya que <code>continue</code> salta las iteraciones donde <code>i</code> es par, y <code>break</code> termina el ciclo cuando <code>i</code> es 3.</p>"},{"location":"content/p7/#ejemplos-con-while-usando-break-y-continue","title":"Ejemplos con While usando Break y Continue","text":"<p>Aqu\u00ed tienes algunos ejemplos de c\u00f3mo usar <code>break</code> y <code>continue</code> dentro de ciclos <code>while</code> en Java:</p> <p>1. Break en While:</p> <pre><code>int i = 0;\nwhile (true) {\n  System.out.println(i);\n  i++;\n  if (i == 5) {\n    break; // Termina el ciclo cuando i es 5\n  }\n}\n</code></pre> <p>En este ejemplo, el ciclo <code>while</code> se ejecuta indefinidamente (<code>true</code>) hasta que <code>i</code> alcanza el valor 5, en cuyo momento <code>break</code> termina el ciclo.</p> <p>2. Continue en While:</p> <pre><code>int i = 0;\nwhile (i &lt; 10) {\n  if (i % 2 == 0) {\n    continue; // Salta la iteraci\u00f3n si i es par\n  }\n  System.out.println(i);\n  i++;\n}\n</code></pre> <p>Este ejemplo imprime solo los n\u00fameros impares del 0 al 9. <code>continue</code> salta las iteraciones donde <code>i</code> es par, evitando que se ejecute <code>System.out.println(i)</code>.</p> <p>3. Break y Continue combinados:</p> <pre><code>int i = 0;\nwhile (i &lt; 10) {\n  if (i == 3) {\n    break; // Sale del ciclo si i es 3\n  }\n  if (i % 2 == 0) {\n    continue; // Salta la iteraci\u00f3n si i es par\n  }\n  System.out.println(i);\n  i++;\n}\n</code></pre> <p>En este ejemplo, el ciclo imprime los n\u00fameros 1, 3, 5 y 7. <code>continue</code> salta las iteraciones donde <code>i</code> es par, y <code>break</code> termina el ciclo cuando <code>i</code> es 3.</p> <p>4.  Ejemplo pr\u00e1ctico: Buscar un elemento en un arreglo:</p> <pre><code>int[] numbers = {1, 4, 7, 2, 9, 6};\nint target = 7;\nint i = 0;\n\nwhile (i &lt; numbers.length) {\n  if (numbers[i] == target) {\n    System.out.println(\"El n\u00famero \" + target + \" se encontr\u00f3 en la posici\u00f3n \" + i);\n    break; // Termina el ciclo si se encuentra el n\u00famero\n  }\n  i++;\n}\n\nif (i == numbers.length) {\n  System.out.println(\"El n\u00famero \" + target + \" no se encontr\u00f3 en el arreglo.\");\n}\n</code></pre> <p>Este ejemplo busca el n\u00famero <code>target</code> (7) en el arreglo <code>numbers</code>. Si se encuentra, se imprime la posici\u00f3n y el ciclo se termina con <code>break</code>. Si no se encuentra, se imprime un mensaje indicando que no est\u00e1 en el arreglo.</p>"},{"location":"content/p7/#actividad-lista-de-compras-con-arraylist-y-breakcontinue","title":"Actividad: Lista de Compras con ArrayList y Break/Continue","text":"<p>Objetivo: Crear un programa que simule una lista de compras usando ArrayList con las siguientes funcionalidades:</p> <ul> <li>Agregar art\u00edculos: El programa debe permitir al usuario agregar art\u00edculos a la lista.</li> <li>Eliminar art\u00edculos: El programa debe permitir al usuario eliminar art\u00edculos de la lista.</li> <li>Mostrar lista: El programa debe mostrar los art\u00edculos de la lista.</li> <li>Finalizar compra: El programa debe permitir al usuario terminar la compra.</li> </ul> <p>Pasos:</p> <ol> <li>Crea un nuevo proyecto Java:.</li> <li>Importa la clase <code>ArrayList</code>: <pre><code>import java.util.ArrayList;\n</code></pre></li> <li>Crea un ArrayList para almacenar la lista de compras: <pre><code>ArrayList&lt;String&gt; listaCompras = new ArrayList&lt;&gt;(); \n</code></pre> Pista: Puedes usar un <code>ArrayList</code> de tipo <code>String</code> para almacenar los nombres de los art\u00edculos.</li> <li>Implementa un ciclo <code>while</code> infinito: Este ciclo ejecutar\u00e1 el programa hasta que el usuario decida finalizar la compra.     <pre><code>while (true) {\n    // Dentro del ciclo, implementa el men\u00fa de opciones\n}\n</code></pre></li> <li>Implementa el men\u00fa de opciones: Dentro del ciclo <code>while</code>, muestra las opciones al usuario:     <pre><code>System.out.println(\"Opciones:\");\nSystem.out.println(\"1. Agregar art\u00edculo\");\nSystem.out.println(\"2. Eliminar art\u00edculo\");\nSystem.out.println(\"3. Mostrar lista\");\nSystem.out.println(\"4. Finalizar compra\");\nSystem.out.print(\"Seleccione una opci\u00f3n: \");\n</code></pre></li> <li>Lee la opci\u00f3n del usuario: Usa <code>Scanner</code> para leer la opci\u00f3n del usuario.     <pre><code>Scanner scanner = new Scanner(System.in);\nint opcion = scanner.nextInt();\n</code></pre> Pista:  Usa <code>Scanner.nextInt()</code> para leer un n\u00famero entero.</li> <li>Implementa la opci\u00f3n \"Agregar art\u00edculo\":<ul> <li>Si el usuario selecciona la opci\u00f3n 1, pide el nombre del art\u00edculo y agr\u00e9galo al <code>ArrayList</code> <code>listaCompras</code>. <pre><code>if (opcion == 1) {\n    System.out.print(\"Ingrese el nombre del art\u00edculo: \");\n    String articulo = scanner.next();\n    listaCompras.add(articulo);\n}\n</code></pre></li> </ul> </li> <li>Implementa la opci\u00f3n \"Eliminar art\u00edculo\":<ul> <li>Si el usuario selecciona la opci\u00f3n 2, pide el nombre del art\u00edculo a eliminar.</li> <li>Implementa un ciclo <code>for</code> para iterar sobre la lista de compras.</li> <li>Si se encuentra el art\u00edculo, elimina el art\u00edculo del <code>ArrayList</code>.</li> <li>Usa <code>continue</code> para saltar a la siguiente iteraci\u00f3n del ciclo <code>for</code>. <pre><code>if (opcion == 2) {\n    System.out.print(\"Ingrese el nombre del art\u00edculo a eliminar: \");\n    String articuloEliminar = scanner.next();\n    for (int i = 0; i &lt; listaCompras.size(); i++) {\n        if (listaCompras.get(i).equals(articuloEliminar)) {\n            listaCompras.remove(i);\n            System.out.println(\"Art\u00edculo eliminado.\");\n            continue;\n        }\n    }\n    System.out.println(\"Art\u00edculo no encontrado.\");\n}\n</code></pre></li> </ul> </li> <li>Implementa la opci\u00f3n \"Mostrar lista\":<ul> <li>Si el usuario selecciona la opci\u00f3n 3, imprime la lista de compras.</li> <li>Implementa un ciclo <code>for</code> para iterar sobre la lista de compras.</li> <li>Imprime cada art\u00edculo. <pre><code>if (opcion == 3) {\n    System.out.println(\"Lista de compras:\");\n    for (int i = 0; i &lt; listaCompras.size(); i++) {\n        System.out.println(listaCompras.get(i));\n    }\n}\n</code></pre></li> </ul> </li> <li>Implementa la opci\u00f3n \"Finalizar compra\":<ul> <li>Si el usuario selecciona la opci\u00f3n 4, usa <code>break</code> para salir del ciclo <code>while</code>. <pre><code>if (opcion == 4) {\n    System.out.println(\"Gracias por su compra!\");\n    break;\n}\n</code></pre></li> </ul> </li> </ol> <p>C\u00f3digo final:</p> <pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class ListaCompras {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; listaCompras = new ArrayList&lt;&gt;();\n\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            System.out.println(\"-----------------------------------\");\n            System.out.println(\"Opciones:\");\n            System.out.println(\"1. Agregar art\u00edculo\");\n            System.out.println(\"2. Eliminar art\u00edculo\");\n            System.out.println(\"3. Mostrar lista\");\n            System.out.println(\"4. Finalizar compra\");\n            System.out.print(\"Seleccione una opci\u00f3n: \");\n            int opcion = scanner.nextInt();\n\n            if (opcion == 1) {\n                System.out.print(\"Ingrese el nombre del art\u00edculo: \");\n                String articulo = scanner.next();\n                listaCompras.add(articulo);\n            } else if (opcion == 2) {\n                System.out.print(\"Ingrese el nombre del art\u00edculo a eliminar: \");\n                String articuloEliminar = scanner.next();\n                for (int i = 0; i &lt; listaCompras.size(); i++) {\n                    if (listaCompras.get(i).equals(articuloEliminar)) {\n                        listaCompras.remove(i);\n                        System.out.println(\"Art\u00edculo eliminado.\");\n                        continue;\n                    }\n                }\n                System.out.println(\"Art\u00edculo no encontrado.\");\n            } else if (opcion == 3) {\n                System.out.println(\"Lista de compras:\");\n                for (int i = 0; i &lt; listaCompras.size(); i++) {\n                    System.out.println(listaCompras.get(i));\n                }\n            } else if (opcion == 4) {\n                System.out.println(\"Gracias por su compra!\");\n                break;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"content/p8/","title":"Semana 8 - Ejercicios de L\u00f3gica de Programaci\u00f3n en Java","text":""},{"location":"content/p8/#ejercicio-1-calculadora-de-descuentos-en-tienda","title":"Ejercicio 1: Calculadora de Descuentos en Tienda","text":"<p>\u00c1rea de Aplicaci\u00f3n: Finanzas/Comercio</p> <p>Una tienda en Medell\u00edn ofrece descuentos por volumen de compra. Si el cliente compra m\u00e1s de 5 productos, obtiene un 10% de descuento. Si compra m\u00e1s de 10 productos, obtiene un 15% de descuento. Si compra m\u00e1s de 20 productos, obtiene un 20% de descuento. Adem\u00e1s, si el total de la compra supera los $100,000 pesos, obtiene un descuento adicional del 5%. Calcula el precio final que debe pagar un cliente.</p>"},{"location":"content/p8/#ejercicio-2-sistema-de-calificacion-crediticia","title":"Ejercicio 2: Sistema de Calificaci\u00f3n Crediticia","text":"<p>\u00c1rea de Aplicaci\u00f3n: Finanzas/Bancario</p> <p>Un banco en Bogot\u00e1 necesita evaluar si puede otorgar un cr\u00e9dito a un cliente. Los criterios son: ingresos mensuales m\u00ednimos de $2,000,000, edad entre 18 y 65 a\u00f1os, y que los gastos mensuales no superen el 70% de los ingresos. Si cumple todos los criterios, calcular el monto m\u00e1ximo del cr\u00e9dito (5 veces los ingresos mensuales).</p>"},{"location":"content/p8/#ejercicio-3-control-de-inventario-de-mercado","title":"Ejercicio 3: Control de Inventario de Mercado","text":"<p>\u00c1rea de Aplicaci\u00f3n: Comercio/Log\u00edstica</p> <p>Un mercado en Cartagena necesita controlar su inventario de frutas. Cada d\u00eda se venden diferentes cantidades y llegan nuevos productos. Si el inventario de alguna fruta baja de 10 unidades, se debe hacer un pedido de 50 unidades. Simula una semana de ventas y reposici\u00f3n.</p>"},{"location":"content/p8/#ejercicio-4-calculadora-de-tiempo-de-viaje-en-transporte-publico","title":"Ejercicio 4: Calculadora de Tiempo de Viaje en Transporte P\u00fablico","text":"<p>\u00c1rea de Aplicaci\u00f3n: Transporte/Log\u00edstica</p> <p>Una persona en Medell\u00edn necesita calcular el tiempo total de viaje usando diferentes medios de transporte p\u00fablico. Debe tomar un bus (20 minutos), luego el metro (15 minutos), y finalmente caminar (10 minutos). Si hay tr\u00e1fico pesado, el tiempo del bus se incrementa en 50%. Si llueve, el tiempo de caminar se incrementa en 100%.</p>"},{"location":"content/p8/#ejercicio-5-sistema-de-gestion-de-vuelos","title":"Ejercicio 5: Sistema de Gesti\u00f3n de Vuelos","text":"<p>\u00c1rea de Aplicaci\u00f3n: Transporte/Aviaci\u00f3n</p> <p>El aeropuerto El Dorado necesita un sistema para determinar el estado de los vuelos. Un vuelo puede estar: a tiempo, retrasado (m\u00e1s de 15 minutos), o cancelado. Si hay mal clima, todos los vuelos se retrasan 30 minutos adicionales. Simula el estado de 5 vuelos en un d\u00eda con condiciones clim\u00e1ticas variables.</p>"},{"location":"content/p8/#ejercicio-6-optimizador-de-rutas-de-entrega","title":"Ejercicio 6: Optimizador de Rutas de Entrega","text":"<p>\u00c1rea de Aplicaci\u00f3n: Log\u00edstica/Distribuci\u00f3n</p> <p>Una empresa de entregas en Cali necesita optimizar las rutas de sus conductores. Cada conductor puede trabajar m\u00e1ximo 8 horas al d\u00eda. Cada entrega toma entre 30-60 minutos dependiendo de la zona (centro: 30 min, periferia: 45 min, rural: 60 min). Calcula cu\u00e1ntas entregas puede hacer un conductor en un d\u00eda.</p>"},{"location":"content/p8/#ejercicio-7-monitor-de-rutina-de-ejercicios","title":"Ejercicio 7: Monitor de Rutina de Ejercicios","text":"<p>\u00c1rea de Aplicaci\u00f3n: Salud/Deporte</p> <p>Un gimnasio en Barranquilla necesita un sistema para monitorear las rutinas de ejercicio de sus clientes. Cada ejercicio quema diferentes calor\u00edas por minuto: cardio (10 cal/min), pesas (8 cal/min), yoga (5 cal/min). Si el cliente supera 500 calor\u00edas quemadas, recibe un bono de 50 puntos. Calcula las calor\u00edas totales y puntos ganados.</p>"},{"location":"content/p8/#ejercicio-8-sistema-de-triaje-hospitalario","title":"Ejercicio 8: Sistema de Triaje Hospitalario","text":"<p>\u00c1rea de Aplicaci\u00f3n: Salud/Medicina</p> <p>Un hospital en Bucaramanga necesita clasificar pacientes seg\u00fan la urgencia de su atenci\u00f3n. Los criterios son: temperatura (&gt;38.5\u00b0C = urgente), presi\u00f3n arterial (&gt;140/90 = urgente), dolor (escala 8-10 = urgente). Clasifica a 5 pacientes en: urgente, prioritario, o normal.</p>"},{"location":"content/p8/#ejercicio-9-calculadora-de-notas-y-promedio-estudiantil","title":"Ejercicio 9: Calculadora de Notas y Promedio Estudiantil","text":"<p>\u00c1rea de Aplicaci\u00f3n: Educaci\u00f3n</p> <p>Una universidad en Manizales necesita calcular el promedio final de sus estudiantes. Las notas se distribuyen as\u00ed: 30% parciales, 40% proyecto final, 30% participaci\u00f3n. Si el promedio es \u22654.0 aprueba, si es \u22653.5 va a supletorio, si es &lt;3.5 reprueba. Calcula el resultado para 3 estudiantes.</p>"},{"location":"content/p8/#ejercicio-10-sistema-de-riego-automatico-para-cultivos","title":"Ejercicio 10: Sistema de Riego Autom\u00e1tico para Cultivos","text":"<p>\u00c1rea de Aplicaci\u00f3n: Agricultura</p> <p>Una granja en Boyac\u00e1 tiene un sistema de riego autom\u00e1tico que debe activarse seg\u00fan las condiciones del cultivo. Si la humedad del suelo es &lt;30%, se activa riego por 60 minutos. Si la temperatura es &gt;25\u00b0C y humedad &lt;50%, se activa por 30 minutos. Si llovi\u00f3 en las \u00faltimas 24 horas, no se activa el riego. Simula el sistema durante una semana.</p>"},{"location":"content/p8s/","title":"Semana 12 - Ejercicios de L\u00f3gica de Programaci\u00f3n en Java","text":""},{"location":"content/p8s/#ejercicio-1-calculadora-de-descuentos-en-tienda","title":"Ejercicio 1: Calculadora de Descuentos en Tienda","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Medell\u00edn \u00c1rea de Aplicaci\u00f3n: Finanzas/Comercio</p> <p>Una tienda en Medell\u00edn ofrece descuentos por volumen de compra. Si el cliente compra m\u00e1s de 5 productos, obtiene un 10% de descuento. Si compra m\u00e1s de 10 productos, obtiene un 15% de descuento. Si compra m\u00e1s de 20 productos, obtiene un 20% de descuento. Adem\u00e1s, si el total de la compra supera los $100,000 pesos, obtiene un descuento adicional del 5%. Calcula el precio final que debe pagar un cliente.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Datos del cliente\n        int cantidadProductos = 12;\n        double precioUnitario = 15000;\n\n        // Calcular precio base\n        double precioBase = cantidadProductos * precioUnitario;\n        double descuentoPorVolumen = 0;\n        double descuentoAdicional = 0;\n\n        // Aplicar descuento por volumen\n        if (cantidadProductos &gt; 20) {\n            descuentoPorVolumen = 0.20;\n        } else if (cantidadProductos &gt; 10) {\n            descuentoPorVolumen = 0.15;\n        } else if (cantidadProductos &gt; 5) {\n            descuentoPorVolumen = 0.10;\n        }\n\n        // Calcular precio con descuento por volumen\n        double precioConDescuento = precioBase * (1 - descuentoPorVolumen);\n\n        // Aplicar descuento adicional si supera $100,000\n        if (precioConDescuento &gt; 100000) {\n            descuentoAdicional = 0.05;\n        }\n\n        double precioFinal = precioConDescuento * (1 - descuentoAdicional);\n\n        System.out.println(\"Cantidad de productos: \" + cantidadProductos);\n        System.out.println(\"Precio unitario: $\" + precioUnitario);\n        System.out.println(\"Precio base: $\" + precioBase);\n        System.out.println(\"Descuento por volumen: \" + (descuentoPorVolumen * 100) + \"%\");\n        System.out.println(\"Descuento adicional: \" + (descuentoAdicional * 100) + \"%\");\n        System.out.println(\"Precio final a pagar: $\" + precioFinal);\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-2-sistema-de-calificacion-crediticia","title":"Ejercicio 2: Sistema de Calificaci\u00f3n Crediticia","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Bogot\u00e1 \u00c1rea de Aplicaci\u00f3n: Finanzas/Bancario</p> <p>Un banco en Bogot\u00e1 necesita evaluar si puede otorgar un cr\u00e9dito a un cliente. Los criterios son: ingresos mensuales m\u00ednimos de $2,000,000, edad entre 18 y 65 a\u00f1os, y que los gastos mensuales no superen el 70% de los ingresos. Si cumple todos los criterios, calcular el monto m\u00e1ximo del cr\u00e9dito (5 veces los ingresos mensuales).</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Datos del cliente\n        int edad = 35;\n        double ingresosMensuales = 3500000;\n        double gastosMensuales = 2000000;\n\n        boolean cumpleEdad = false;\n        boolean cumpleIngresos = false;\n        boolean cumpleGastos = false;\n\n        // Verificar criterios\n        if (edad &gt;= 18 &amp;&amp; edad &lt;= 65) {\n            cumpleEdad = true;\n        }\n\n        if (ingresosMensuales &gt;= 2000000) {\n            cumpleIngresos = true;\n        }\n\n        double porcentajeGastos = (gastosMensuales / ingresosMensuales) * 100;\n        if (porcentajeGastos &lt;= 70) {\n            cumpleGastos = true;\n        }\n\n        System.out.println(\"=== EVALUACI\u00d3N CREDITICIA ===\");\n        System.out.println(\"Edad: \" + edad + \" a\u00f1os - \" + (cumpleEdad ? \"CUMPLE\" : \"NO CUMPLE\"));\n        System.out.println(\"Ingresos: $\" + ingresosMensuales + \" - \" + (cumpleIngresos ? \"CUMPLE\" : \"NO CUMPLE\"));\n        System.out.println(\"Gastos: \" + porcentajeGastos + \"% de ingresos - \" + (cumpleGastos ? \"CUMPLE\" : \"NO CUMPLE\"));\n\n        if (cumpleEdad &amp;&amp; cumpleIngresos &amp;&amp; cumpleGastos) {\n            double montoMaximoCredito = ingresosMensuales * 5;\n            System.out.println(\"RESULTADO: CR\u00c9DITO APROBADO\");\n            System.out.println(\"Monto m\u00e1ximo del cr\u00e9dito: $\" + montoMaximoCredito);\n        } else {\n            System.out.println(\"RESULTADO: CR\u00c9DITO RECHAZADO\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-3-control-de-inventario-de-mercado","title":"Ejercicio 3: Control de Inventario de Mercado","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Cartagena \u00c1rea de Aplicaci\u00f3n: Comercio/Log\u00edstica</p> <p>Un mercado en Cartagena necesita controlar su inventario de frutas. Cada d\u00eda se venden diferentes cantidades y llegan nuevos productos. Si el inventario de alguna fruta baja de 10 unidades, se debe hacer un pedido de 50 unidades. Simula una semana de ventas y reposici\u00f3n.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Inventario inicial\n        int mangos = 25;\n        int bananos = 15;\n        int naranjas = 8;\n\n        // Ventas diarias durante una semana (7 d\u00edas)\n        int[] ventasMangos = {3, 5, 2, 7, 4, 6, 3};\n        int[] ventasBananos = {2, 4, 3, 5, 2, 4, 3};\n        int[] ventasNaranjas = {1, 2, 3, 2, 1, 3, 2};\n\n        System.out.println(\"=== CONTROL DE INVENTARIO SEMANAL ===\");\n        System.out.println(\"Inventario inicial - Mangos: \" + mangos + \", Bananos: \" + bananos + \", Naranjas: \" + naranjas);\n\n        for (int dia = 0; dia &lt; 7; dia++) {\n            System.out.println(\"\\n--- D\u00cdA \" + (dia + 1) + \" ---\");\n\n            // Procesar ventas\n            mangos -= ventasMangos[dia];\n            bananos -= ventasBananos[dia];\n            naranjas -= ventasNaranjas[dia];\n\n            System.out.println(\"Ventas - Mangos: \" + ventasMangos[dia] + \", Bananos: \" + ventasBananos[dia] + \", Naranjas: \" + ventasNaranjas[dia]);\n            System.out.println(\"Inventario despu\u00e9s de ventas - Mangos: \" + mangos + \", Bananos: \" + bananos + \", Naranjas: \" + naranjas);\n\n            // Verificar si necesita reposici\u00f3n\n            if (mangos &lt; 10) {\n                mangos += 50;\n                System.out.println(\"\u00a1REPOSICI\u00d3N! Se agregaron 50 mangos. Nuevo inventario: \" + mangos);\n            }\n\n            if (bananos &lt; 10) {\n                bananos += 50;\n                System.out.println(\"\u00a1REPOSICI\u00d3N! Se agregaron 50 bananos. Nuevo inventario: \" + bananos);\n            }\n\n            if (naranjas &lt; 10) {\n                naranjas += 50;\n                System.out.println(\"\u00a1REPOSICI\u00d3N! Se agregaron 50 naranjas. Nuevo inventario: \" + naranjas);\n            }\n        }\n\n        System.out.println(\"\\n=== INVENTARIO FINAL ===\");\n        System.out.println(\"Mangos: \" + mangos + \", Bananos: \" + bananos + \", Naranjas: \" + naranjas);\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-4-calculadora-de-tiempo-de-viaje-en-transporte-publico","title":"Ejercicio 4: Calculadora de Tiempo de Viaje en Transporte P\u00fablico","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Medell\u00edn \u00c1rea de Aplicaci\u00f3n: Transporte/Log\u00edstica</p> <p>Una persona en Medell\u00edn necesita calcular el tiempo total de viaje usando diferentes medios de transporte p\u00fablico. Debe tomar un bus (20 minutos), luego el metro (15 minutos), y finalmente caminar (10 minutos). Si hay tr\u00e1fico pesado, el tiempo del bus se incrementa en 50%. Si llueve, el tiempo de caminar se incrementa en 100%.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Tiempos base en minutos\n        int tiempoBus = 20;\n        int tiempoMetro = 15;\n        int tiempoCaminar = 10;\n\n        // Condiciones del d\u00eda\n        boolean trafficoPesado = true;\n        boolean llueve = false;\n\n        // Calcular tiempos ajustados\n        double tiempoBusAjustado = tiempoBus;\n        double tiempoCaminarAjustado = tiempoCaminar;\n\n        if (trafficoPesado) {\n            tiempoBusAjustado = tiempoBus * 1.5; // Incremento del 50%\n        }\n\n        if (llueve) {\n            tiempoCaminarAjustado = tiempoCaminar * 2; // Incremento del 100%\n        }\n\n        double tiempoTotal = tiempoBusAjustado + tiempoMetro + tiempoCaminarAjustado;\n\n        System.out.println(\"=== CALCULADORA DE TIEMPO DE VIAJE ===\");\n        System.out.println(\"Condiciones del d\u00eda:\");\n        System.out.println(\"- Tr\u00e1fico pesado: \" + (trafficoPesado ? \"S\u00cd\" : \"NO\"));\n        System.out.println(\"- Llueve: \" + (llueve ? \"S\u00cd\" : \"NO\"));\n        System.out.println();\n        System.out.println(\"Tiempos de viaje:\");\n        System.out.println(\"- Bus: \" + tiempoBusAjustado + \" minutos\");\n        System.out.println(\"- Metro: \" + tiempoMetro + \" minutos\");\n        System.out.println(\"- Caminar: \" + tiempoCaminarAjustado + \" minutos\");\n        System.out.println();\n        System.out.println(\"TIEMPO TOTAL DE VIAJE: \" + tiempoTotal + \" minutos\");\n\n        // Convertir a horas y minutos si es mayor a 60 minutos\n        if (tiempoTotal &gt;= 60) {\n            int horas = (int) (tiempoTotal / 60);\n            int minutos = (int) (tiempoTotal % 60);\n            System.out.println(\"Equivale a: \" + horas + \" hora(s) y \" + minutos + \" minuto(s)\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-5-sistema-de-gestion-de-vuelos","title":"Ejercicio 5: Sistema de Gesti\u00f3n de Vuelos","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Aeropuerto El Dorado, Bogot\u00e1 \u00c1rea de Aplicaci\u00f3n: Transporte/Aviaci\u00f3n</p> <p>El aeropuerto El Dorado necesita un sistema para determinar el estado de los vuelos. Un vuelo puede estar: a tiempo, retrasado (m\u00e1s de 15 minutos), o cancelado. Si hay mal clima, todos los vuelos se retrasan 30 minutos adicionales. Simula el estado de 5 vuelos en un d\u00eda con condiciones clim\u00e1ticas variables.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Datos de los vuelos (retraso inicial en minutos)\n        String[] codigosVuelo = {\"AV123\", \"LA456\", \"CM789\", \"VV012\", \"WI345\"};\n        int[] retrasoInicial = {0, 10, 25, 0, 45};\n        String[] destinos = {\"Miami\", \"Madrid\", \"Lima\", \"Panam\u00e1\", \"M\u00e9xico\"};\n\n        // Condiciones clim\u00e1ticas\n        boolean malClima = true;\n        int retrasoAdicionalClima = 30;\n\n        System.out.println(\"=== SISTEMA DE GESTI\u00d3N DE VUELOS ===\");\n        System.out.println(\"Aeropuerto El Dorado - Bogot\u00e1\");\n        System.out.println(\"Condiciones clim\u00e1ticas: \" + (malClima ? \"MAL CLIMA\" : \"BUEN CLIMA\"));\n        System.out.println();\n\n        for (int i = 0; i &lt; codigosVuelo.length; i++) {\n            int retrasoTotal = retrasoInicial[i];\n            String estado = \"\";\n\n            // Aplicar retraso por mal clima\n            if (malClima) {\n                retrasoTotal += retrasoAdicionalClima;\n            }\n\n            // Determinar estado del vuelo\n            if (retrasoTotal == 0) {\n                estado = \"A TIEMPO\";\n            } else if (retrasoTotal &lt;= 15) {\n                estado = \"LEVE RETRASO\";\n            } else if (retrasoTotal &lt;= 60) {\n                estado = \"RETRASADO\";\n            } else {\n                estado = \"CANCELADO\";\n            }\n\n            System.out.println(\"Vuelo \" + codigosVuelo[i] + \" hacia \" + destinos[i]);\n            System.out.println(\"  Retraso inicial: \" + retrasoInicial[i] + \" min\");\n            if (malClima) {\n                System.out.println(\"  Retraso por clima: \" + retrasoAdicionalClima + \" min\");\n            }\n            System.out.println(\"  Retraso total: \" + retrasoTotal + \" min\");\n            System.out.println(\"  Estado: \" + estado);\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-6-optimizador-de-rutas-de-entrega","title":"Ejercicio 6: Optimizador de Rutas de Entrega","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Cali \u00c1rea de Aplicaci\u00f3n: Log\u00edstica/Distribuci\u00f3n</p> <p>Una empresa de entregas en Cali necesita optimizar las rutas de sus conductores. Cada conductor puede trabajar m\u00e1ximo 8 horas al d\u00eda. Cada entrega toma entre 30-60 minutos dependiendo de la zona (centro: 30 min, periferia: 45 min, rural: 60 min). Calcula cu\u00e1ntas entregas puede hacer un conductor en un d\u00eda.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Configuraci\u00f3n del d\u00eda\n        int horasMaximasTrabajo = 8;\n        int minutosMaximosTrabajo = horasMaximasTrabajo * 60;\n\n        // Tipos de zona y sus tiempos (en minutos)\n        int tiempoCentro = 30;\n        int tiempoPeriferia = 45;\n        int tiempoRural = 60;\n\n        // Entregas programadas por zona\n        int entregasCentro = 5;\n        int entregasPeriferia = 4;\n        int entregasRural = 2;\n\n        // Calcular tiempo total necesario\n        int tiempoTotalCentro = entregasCentro * tiempoCentro;\n        int tiempoTotalPeriferia = entregasPeriferia * tiempoPeriferia;\n        int tiempoTotalRural = entregasRural * tiempoRural;\n        int tiempoTotalNecesario = tiempoTotalCentro + tiempoTotalPeriferia + tiempoTotalRural;\n\n        System.out.println(\"=== OPTIMIZADOR DE RUTAS DE ENTREGA ===\");\n        System.out.println(\"Empresa de entregas - Cali\");\n        System.out.println();\n        System.out.println(\"Entregas programadas:\");\n        System.out.println(\"- Centro: \" + entregasCentro + \" entregas \u00d7 \" + tiempoCentro + \" min = \" + tiempoTotalCentro + \" min\");\n        System.out.println(\"- Periferia: \" + entregasPeriferia + \" entregas \u00d7 \" + tiempoPeriferia + \" min = \" + tiempoTotalPeriferia + \" min\");\n        System.out.println(\"- Rural: \" + entregasRural + \" entregas \u00d7 \" + tiempoRural + \" min = \" + tiempoTotalRural + \" min\");\n        System.out.println();\n        System.out.println(\"Tiempo total necesario: \" + tiempoTotalNecesario + \" minutos\");\n        System.out.println(\"Tiempo m\u00e1ximo disponible: \" + minutosMaximosTrabajo + \" minutos\");\n\n        if (tiempoTotalNecesario &lt;= minutosMaximosTrabajo) {\n            int tiempoSobrante = minutosMaximosTrabajo - tiempoTotalNecesario;\n            System.out.println(\"RESULTADO: \u2713 TODAS LAS ENTREGAS SON POSIBLES\");\n            System.out.println(\"Tiempo sobrante: \" + tiempoSobrante + \" minutos\");\n\n            // Calcular entregas adicionales posibles\n            int entregasAdicionalesCentro = tiempoSobrante / tiempoCentro;\n            System.out.println(\"Entregas adicionales posibles en centro: \" + entregasAdicionalesCentro);\n        } else {\n            int tiempoExcedente = tiempoTotalNecesario - minutosMaximosTrabajo;\n            System.out.println(\"RESULTADO: \u2717 NO ES POSIBLE COMPLETAR TODAS LAS ENTREGAS\");\n            System.out.println(\"Tiempo excedente: \" + tiempoExcedente + \" minutos\");\n            System.out.println(\"Se necesita reprogramar o asignar a otro conductor\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-7-monitor-de-rutina-de-ejercicios","title":"Ejercicio 7: Monitor de Rutina de Ejercicios","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Gimnasio en Barranquilla \u00c1rea de Aplicaci\u00f3n: Salud/Deporte</p> <p>Un gimnasio en Barranquilla necesita un sistema para monitorear las rutinas de ejercicio de sus clientes. Cada ejercicio quema diferentes calor\u00edas por minuto: cardio (10 cal/min), pesas (8 cal/min), yoga (5 cal/min). Si el cliente supera 500 calor\u00edas quemadas, recibe un bono de 50 puntos. Calcula las calor\u00edas totales y puntos ganados.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Datos del cliente\n        String nombreCliente = \"Mar\u00eda Gonz\u00e1lez\";\n\n        // Calor\u00edas por minuto seg\u00fan tipo de ejercicio\n        int caloriasPorMinutoCardio = 10;\n        int caloriasPorMinutoPesas = 8;\n        int caloriasPorMinutoYoga = 5;\n\n        // Tiempo dedicado a cada ejercicio (en minutos)\n        int tiempoCardio = 30;\n        int tiempoPesas = 45;\n        int tiempoYoga = 20;\n\n        // Calcular calor\u00edas quemadas por ejercicio\n        int caloriasCardio = tiempoCardio * caloriasPorMinutoCardio;\n        int caloriasPesas = tiempoPesas * caloriasPorMinutoPesas;\n        int caloriasYoga = tiempoYoga * caloriasPorMinutoYoga;\n        int caloriasTotal = caloriasCardio + caloriasPesas + caloriasYoga;\n\n        // Sistema de puntos\n        int puntos = 0;\n        if (caloriasTotal &gt; 500) {\n            puntos = 50;\n        }\n\n        // Tiempo total de ejercicio\n        int tiempoTotal = tiempoCardio + tiempoPesas + tiempoYoga;\n\n        System.out.println(\"=== MONITOR DE RUTINA DE EJERCICIOS ===\");\n        System.out.println(\"Gimnasio Barranquilla\");\n        System.out.println(\"Cliente: \" + nombreCliente);\n        System.out.println();\n        System.out.println(\"Rutina del d\u00eda:\");\n        System.out.println(\"- Cardio: \" + tiempoCardio + \" min \u00d7 \" + caloriasPorMinutoCardio + \" cal/min = \" + caloriasCardio + \" calor\u00edas\");\n        System.out.println(\"- Pesas: \" + tiempoPesas + \" min \u00d7 \" + caloriasPorMinutoPesas + \" cal/min = \" + caloriasPesas + \" calor\u00edas\");\n        System.out.println(\"- Yoga: \" + tiempoYoga + \" min \u00d7 \" + caloriasPorMinutoYoga + \" cal/min = \" + caloriasYoga + \" calor\u00edas\");\n        System.out.println();\n        System.out.println(\"RESUMEN:\");\n        System.out.println(\"Tiempo total de ejercicio: \" + tiempoTotal + \" minutos\");\n        System.out.println(\"Calor\u00edas totales quemadas: \" + caloriasTotal + \" calor\u00edas\");\n        System.out.println(\"Puntos ganados: \" + puntos + \" puntos\");\n\n        if (puntos &gt; 0) {\n            System.out.println(\"\u00a1FELICITACIONES! Has superado las 500 calor\u00edas y ganaste un bono.\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-8-sistema-de-triaje-hospitalario","title":"Ejercicio 8: Sistema de Triaje Hospitalario","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Hospital en Bucaramanga \u00c1rea de Aplicaci\u00f3n: Salud/Medicina</p> <p>Un hospital en Bucaramanga necesita clasificar pacientes seg\u00fan la urgencia de su atenci\u00f3n. Los criterios son: temperatura (&gt;38.5\u00b0C = urgente), presi\u00f3n arterial (&gt;140/90 = urgente), dolor (escala 8-10 = urgente). Clasifica a 5 pacientes en: urgente, prioritario, o normal.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Datos de los pacientes\n        String[] nombres = {\"Juan P\u00e9rez\", \"Ana L\u00f3pez\", \"Carlos Ruiz\", \"Mar\u00eda Silva\", \"Pedro G\u00f3mez\"};\n        double[] temperaturas = {37.2, 39.1, 36.8, 38.7, 37.5};\n        int[] presionSistolica = {120, 150, 110, 135, 145};\n        int[] presionDiastolica = {80, 95, 70, 85, 92};\n        int[] nivelDolor = {3, 9, 1, 6, 8};\n\n        System.out.println(\"=== SISTEMA DE TRIAJE HOSPITALARIO ===\");\n        System.out.println(\"Hospital Bucaramanga\");\n        System.out.println();\n\n        for (int i = 0; i &lt; nombres.length; i++) {\n            boolean esUrgente = false;\n            String razonUrgencia = \"\";\n\n            // Verificar criterios de urgencia\n            if (temperaturas[i] &gt; 38.5) {\n                esUrgente = true;\n                razonUrgencia += \"Fiebre alta (\" + temperaturas[i] + \"\u00b0C) \";\n            }\n\n            if (presionSistolica[i] &gt; 140 || presionDiastolica[i] &gt; 90) {\n                esUrgente = true;\n                razonUrgencia += \"Presi\u00f3n alta (\" + presionSistolica[i] + \"/\" + presionDiastolica[i] + \") \";\n            }\n\n            if (nivelDolor[i] &gt;= 8) {\n                esUrgente = true;\n                razonUrgencia += \"Dolor severo (nivel \" + nivelDolor[i] + \") \";\n            }\n\n            // Determinar clasificaci\u00f3n\n            String clasificacion = \"\";\n            if (esUrgente) {\n                clasificacion = \"URGENTE\";\n            } else if (temperaturas[i] &gt; 37.5 || presionSistolica[i] &gt; 130 || nivelDolor[i] &gt;= 5) {\n                clasificacion = \"PRIORITARIO\";\n            } else {\n                clasificacion = \"NORMAL\";\n            }\n\n            System.out.println(\"Paciente: \" + nombres[i]);\n            System.out.println(\"  Temperatura: \" + temperaturas[i] + \"\u00b0C\");\n            System.out.println(\"  Presi\u00f3n arterial: \" + presionSistolica[i] + \"/\" + presionDiastolica[i] + \" mmHg\");\n            System.out.println(\"  Nivel de dolor: \" + nivelDolor[i] + \"/10\");\n            System.out.println(\"  Clasificaci\u00f3n: \" + clasificacion);\n            if (esUrgente) {\n                System.out.println(\"  Raz\u00f3n: \" + razonUrgencia);\n            }\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-9-calculadora-de-notas-y-promedio-estudiantil","title":"Ejercicio 9: Calculadora de Notas y Promedio Estudiantil","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Universidad en Manizales \u00c1rea de Aplicaci\u00f3n: Educaci\u00f3n</p> <p>Una universidad en Manizales necesita calcular el promedio final de sus estudiantes. Las notas se distribuyen as\u00ed: 30% parciales, 40% proyecto final, 30% participaci\u00f3n. Si el promedio es \u22654.0 aprueba, si es \u22653.5 va a supletorio, si es &lt;3.5 reprueba. Calcula el resultado para 3 estudiantes.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Datos de los estudiantes\n        String[] nombres = {\"Alejandra Moreno\", \"Santiago Vargas\", \"Camila Herrera\"};\n        double[] notasParciales = {3.8, 4.2, 2.9};\n        double[] notasProyecto = {4.5, 3.7, 3.2};\n        double[] notasParticipacion = {4.0, 4.8, 4.1};\n\n        // Porcentajes de evaluaci\u00f3n\n        double porcentajeParciales = 0.30;\n        double porcentajeProyecto = 0.40;\n        double porcentajeParticipacion = 0.30;\n\n        System.out.println(\"=== CALCULADORA DE NOTAS Y PROMEDIO ESTUDIANTIL ===\");\n        System.out.println(\"Universidad de Manizales\");\n        System.out.println(\"Distribuci\u00f3n: Parciales 30%, Proyecto 40%, Participaci\u00f3n 30%\");\n        System.out.println();\n\n        for (int i = 0; i &lt; nombres.length; i++) {\n            // Calcular promedio ponderado\n            double promedioFinal = (notasParciales[i] * porcentajeParciales) + \n                                  (notasProyecto[i] * porcentajeProyecto) + \n                                  (notasParticipacion[i] * porcentajeParticipacion);\n\n            // Determinar resultado\n            String resultado = \"\";\n            if (promedioFinal &gt;= 4.0) {\n                resultado = \"APROBADO\";\n            } else if (promedioFinal &gt;= 3.5) {\n                resultado = \"SUPLETORIO\";\n            } else {\n                resultado = \"REPROBADO\";\n            }\n\n            System.out.println(\"Estudiante: \" + nombres[i]);\n            System.out.println(\"  Parciales: \" + notasParciales[i] + \" (30%)\");\n            System.out.println(\"  Proyecto: \" + notasProyecto[i] + \" (40%)\");\n            System.out.println(\"  Participaci\u00f3n: \" + notasParticipacion[i] + \" (30%)\");\n            System.out.println(\"  Promedio final: \" + String.format(\"%.2f\", promedioFinal));\n            System.out.println(\"  Resultado: \" + resultado);\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"content/p8s/#ejercicio-10-sistema-de-riego-automatico-para-cultivos","title":"Ejercicio 10: Sistema de Riego Autom\u00e1tico para Cultivos","text":"<p>Ubicaci\u00f3n Geogr\u00e1fica: Granja en Boyac\u00e1 \u00c1rea de Aplicaci\u00f3n: Agricultura</p> <p>Una granja en Boyac\u00e1 tiene un sistema de riego autom\u00e1tico que debe activarse seg\u00fan las condiciones del cultivo. Si la humedad del suelo es &lt;30%, se activa riego por 60 minutos. Si la temperatura es &gt;25\u00b0C y humedad &lt;50%, se activa por 30 minutos. Si llovi\u00f3 en las \u00faltimas 24 horas, no se activa el riego. Simula el sistema durante una semana.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Datos de la semana (7 d\u00edas)\n        String[] dias = {\"Lunes\", \"Martes\", \"Mi\u00e9rcoles\", \"Jueves\", \"Viernes\", \"S\u00e1bado\", \"Domingo\"};\n        double[] humedadSuelo = {25, 45, 60, 35, 20, 55, 40};\n        double[] temperatura = {28, 22, 24, 30, 26, 19, 27};\n        boolean[] llovio = {false, true, false, false, false, true, false};\n\n        int totalMinutosRiego = 0;\n\n        System.out.println(\"=== SISTEMA DE RIEGO AUTOM\u00c1TICO ===\");\n        System.out.println(\"Granja en Boyac\u00e1\");\n        System.out.println();\n\n        for (int i = 0; i &lt; dias.length; i++) {\n            int minutosRiego = 0;\n            String razon = \"\";\n\n            System.out.println(dias[i] + \":\");\n            System.out.println(\"  Humedad del suelo: \" + humedadSuelo[i] + \"%\");\n            System.out.println(\"  Temperatura: \" + temperatura[i] + \"\u00b0C\");\n            System.out.println(\"  Llovi\u00f3: \" + (llovio[i] ? \"S\u00cd\" : \"NO\"));\n\n            // Verificar condiciones de riego\n            if (llovio[i]) {\n                razon = \"No se riega porque llovi\u00f3\";\n            } else if (humedadSuelo[i] &lt; 30) {\n                minutosRiego = 60;\n                razon = \"Riego por humedad muy baja (&lt;30%)\";\n            } else if (temperatura[i] &gt; 25 &amp;&amp; humedadSuelo[i] &lt; 50) {\n                minutosRiego = 30;\n                razon = \"Riego por temperatura alta y humedad media\";\n            } else {\n                razon = \"No se requiere riego\";\n            }\n\n            totalMinutosRiego += minutosRiego;\n\n            System.out.println(\"  Tiempo de riego: \" + minutosRiego + \" minutos\");\n            System.out.println(\"  Raz\u00f3n: \" + razon);\n            System.out.println();\n        }\n\n        System.out.println(\"=== RESUMEN SEMANAL ===\");\n        System.out.println(\"Total de minutos de riego: \" + totalMinutosRiego);\n        System.out.println(\"Promedio diario: \" + (totalMinutosRiego / 7) + \" minutos\");\n\n        // Convertir a horas si es necesario\n        if (totalMinutosRiego &gt;= 60) {\n            int horas = totalMinutosRiego / 60;\n            int minutos = totalMinutosRiego % 60;\n            System.out.println(\"Equivale a: \" + horas + \" hora(s) y \" + minutos + \" minuto(s)\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p9/","title":"Semana 9 - Estructuras de Datos en Java","text":"<p>Java proporciona herramientas poderosas para gestionar datos, desde arrays hasta el Collections Framework. Esta gu\u00eda explora arrays, ArrayList y las principales colecciones con ejemplos pr\u00e1cticos, ayud\u00e1ndote a dominar su uso en Java.</p>"},{"location":"content/p9/#que-es-un-array-en-java","title":"\u00bfQu\u00e9 es un array en Java?","text":"<p>Un array (arreglo) en Java es una estructura de datos que permite almacenar m\u00faltiples elementos del mismo tipo en una sola variable. Los elementos se almacenan en posiciones consecutivas de memoria y se acceden mediante un \u00edndice (que comienza en 0).</p>"},{"location":"content/p9/#1-declaracion-de-un-array","title":"1. Declaraci\u00f3n de un array","text":"<p>Para usar un array, primero debes declararlo. Hay dos formas principales de hacerlo:</p>"},{"location":"content/p9/#sintaxis","title":"Sintaxis:","text":"<pre><code>tipoDato[] nombreArray; // Forma preferida\n// o\ntipoDato nombreArray[]; // Alternativa v\u00e1lida, pero menos com\u00fan\n</code></pre>"},{"location":"content/p9/#ejemplo","title":"Ejemplo:","text":"<pre><code>int[] numeros;      // Declara un array de enteros\nString[] nombres;   // Declara un array de Strings\n</code></pre>"},{"location":"content/p9/#2-inicializacion-de-un-array","title":"2. Inicializaci\u00f3n de un array","text":"<p>Un array debe inicializarse antes de usarse. Esto implica asignarle un tama\u00f1o o valores iniciales.</p>"},{"location":"content/p9/#a-especificando-el-tamano","title":"a) Especificando el tama\u00f1o:","text":"<p>Usas la palabra clave <code>new</code> junto con el tipo de dato y el tama\u00f1o entre corchetes. <pre><code>numeros = new int[5]; // Crea un array de 5 elementos (inicializados en 0 por defecto)\n</code></pre></p>"},{"location":"content/p9/#b-asignando-valores-directamente","title":"b) Asignando valores directamente:","text":"<p>Puedes inicializar el array con valores espec\u00edficos usando llaves <code>{}</code>. <pre><code>int[] numeros = {1, 2, 3, 4, 5}; // Array de 5 elementos con valores definidos\nString[] nombres = {\"Ana\", \"Luis\", \"Mar\u00eda\"};\n</code></pre></p>"},{"location":"content/p9/#nota","title":"Nota:","text":"<ul> <li>Si inicializas directamente con valores, no necesitas especificar el tama\u00f1o; Java lo calcula autom\u00e1ticamente.</li> <li>Si solo declaras el array (<code>int[] numeros;</code>) sin inicializarlo, no puedes usarlo hasta asignarle un tama\u00f1o o valores.</li> </ul>"},{"location":"content/p9/#3-acceso-a-elementos-del-array","title":"3. Acceso a elementos del array","text":"<p>Cada elemento del array se accede mediante su \u00edndice (posici\u00f3n), que va desde <code>0</code> hasta <code>tama\u00f1o - 1</code>.</p>"},{"location":"content/p9/#ejemplo_1","title":"Ejemplo:","text":"<pre><code>int[] numeros = {10, 20, 30, 40};\nSystem.out.println(numeros[0]); // Imprime 10 (primer elemento)\nSystem.out.println(numeros[2]); // Imprime 30 (tercer elemento)\n</code></pre>"},{"location":"content/p9/#modificar-un-elemento","title":"Modificar un elemento:","text":"<pre><code>numeros[1] = 50; // Cambia el segundo elemento de 20 a 50\nSystem.out.println(numeros[1]); // Imprime 50\n</code></pre>"},{"location":"content/p9/#cuidado","title":"Cuidado:","text":"<p>Si intentas acceder a un \u00edndice fuera del rango (por ejemplo, <code>numeros[5]</code> en un array de tama\u00f1o 4), obtendr\u00e1s una excepci\u00f3n: <code>ArrayIndexOutOfBoundsException</code>.</p>"},{"location":"content/p9/#4-propiedad-length","title":"4. Propiedad <code>length</code>","text":"<p>El atributo <code>length</code> te permite obtener el tama\u00f1o del array.</p>"},{"location":"content/p9/#ejemplo_2","title":"Ejemplo:","text":"<pre><code>int[] numeros = {1, 2, 3, 4, 5};\nSystem.out.println(\"Tama\u00f1o del array: \" + numeros.length); // Imprime 5\n</code></pre>"},{"location":"content/p9/#5-recorrer-un-array","title":"5. Recorrer un array","text":"<p>Puedes usar bucles para recorrer los elementos de un array.</p>"},{"location":"content/p9/#a-con-un-bucle-for-tradicional","title":"a) Con un bucle <code>for</code> tradicional:","text":"<pre><code>int[] numeros = {1, 2, 3, 4, 5};\nfor (int i = 0; i &lt; numeros.length; i++) {\n    System.out.println(\"Elemento en \u00edndice \" + i + \": \" + numeros[i]);\n}\n</code></pre>"},{"location":"content/p9/#b-con-un-bucle-for-each-mejor-para-solo-lectura","title":"b) Con un bucle <code>for-each</code> (mejor para solo lectura):","text":"<pre><code>int[] numeros = {1, 2, 3, 4, 5};\nfor (int numero : numeros) {\n    System.out.println(\"Elemento: \" + numero);\n}\n</code></pre>"},{"location":"content/p9/#6-arrays-multidimensionales","title":"6. Arrays multidimensionales","text":"<p>Un array multidimensional es un \"array de arrays\". El m\u00e1s com\u00fan es el bidimensional (como una matriz).</p>"},{"location":"content/p9/#declaracion-e-inicializacion","title":"Declaraci\u00f3n e inicializaci\u00f3n:","text":"<pre><code>int[][] matriz = new int[3][4]; // Matriz de 3 filas y 4 columnas\n// O con valores iniciales:\nint[][] matriz = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n};\n</code></pre>"},{"location":"content/p9/#acceso-a-elementos","title":"Acceso a elementos:","text":"<pre><code>System.out.println(matriz[0][1]); // Imprime 2 (fila 0, columna 1)\nmatriz[1][2] = 10; // Cambia el valor en fila 1, columna 2 a 10\n</code></pre>"},{"location":"content/p9/#recorrer-un-array-bidimensional","title":"Recorrer un array bidimensional:","text":"<pre><code>for (int i = 0; i &lt; matriz.length; i++) { // Filas\n    for (int j = 0; j &lt; matriz[i].length; j++) { // Columnas\n        System.out.print(matriz[i][j] + \" \");\n    }\n    System.out.println(); // Nueva l\u00ednea por cada fila\n}\n</code></pre>"},{"location":"content/p9/#7-metodos-utiles-de-la-clase-arrays","title":"7. M\u00e9todos \u00fatiles de la clase <code>Arrays</code>","text":"<p>Java proporciona la clase <code>java.util.Arrays</code> con m\u00e9todos \u00fatiles para manipular arrays.</p>"},{"location":"content/p9/#ejemplos","title":"Ejemplos:","text":"<pre><code>import java.util.Arrays;\n\npublic class Ejemplo {\n    public static void main(String[] args) {\n        int[] numeros = {3, 1, 4, 1, 5};\n\n        // a) Ordenar el array\n        Arrays.sort(numeros);\n        System.out.println(Arrays.toString(numeros)); // Imprime [1, 1, 3, 4, 5]\n\n        // b) Convertir a String\n        String resultado = Arrays.toString(numeros);\n        System.out.println(resultado); // Imprime [1, 1, 3, 4, 5]\n\n        // c) Rellenar el array con un valor\n        Arrays.fill(numeros, 0);\n        System.out.println(Arrays.toString(numeros)); // Imprime [0, 0, 0, 0, 0]\n    }\n}\n</code></pre>"},{"location":"content/p9/#8-ejemplo-practico-completo","title":"8. Ejemplo pr\u00e1ctico completo","text":"<p>Un programa que pide al usuario ingresar n\u00fameros en un array y luego calcula su promedio:</p> <pre><code>import java.util.Scanner;\n\npublic class Promedio {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Pedir tama\u00f1o del array\n        System.out.print(\"\u00bfCu\u00e1ntos n\u00fameros desea ingresar? \");\n        int tama\u00f1o = scanner.nextInt();\n\n        // Crear array\n        double[] numeros = new double[tama\u00f1o];\n\n        // Llenar el array\n        for (int i = 0; i &lt; tama\u00f1o; i++) {\n            System.out.print(\"Ingrese el n\u00famero \" + (i + 1) + \": \");\n            numeros[i] = scanner.nextDouble();\n        }\n\n        // Calcular promedio\n        double suma = 0;\n        for (double num : numeros) {\n            suma += num;\n        }\n        double promedio = suma / tama\u00f1o;\n\n        // Mostrar resultado\n        System.out.println(\"El promedio es: \" + promedio);\n\n        scanner.close();\n    }\n}\n</code></pre>"},{"location":"content/p9/#que-es-arraylist-en-java","title":"\u00bfQu\u00e9 es ArrayList en Java?","text":"<p>ArrayList es una clase del Collections Framework de Java que implementa una lista din\u00e1mica redimensionable. A diferencia de los arrays tradicionales, ArrayList puede cambiar su tama\u00f1o autom\u00e1ticamente durante la ejecuci\u00f3n del programa.</p>"},{"location":"content/p9/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li>Tama\u00f1o din\u00e1mico: Puede crecer o reducirse seg\u00fan sea necesario</li> <li>Tipo gen\u00e9rico: Puede almacenar objetos de un tipo espec\u00edfico usando generics</li> <li>M\u00e9todos \u00fatiles: Proporciona muchos m\u00e9todos para manipular la lista</li> <li>Basado en arrays: Internamente usa un array que se redimensiona autom\u00e1ticamente</li> </ul>"},{"location":"content/p9/#1-importar-arraylist","title":"1. Importar ArrayList","text":"<p>Para usar ArrayList, debes importar la clase desde <code>java.util</code>:</p> <pre><code>import java.util.ArrayList;\n</code></pre>"},{"location":"content/p9/#2-declaracion-e-inicializacion-de-arraylist","title":"2. Declaraci\u00f3n e inicializaci\u00f3n de ArrayList","text":""},{"location":"content/p9/#sintaxis-basica","title":"Sintaxis b\u00e1sica:","text":"<pre><code>ArrayList&lt;TipoDato&gt; nombreLista = new ArrayList&lt;&gt;();\n</code></pre>"},{"location":"content/p9/#ejemplos_1","title":"Ejemplos:","text":"<pre><code>import java.util.ArrayList;\n\npublic class EjemploArrayList {\n    public static void main(String[] args) {\n        // ArrayList de enteros\n        ArrayList&lt;Integer&gt; numeros = new ArrayList&lt;&gt;();\n\n        // ArrayList de Strings\n        ArrayList&lt;String&gt; nombres = new ArrayList&lt;&gt;();\n\n        // ArrayList con valores iniciales\n        ArrayList&lt;String&gt; frutas = new ArrayList&lt;&gt;();\n        frutas.add(\"Manzana\");\n        frutas.add(\"Banana\");\n        frutas.add(\"Naranja\");\n    }\n}\n</code></pre>"},{"location":"content/p9/#3-metodos-principales-de-arraylist","title":"3. M\u00e9todos principales de ArrayList","text":""},{"location":"content/p9/#a-agregar-elementos","title":"a) Agregar elementos:","text":"<pre><code>ArrayList&lt;String&gt; lista = new ArrayList&lt;&gt;();\n\n// Agregar al final\nlista.add(\"Elemento 1\");\nlista.add(\"Elemento 2\");\n\n// Agregar en una posici\u00f3n espec\u00edfica\nlista.add(1, \"Elemento insertado\"); // Inserta en \u00edndice 1\n</code></pre>"},{"location":"content/p9/#b-acceder-a-elementos","title":"b) Acceder a elementos:","text":"<pre><code>String elemento = lista.get(0); // Obtiene el primer elemento\nSystem.out.println(elemento);\n</code></pre>"},{"location":"content/p9/#c-modificar-elementos","title":"c) Modificar elementos:","text":"<pre><code>lista.set(0, \"Nuevo valor\"); // Cambia el elemento en \u00edndice 0\n</code></pre>"},{"location":"content/p9/#d-eliminar-elementos","title":"d) Eliminar elementos:","text":"<pre><code>lista.remove(0); // Elimina por \u00edndice\nlista.remove(\"Elemento 2\"); // Elimina por valor\nlista.clear(); // Elimina todos los elementos\n</code></pre>"},{"location":"content/p9/#e-informacion-sobre-la-lista","title":"e) Informaci\u00f3n sobre la lista:","text":"<pre><code>int tama\u00f1o = lista.size(); // Obtiene el tama\u00f1o\nboolean estaVacia = lista.isEmpty(); // Verifica si est\u00e1 vac\u00eda\nboolean contiene = lista.contains(\"Elemento 1\"); // Verifica si contiene un elemento\n</code></pre>"},{"location":"content/p9/#4-recorrer-un-arraylist","title":"4. Recorrer un ArrayList","text":""},{"location":"content/p9/#a-con-bucle-for-tradicional","title":"a) Con bucle for tradicional:","text":"<pre><code>ArrayList&lt;String&gt; nombres = new ArrayList&lt;&gt;();\nnombres.add(\"Ana\");\nnombres.add(\"Luis\");\nnombres.add(\"Mar\u00eda\");\n\nfor (int i = 0; i &lt; nombres.size(); i++) {\n    System.out.println(\"\u00cdndice \" + i + \": \" + nombres.get(i));\n}\n</code></pre>"},{"location":"content/p9/#b-con-bucle-for-each","title":"b) Con bucle for-each:","text":"<pre><code>for (String nombre : nombres) {\n    System.out.println(\"Nombre: \" + nombre);\n}\n</code></pre>"},{"location":"content/p9/#c-con-foreach-y-lambda-java-8","title":"c) Con forEach y lambda (Java 8+):","text":"<pre><code>nombres.forEach(nombre -&gt; System.out.println(\"Nombre: \" + nombre));\n</code></pre>"},{"location":"content/p9/#5-ejemplo-practico-completo","title":"5. Ejemplo pr\u00e1ctico completo","text":"<p>Un programa que gestiona una lista de estudiantes:</p> <pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class GestorEstudiantes {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; estudiantes = new ArrayList&lt;&gt;();\n        Scanner scanner = new Scanner(System.in);\n        int opcion;\n\n        do {\n            System.out.println(\"\\n=== GESTOR DE ESTUDIANTES ===\");\n            System.out.println(\"1. Agregar estudiante\");\n            System.out.println(\"2. Mostrar estudiantes\");\n            System.out.println(\"3. Buscar estudiante\");\n            System.out.println(\"4. Eliminar estudiante\");\n            System.out.println(\"5. Salir\");\n            System.out.print(\"Seleccione una opci\u00f3n: \");\n            opcion = scanner.nextInt();\n            scanner.nextLine(); // Limpiar buffer\n\n            switch (opcion) {\n                case 1:\n                    System.out.print(\"Ingrese el nombre del estudiante: \");\n                    String nombre = scanner.nextLine();\n                    estudiantes.add(nombre);\n                    System.out.println(\"Estudiante agregado exitosamente.\");\n                    break;\n\n                case 2:\n                    if (estudiantes.isEmpty()) {\n                        System.out.println(\"No hay estudiantes registrados.\");\n                    } else {\n                        System.out.println(\"\\nLista de estudiantes:\");\n                        for (int i = 0; i &lt; estudiantes.size(); i++) {\n                            System.out.println((i + 1) + \". \" + estudiantes.get(i));\n                        }\n                    }\n                    break;\n\n                case 3:\n                    System.out.print(\"Ingrese el nombre a buscar: \");\n                    String buscar = scanner.nextLine();\n                    if (estudiantes.contains(buscar)) {\n                        int indice = estudiantes.indexOf(buscar);\n                        System.out.println(\"Estudiante encontrado en la posici\u00f3n: \" + (indice + 1));\n                    } else {\n                        System.out.println(\"Estudiante no encontrado.\");\n                    }\n                    break;\n\n                case 4:\n                    System.out.print(\"Ingrese el nombre del estudiante a eliminar: \");\n                    String eliminar = scanner.nextLine();\n                    if (estudiantes.remove(eliminar)) {\n                        System.out.println(\"Estudiante eliminado exitosamente.\");\n                    } else {\n                        System.out.println(\"Estudiante no encontrado.\");\n                    }\n                    break;\n\n                case 5:\n                    System.out.println(\"\u00a1Hasta luego!\");\n                    break;\n\n                default:\n                    System.out.println(\"Opci\u00f3n no v\u00e1lida.\");\n            }\n        } while (opcion != 5);\n\n        scanner.close();\n    }\n}\n</code></pre>"},{"location":"content/p9/#6-comparacion-arrays-vs-arraylist","title":"6. Comparaci\u00f3n: Arrays vs ArrayList","text":"Caracter\u00edstica Arrays ArrayList Tama\u00f1o Fijo (definido al crear) Din\u00e1mico (se ajusta autom\u00e1ticamente) Tipo de datos Primitivos y objetos Solo objetos (usa wrapper classes) Rendimiento M\u00e1s r\u00e1pido para acceso directo Ligeramente m\u00e1s lento M\u00e9todos Limitados Muchos m\u00e9todos \u00fatiles Sintaxis <code>array[index]</code> <code>list.get(index)</code> Memoria Menos overhead M\u00e1s overhead"},{"location":"content/p9/#cuando-usar-cada-uno","title":"Cu\u00e1ndo usar cada uno:","text":"<ul> <li>Arrays: Cuando conoces el tama\u00f1o exacto y necesitas m\u00e1ximo rendimiento</li> <li>ArrayList: Cuando necesitas flexibilidad en el tama\u00f1o y m\u00e9todos de manipulaci\u00f3n</li> </ul>"},{"location":"content/p9/#7-otros-metodos-utiles-de-arraylist","title":"7. Otros m\u00e9todos \u00fatiles de ArrayList","text":"<pre><code>ArrayList&lt;Integer&gt; numeros = new ArrayList&lt;&gt;();\nnumeros.add(10);\nnumeros.add(20);\nnumeros.add(30);\n\n// Obtener \u00edndice de un elemento\nint indice = numeros.indexOf(20); // Retorna 1\n\n// Verificar si contiene un elemento\nboolean contiene = numeros.contains(25); // Retorna false\n\n// Convertir a array\nInteger[] array = numeros.toArray(new Integer[0]);\n\n// Crear ArrayList desde array\nInteger[] arrayOriginal = {1, 2, 3, 4, 5};\nArrayList&lt;Integer&gt; listaDesdeArray = new ArrayList&lt;&gt;(Arrays.asList(arrayOriginal));\n\n// Ordenar ArrayList\nCollections.sort(numeros); // Requiere import java.util.Collections;\n</code></pre>"},{"location":"content/password/","title":"Generar contrase\u00f1a SHA256 para bloquear contenido","text":"<pre><code>powershell -Command \"[System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes('158789'))).Replace('-','').ToLower()\"\n</code></pre>"},{"location":"content/password/#platilla-para-bloquear-contenido","title":"Platilla para bloquear contenido","text":"<pre><code>&lt;div class=\"password-protected\" data-password-hash=\"f31db6afee933ea691fe16079e00334db73dd8ccadce944d\"&gt;\n  &lt;div class=\"password-form\"&gt;\n    &lt;p&gt;Este contenido est\u00e1 protegido. Por favor, ingresa la contrase\u00f1a para acceder:&lt;/p&gt;\n    &lt;input type=\"password\" class=\"password-input\" placeholder=\"Contrase\u00f1a\"&gt;\n    &lt;button class=\"password-submit md-button md-button--primary\"&gt;Acceder&lt;/button&gt;\n    &lt;p class=\"password-hint\" style=\"display: none;\"&gt;&lt;/p&gt;\n  &lt;/div&gt;        \n  &lt;div class=\"protected-content\"&gt;\n    &lt;!-- Aqu\u00ed va el contenido que deseas proteger --&gt;\n    &lt;p&gt;Este es el contenido protegido.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"pi/p1/","title":"Semana 18","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"}]}